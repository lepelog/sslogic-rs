#![allow(non_camel_case_types)]
use super::logic_static::{
    BitSetCompatible, ForceToD, RequirementExpression, RequirementKey, Requirements, TimeOfDay,
};
use std::collections::HashMap;
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Region {
    AncientCistern,
    Batreaux,
    Beedle,
    CentralSkyloft,
    EarthTemple,
    EldinSilentRealm,
    EldinVolcano,
    FaronSilentRealm,
    FaronWoods,
    FireSanctuary,
    KnightAcademy,
    LakeFloria,
    LanayruCaves,
    LanayruDesert,
    LanayruMines,
    LanayruMiningFacility,
    LanayruSandSea,
    LanayruSilentRealm,
    MogmaTurf,
    Sandship,
    SealedGrounds,
    Sky,
    SkyKeep,
    SkyloftSilentRealm,
    SkyloftVillage,
    Skyview,
    Thunderhead,
    VolcanoSummit,
}
pub struct RegionDef {
    pub name: &'static str,
    pub areas: &'static [Area],
}
impl From<Region> for usize {
    fn from(val: Region) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Region {
    const ALL: &'static [Region] = &[
        Region::AncientCistern,
        Region::Batreaux,
        Region::Beedle,
        Region::CentralSkyloft,
        Region::EarthTemple,
        Region::EldinSilentRealm,
        Region::EldinVolcano,
        Region::FaronSilentRealm,
        Region::FaronWoods,
        Region::FireSanctuary,
        Region::KnightAcademy,
        Region::LakeFloria,
        Region::LanayruCaves,
        Region::LanayruDesert,
        Region::LanayruMines,
        Region::LanayruMiningFacility,
        Region::LanayruSandSea,
        Region::LanayruSilentRealm,
        Region::MogmaTurf,
        Region::Sandship,
        Region::SealedGrounds,
        Region::Sky,
        Region::SkyKeep,
        Region::SkyloftSilentRealm,
        Region::SkyloftVillage,
        Region::Skyview,
        Region::Thunderhead,
        Region::VolcanoSummit,
    ];
}
impl Region {
    pub fn get(&self) -> &'static RegionDef {
        match self {
            Region::AncientCistern => &RegionDef {
                name: "Ancient Cistern",
                areas: &[
                    Area::AncientCistern_AfterAcGutters,
                    Area::AncientCistern_AfterWhipHooks,
                    Area::AncientCistern_BeforeBokoKeyDoor,
                    Area::AncientCistern_BeforeBossDoor,
                    Area::AncientCistern_BehindWaterfall,
                    Area::AncientCistern_BossKeyChestArea,
                    Area::AncientCistern_MainBasement,
                    Area::AncientCistern_MainHub,
                    Area::AncientCistern_MainRoomVines,
                    Area::AncientCistern_SpiderThread,
                    Area::AncientCistern_WhipChestRoom,
                    Area::AncientCisternBoss_Main,
                    Area::AncientCisternCandleRoom_Main,
                ],
            },
            Region::Batreaux => &RegionDef {
                name: "Batreaux",
                areas: &[Area::BatreauxHouse_Main],
            },
            Region::Beedle => &RegionDef {
                name: "Beedle",
                areas: &[Area::BeedlesShop_Main],
            },
            Region::CentralSkyloft => &RegionDef {
                name: "Central Skyloft",
                areas: &[
                    Area::Bazaar_Main,
                    Area::ParrowAndOriellesHouse_Main,
                    Area::PeatricesHouse_Main,
                    Area::PipersHouse_Main,
                    Area::Skyloft_CentralOutside,
                    Area::Skyloft_PastWaterfallCave,
                    Area::Skyloft_ToSkyKeep,
                    Area::Skyloft_WaterfallCaveCrystals,
                    Area::WaterfallCave_Main,
                    Area::WrynasHouse_Main,
                ],
            },
            Region::EarthTemple => &RegionDef {
                name: "Earth Temple",
                areas: &[
                    Area::EarthTemple_AfterBallRolling,
                    Area::EarthTemple_BallRolling,
                    Area::EarthTemple_BossDoorArea,
                    Area::EarthTemple_Entrance,
                    Area::EarthTempleBoss_Main,
                    Area::EarthTempleSpring_Main,
                ],
            },
            Region::EldinSilentRealm => &RegionDef {
                name: "Eldin Silent Realm",
                areas: &[Area::EldinSilentRealm_Trial],
            },
            Region::EldinVolcano => &RegionDef {
                name: "Eldin Volcano",
                areas: &[
                    Area::EldinVolcano_FirstRoom,
                    Area::EldinVolcano_HotCaveArea,
                    Area::EldinVolcano_NearThrillDigger,
                    Area::EldinVolcano_OutsideEt,
                    Area::EldinVolcano_PastMogmaTurf,
                    Area::EldinVolcano_PastSlide,
                    Area::EldinVolcano_PreMogmaTurf,
                    Area::EldinVolcano_SandSlide,
                    Area::EldinVolcano_VolcanoAscent,
                    Area::ThrillDiggerCave_Main,
                ],
            },
            Region::FaronSilentRealm => &RegionDef {
                name: "Faron Silent Realm",
                areas: &[Area::FaronSilentRealm_Trial],
            },
            Region::FaronWoods => &RegionDef {
                name: "Faron Woods",
                areas: &[
                    Area::DeepWoods_Entry,
                    Area::DeepWoods_PastBeehive,
                    Area::FaronWoods_ClawshotTargetBranch,
                    Area::FaronWoods_Entry,
                    Area::FaronWoods_GreatTreePlatforms,
                    Area::FaronWoods_GreatTreeTop,
                    Area::FaronWoods_Main,
                    Area::GreatTree_Entry,
                    Area::GreatTree_Lower,
                    Area::GreatTree_Middle,
                    Area::GreatTree_PastPlatforms,
                    Area::GreatTree_Upper,
                ],
            },
            Region::FireSanctuary => &RegionDef {
                name: "Fire Sanctuary",
                areas: &[
                    Area::FireSanctuaryA_Entry,
                    Area::FireSanctuaryA_InFrontOfBossDoor,
                    Area::FireSanctuaryA_PastFirstWaterPlant,
                    Area::FireSanctuaryA_PrePlatsArea,
                    Area::FireSanctuaryA_UpperStaircaseRoom,
                    Area::FireSanctuaryB_AfterDoubleMagmanosFight,
                    Area::FireSanctuaryB_FirstOutsideSection,
                    Area::FireSanctuaryB_LastTrappedMogmaArea,
                    Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
                    Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                    Area::FireSanctuaryB_WaterFruitRoom,
                    Area::FireSanctuaryBoss_Main,
                    Area::FireSanctuaryFlameRoom_Main,
                ],
            },
            Region::KnightAcademy => &RegionDef {
                name: "Knight Academy",
                areas: &[
                    Area::InsideGoddessStatue_Main,
                    Area::KnightAcademy_AboveZeldasRoom,
                    Area::KnightAcademy_Main,
                    Area::Skyloft_OutsideGoddessStatue,
                    Area::SparringHall_Main,
                ],
            },
            Region::LakeFloria => &RegionDef {
                name: "Lake Floria",
                areas: &[
                    Area::FaroresLair_Main,
                    Area::FloriaWaterfall_Main,
                    Area::LakeFloria_Entry,
                    Area::LakeFloria_StatueSpot,
                    Area::LakeFloria_ToFaroresLair,
                ],
            },
            Region::LanayruCaves => &RegionDef {
                name: "Lanayru Caves",
                areas: &[Area::LanayruCaves_Main, Area::LanayruCaves_ToSandSea],
            },
            Region::LanayruDesert => &RegionDef {
                name: "Lanayru Desert",
                areas: &[
                    Area::FireNode_End,
                    Area::FireNode_Main,
                    Area::LanayruDesert_HookBeetleArea,
                    Area::LanayruDesert_PastToT,
                    Area::LanayruDesert_SandOasis,
                    Area::LightningNode_Main,
                    Area::TempleOfTime_AfterLmf,
                    Area::TempleOfTime_End,
                    Area::TempleOfTime_NearCube,
                    Area::TempleOfTime_NearGossipStone,
                    Area::TempleOfTime_Start,
                ],
            },
            Region::LanayruMines => &RegionDef {
                name: "Lanayru Mines",
                areas: &[
                    Area::LanayruMines_FirstHalf,
                    Area::LanayruMines_ToCaves,
                    Area::LanayruMines_ToDesert,
                ],
            },
            Region::LanayruMiningFacility => &RegionDef {
                name: "Lanayru Mining Facility",
                areas: &[
                    Area::LanayruMiningFacilityA_Entry,
                    Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                    Area::LanayruMiningFacilityA_FirstWestRoom,
                    Area::LanayruMiningFacilityA_GustBellowsRoom,
                    Area::LanayruMiningFacilityA_MapRoom,
                    Area::LanayruMiningFacilityA_SecondRoom,
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    Area::LanayruMiningFacilityB_HubRoom,
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                    Area::LanayruMiningFacilityB_NearBossDoor,
                    Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
                    Area::LanayruMiningFacilityB_WestHub,
                    Area::LanayruMiningFacilityBoss_Main,
                    Area::LanayruMiningFacilityToToT_BossDoor,
                    Area::LanayruMiningFacilityToToT_ToTExit,
                ],
            },
            Region::LanayruSandSea => &RegionDef {
                name: "Lanayru Sand Sea",
                areas: &[
                    Area::InsidePiratesStronghold_Main,
                    Area::OutsidePiratesStronghold_InsideSharkhead,
                    Area::OutsidePiratesStronghold_Main,
                    Area::SandSea_Main,
                    Area::SandSeaDocks_Main,
                    Area::SandSeaDocks_ToCaves,
                    Area::Shipyard_AfterMinecartRide,
                    Area::Shipyard_Main,
                    Area::ShipyardConstructionBay_Lower,
                    Area::ShipyardConstructionBay_Upper,
                    Area::SkippersRetreat_NextToShack,
                    Area::SkippersRetreat_PastDekuBaba,
                    Area::SkippersRetreat_PastMoblin,
                    Area::SkippersRetreat_Start,
                    Area::SkippersShack_Main,
                ],
            },
            Region::LanayruSilentRealm => &RegionDef {
                name: "Lanayru Silent Realm",
                areas: &[Area::LanayruSilentRealm_Trial],
            },
            Region::MogmaTurf => &RegionDef {
                name: "Mogma Turf",
                areas: &[Area::MogmaTurf_Main],
            },
            Region::Sandship => &RegionDef {
                name: "Sandship",
                areas: &[
                    Area::Sandship_Deck,
                    Area::Sandship_PastSpume,
                    Area::Sandship_SandshipBrig,
                    Area::SandshipBoss_Main,
                ],
            },
            Region::SealedGrounds => &RegionDef {
                name: "Sealed Grounds",
                areas: &[
                    Area::BehindTheTemple_Main,
                    Area::HyliasTemple_Main,
                    Area::SealedGroundsSpiral_Lower,
                    Area::SealedGroundsSpiral_Upper,
                    Area::SealedTemple_Main,
                ],
            },
            Region::Sky => &RegionDef {
                name: "Sky",
                areas: &[
                    Area::InsideBambooIsland_Main,
                    Area::LumpyPumpkin_Main,
                    Area::Sky_BeedleIslandCage,
                    Area::Sky_BeedlesSkyHome,
                    Area::Sky_Field,
                    Area::Sky_OutsideLumpyPumpkin,
                ],
            },
            Region::SkyKeep => &RegionDef {
                name: "Sky Keep",
                areas: &[Area::SkyKeepEntry_Main],
            },
            Region::SkyloftSilentRealm => &RegionDef {
                name: "Skyloft Silent Realm",
                areas: &[Area::SkyloftSilentRealm_Trial],
            },
            Region::SkyloftVillage => &RegionDef {
                name: "Skyloft Village",
                areas: &[
                    Area::BertiesHouse_Main,
                    Area::GondosHouse_Main,
                    Area::MallarasHouse_Main,
                    Area::RupinsHouse_Main,
                    Area::Skyloft_OutsideSkyloftVillage,
                    Area::SparrotsHouse_Main,
                ],
            },
            Region::Skyview => &RegionDef {
                name: "Skyview",
                areas: &[
                    Area::SkyviewBoss_Main,
                    Area::SkyviewSpring_Main,
                    Area::SkyviewTemple_BossDoorArea,
                    Area::SkyviewTemple_Entry,
                    Area::SkyviewTemple_FirstHub,
                    Area::SkyviewTemple_MainHub,
                ],
            },
            Region::Thunderhead => &RegionDef {
                name: "Thunderhead",
                areas: &[Area::InsideThunderhead_Main, Area::IsleOfSongs_Main],
            },
            Region::VolcanoSummit => &RegionDef {
                name: "Volcano Summit",
                areas: &[
                    Area::InsideVolcanoSummit_Main,
                    Area::OutsideFireSanctuary_Middle,
                    Area::OutsideFireSanctuary_ToFireSanctuary,
                    Area::OutsideFireSanctuary_ToInsideSummit,
                    Area::VolcanoSummitWaterfall_Main,
                ],
            },
        }
    }
    pub fn name(&self) -> &'static str {
        self.get().name
    }
    pub fn areas(&self) -> &'static [Area] {
        self.get().areas
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Stage {
    AncientCistern,
    AncientCisternBoss,
    AncientCisternCandleRoom,
    BatreauxHouse,
    BeedlesShop,
    Bazaar,
    ParrowAndOriellesHouse,
    PeatricesHouse,
    PipersHouse,
    Skyloft,
    WaterfallCave,
    WrynasHouse,
    EarthTemple,
    EarthTempleBoss,
    EarthTempleSpring,
    EldinSilentRealm,
    EldinVolcano,
    ThrillDiggerCave,
    FaronSilentRealm,
    DeepWoods,
    FaronWoods,
    GreatTree,
    FireSanctuaryA,
    FireSanctuaryB,
    FireSanctuaryBoss,
    FireSanctuaryFlameRoom,
    InsideGoddessStatue,
    KnightAcademy,
    SparringHall,
    FaroresLair,
    FloriaWaterfall,
    LakeFloria,
    LanayruCaves,
    FireNode,
    LanayruDesert,
    LightningNode,
    TempleOfTime,
    LanayruMines,
    LanayruMiningFacilityA,
    LanayruMiningFacilityB,
    LanayruMiningFacilityBoss,
    LanayruMiningFacilityToToT,
    InsidePiratesStronghold,
    OutsidePiratesStronghold,
    SandSea,
    SandSeaDocks,
    Shipyard,
    ShipyardConstructionBay,
    SkippersRetreat,
    SkippersShack,
    LanayruSilentRealm,
    MogmaTurf,
    Sandship,
    SandshipBoss,
    BehindTheTemple,
    HyliasTemple,
    SealedGroundsSpiral,
    SealedTemple,
    InsideBambooIsland,
    LumpyPumpkin,
    Sky,
    SkyKeepEntry,
    SkyloftSilentRealm,
    BertiesHouse,
    GondosHouse,
    MallarasHouse,
    RupinsHouse,
    SparrotsHouse,
    SkyviewBoss,
    SkyviewSpring,
    SkyviewTemple,
    InsideThunderhead,
    IsleOfSongs,
    InsideVolcanoSummit,
    OutsideFireSanctuary,
    VolcanoSummitWaterfall,
}
pub struct StageDef {
    pub name: &'static str,
    pub areas: &'static [Area],
}
impl From<Stage> for usize {
    fn from(val: Stage) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Stage {
    const ALL: &'static [Stage] = &[
        Stage::AncientCistern,
        Stage::AncientCisternBoss,
        Stage::AncientCisternCandleRoom,
        Stage::BatreauxHouse,
        Stage::BeedlesShop,
        Stage::Bazaar,
        Stage::ParrowAndOriellesHouse,
        Stage::PeatricesHouse,
        Stage::PipersHouse,
        Stage::Skyloft,
        Stage::WaterfallCave,
        Stage::WrynasHouse,
        Stage::EarthTemple,
        Stage::EarthTempleBoss,
        Stage::EarthTempleSpring,
        Stage::EldinSilentRealm,
        Stage::EldinVolcano,
        Stage::ThrillDiggerCave,
        Stage::FaronSilentRealm,
        Stage::DeepWoods,
        Stage::FaronWoods,
        Stage::GreatTree,
        Stage::FireSanctuaryA,
        Stage::FireSanctuaryB,
        Stage::FireSanctuaryBoss,
        Stage::FireSanctuaryFlameRoom,
        Stage::InsideGoddessStatue,
        Stage::KnightAcademy,
        Stage::SparringHall,
        Stage::FaroresLair,
        Stage::FloriaWaterfall,
        Stage::LakeFloria,
        Stage::LanayruCaves,
        Stage::FireNode,
        Stage::LanayruDesert,
        Stage::LightningNode,
        Stage::TempleOfTime,
        Stage::LanayruMines,
        Stage::LanayruMiningFacilityA,
        Stage::LanayruMiningFacilityB,
        Stage::LanayruMiningFacilityBoss,
        Stage::LanayruMiningFacilityToToT,
        Stage::InsidePiratesStronghold,
        Stage::OutsidePiratesStronghold,
        Stage::SandSea,
        Stage::SandSeaDocks,
        Stage::Shipyard,
        Stage::ShipyardConstructionBay,
        Stage::SkippersRetreat,
        Stage::SkippersShack,
        Stage::LanayruSilentRealm,
        Stage::MogmaTurf,
        Stage::Sandship,
        Stage::SandshipBoss,
        Stage::BehindTheTemple,
        Stage::HyliasTemple,
        Stage::SealedGroundsSpiral,
        Stage::SealedTemple,
        Stage::InsideBambooIsland,
        Stage::LumpyPumpkin,
        Stage::Sky,
        Stage::SkyKeepEntry,
        Stage::SkyloftSilentRealm,
        Stage::BertiesHouse,
        Stage::GondosHouse,
        Stage::MallarasHouse,
        Stage::RupinsHouse,
        Stage::SparrotsHouse,
        Stage::SkyviewBoss,
        Stage::SkyviewSpring,
        Stage::SkyviewTemple,
        Stage::InsideThunderhead,
        Stage::IsleOfSongs,
        Stage::InsideVolcanoSummit,
        Stage::OutsideFireSanctuary,
        Stage::VolcanoSummitWaterfall,
    ];
}
impl Stage {
    pub fn get(&self) -> &'static StageDef {
        match self {
            Stage::AncientCistern => &StageDef {
                name: "Ancient Cistern",
                areas: &[
                    Area::AncientCistern_AfterAcGutters,
                    Area::AncientCistern_AfterWhipHooks,
                    Area::AncientCistern_BeforeBokoKeyDoor,
                    Area::AncientCistern_BeforeBossDoor,
                    Area::AncientCistern_BehindWaterfall,
                    Area::AncientCistern_BossKeyChestArea,
                    Area::AncientCistern_MainBasement,
                    Area::AncientCistern_MainHub,
                    Area::AncientCistern_MainRoomVines,
                    Area::AncientCistern_SpiderThread,
                    Area::AncientCistern_WhipChestRoom,
                ],
            },
            Stage::AncientCisternBoss => &StageDef {
                name: "Ancient Cistern Boss",
                areas: &[Area::AncientCisternBoss_Main],
            },
            Stage::AncientCisternCandleRoom => &StageDef {
                name: "Ancient Cistern Candle Room",
                areas: &[Area::AncientCisternCandleRoom_Main],
            },
            Stage::BatreauxHouse => &StageDef {
                name: "Batreaux' House",
                areas: &[Area::BatreauxHouse_Main],
            },
            Stage::BeedlesShop => &StageDef {
                name: "Beedle's Shop",
                areas: &[Area::BeedlesShop_Main],
            },
            Stage::Bazaar => &StageDef {
                name: "Bazaar",
                areas: &[Area::Bazaar_Main],
            },
            Stage::ParrowAndOriellesHouse => &StageDef {
                name: "Parrow and Orielle's House",
                areas: &[Area::ParrowAndOriellesHouse_Main],
            },
            Stage::PeatricesHouse => &StageDef {
                name: "Peatrice's House",
                areas: &[Area::PeatricesHouse_Main],
            },
            Stage::PipersHouse => &StageDef {
                name: "Piper's House",
                areas: &[Area::PipersHouse_Main],
            },
            Stage::Skyloft => &StageDef {
                name: "Skyloft",
                areas: &[
                    Area::Skyloft_CentralOutside,
                    Area::Skyloft_PastWaterfallCave,
                    Area::Skyloft_ToSkyKeep,
                    Area::Skyloft_WaterfallCaveCrystals,
                    Area::Skyloft_OutsideGoddessStatue,
                    Area::Skyloft_OutsideSkyloftVillage,
                ],
            },
            Stage::WaterfallCave => &StageDef {
                name: "Waterfall Cave",
                areas: &[Area::WaterfallCave_Main],
            },
            Stage::WrynasHouse => &StageDef {
                name: "Wryna's House",
                areas: &[Area::WrynasHouse_Main],
            },
            Stage::EarthTemple => &StageDef {
                name: "Earth Temple",
                areas: &[
                    Area::EarthTemple_AfterBallRolling,
                    Area::EarthTemple_BallRolling,
                    Area::EarthTemple_BossDoorArea,
                    Area::EarthTemple_Entrance,
                ],
            },
            Stage::EarthTempleBoss => &StageDef {
                name: "Earth Temple Boss",
                areas: &[Area::EarthTempleBoss_Main],
            },
            Stage::EarthTempleSpring => &StageDef {
                name: "Earth Temple Spring",
                areas: &[Area::EarthTempleSpring_Main],
            },
            Stage::EldinSilentRealm => &StageDef {
                name: "Eldin Silent Realm",
                areas: &[Area::EldinSilentRealm_Trial],
            },
            Stage::EldinVolcano => &StageDef {
                name: "Eldin Volcano",
                areas: &[
                    Area::EldinVolcano_FirstRoom,
                    Area::EldinVolcano_HotCaveArea,
                    Area::EldinVolcano_NearThrillDigger,
                    Area::EldinVolcano_OutsideEt,
                    Area::EldinVolcano_PastMogmaTurf,
                    Area::EldinVolcano_PastSlide,
                    Area::EldinVolcano_PreMogmaTurf,
                    Area::EldinVolcano_SandSlide,
                    Area::EldinVolcano_VolcanoAscent,
                ],
            },
            Stage::ThrillDiggerCave => &StageDef {
                name: "Thrill Digger Cave",
                areas: &[Area::ThrillDiggerCave_Main],
            },
            Stage::FaronSilentRealm => &StageDef {
                name: "Faron Silent Realm",
                areas: &[Area::FaronSilentRealm_Trial],
            },
            Stage::DeepWoods => &StageDef {
                name: "Deep Woods",
                areas: &[Area::DeepWoods_Entry, Area::DeepWoods_PastBeehive],
            },
            Stage::FaronWoods => &StageDef {
                name: "Faron Woods",
                areas: &[
                    Area::FaronWoods_ClawshotTargetBranch,
                    Area::FaronWoods_Entry,
                    Area::FaronWoods_GreatTreePlatforms,
                    Area::FaronWoods_GreatTreeTop,
                    Area::FaronWoods_Main,
                ],
            },
            Stage::GreatTree => &StageDef {
                name: "Great Tree",
                areas: &[
                    Area::GreatTree_Entry,
                    Area::GreatTree_Lower,
                    Area::GreatTree_Middle,
                    Area::GreatTree_PastPlatforms,
                    Area::GreatTree_Upper,
                ],
            },
            Stage::FireSanctuaryA => &StageDef {
                name: "Fire Sanctuary A",
                areas: &[
                    Area::FireSanctuaryA_Entry,
                    Area::FireSanctuaryA_InFrontOfBossDoor,
                    Area::FireSanctuaryA_PastFirstWaterPlant,
                    Area::FireSanctuaryA_PrePlatsArea,
                    Area::FireSanctuaryA_UpperStaircaseRoom,
                ],
            },
            Stage::FireSanctuaryB => &StageDef {
                name: "Fire Sanctuary B",
                areas: &[
                    Area::FireSanctuaryB_AfterDoubleMagmanosFight,
                    Area::FireSanctuaryB_FirstOutsideSection,
                    Area::FireSanctuaryB_LastTrappedMogmaArea,
                    Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
                    Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                    Area::FireSanctuaryB_WaterFruitRoom,
                ],
            },
            Stage::FireSanctuaryBoss => &StageDef {
                name: "Fire Sanctuary Boss",
                areas: &[Area::FireSanctuaryBoss_Main],
            },
            Stage::FireSanctuaryFlameRoom => &StageDef {
                name: "Fire Sanctuary Flame Room",
                areas: &[Area::FireSanctuaryFlameRoom_Main],
            },
            Stage::InsideGoddessStatue => &StageDef {
                name: "Inside Goddess Statue",
                areas: &[Area::InsideGoddessStatue_Main],
            },
            Stage::KnightAcademy => &StageDef {
                name: "Knight Academy",
                areas: &[
                    Area::KnightAcademy_AboveZeldasRoom,
                    Area::KnightAcademy_Main,
                ],
            },
            Stage::SparringHall => &StageDef {
                name: "Sparring Hall",
                areas: &[Area::SparringHall_Main],
            },
            Stage::FaroresLair => &StageDef {
                name: "Farore's Lair",
                areas: &[Area::FaroresLair_Main],
            },
            Stage::FloriaWaterfall => &StageDef {
                name: "Floria Waterfall",
                areas: &[Area::FloriaWaterfall_Main],
            },
            Stage::LakeFloria => &StageDef {
                name: "Lake Floria",
                areas: &[
                    Area::LakeFloria_Entry,
                    Area::LakeFloria_StatueSpot,
                    Area::LakeFloria_ToFaroresLair,
                ],
            },
            Stage::LanayruCaves => &StageDef {
                name: "Lanayru Caves",
                areas: &[Area::LanayruCaves_Main, Area::LanayruCaves_ToSandSea],
            },
            Stage::FireNode => &StageDef {
                name: "Fire Node",
                areas: &[Area::FireNode_End, Area::FireNode_Main],
            },
            Stage::LanayruDesert => &StageDef {
                name: "Lanayru Desert",
                areas: &[
                    Area::LanayruDesert_HookBeetleArea,
                    Area::LanayruDesert_PastToT,
                    Area::LanayruDesert_SandOasis,
                ],
            },
            Stage::LightningNode => &StageDef {
                name: "Lightning Node",
                areas: &[Area::LightningNode_Main],
            },
            Stage::TempleOfTime => &StageDef {
                name: "Temple of Time",
                areas: &[
                    Area::TempleOfTime_AfterLmf,
                    Area::TempleOfTime_End,
                    Area::TempleOfTime_NearCube,
                    Area::TempleOfTime_NearGossipStone,
                    Area::TempleOfTime_Start,
                ],
            },
            Stage::LanayruMines => &StageDef {
                name: "Lanayru Mines",
                areas: &[
                    Area::LanayruMines_FirstHalf,
                    Area::LanayruMines_ToCaves,
                    Area::LanayruMines_ToDesert,
                ],
            },
            Stage::LanayruMiningFacilityA => &StageDef {
                name: "Lanayru Mining Facility A",
                areas: &[
                    Area::LanayruMiningFacilityA_Entry,
                    Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                    Area::LanayruMiningFacilityA_FirstWestRoom,
                    Area::LanayruMiningFacilityA_GustBellowsRoom,
                    Area::LanayruMiningFacilityA_MapRoom,
                    Area::LanayruMiningFacilityA_SecondRoom,
                ],
            },
            Stage::LanayruMiningFacilityB => &StageDef {
                name: "Lanayru Mining Facility B",
                areas: &[
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    Area::LanayruMiningFacilityB_HubRoom,
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                    Area::LanayruMiningFacilityB_NearBossDoor,
                    Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
                    Area::LanayruMiningFacilityB_WestHub,
                ],
            },
            Stage::LanayruMiningFacilityBoss => &StageDef {
                name: "Lanayru Mining Facility Boss",
                areas: &[Area::LanayruMiningFacilityBoss_Main],
            },
            Stage::LanayruMiningFacilityToToT => &StageDef {
                name: "Lanayru Mining Facility to ToT",
                areas: &[
                    Area::LanayruMiningFacilityToToT_BossDoor,
                    Area::LanayruMiningFacilityToToT_ToTExit,
                ],
            },
            Stage::InsidePiratesStronghold => &StageDef {
                name: "Inside Pirate's Stronghold",
                areas: &[Area::InsidePiratesStronghold_Main],
            },
            Stage::OutsidePiratesStronghold => &StageDef {
                name: "Outside Pirate's Stronghold",
                areas: &[
                    Area::OutsidePiratesStronghold_InsideSharkhead,
                    Area::OutsidePiratesStronghold_Main,
                ],
            },
            Stage::SandSea => &StageDef {
                name: "Sand Sea",
                areas: &[Area::SandSea_Main],
            },
            Stage::SandSeaDocks => &StageDef {
                name: "Sand Sea Docks",
                areas: &[Area::SandSeaDocks_Main, Area::SandSeaDocks_ToCaves],
            },
            Stage::Shipyard => &StageDef {
                name: "Shipyard",
                areas: &[Area::Shipyard_AfterMinecartRide, Area::Shipyard_Main],
            },
            Stage::ShipyardConstructionBay => &StageDef {
                name: "Shipyard Construction Bay",
                areas: &[
                    Area::ShipyardConstructionBay_Lower,
                    Area::ShipyardConstructionBay_Upper,
                ],
            },
            Stage::SkippersRetreat => &StageDef {
                name: "Skipper's Retreat",
                areas: &[
                    Area::SkippersRetreat_NextToShack,
                    Area::SkippersRetreat_PastDekuBaba,
                    Area::SkippersRetreat_PastMoblin,
                    Area::SkippersRetreat_Start,
                ],
            },
            Stage::SkippersShack => &StageDef {
                name: "Skipper's Shack",
                areas: &[Area::SkippersShack_Main],
            },
            Stage::LanayruSilentRealm => &StageDef {
                name: "Lanayru Silent Realm",
                areas: &[Area::LanayruSilentRealm_Trial],
            },
            Stage::MogmaTurf => &StageDef {
                name: "Mogma Turf",
                areas: &[Area::MogmaTurf_Main],
            },
            Stage::Sandship => &StageDef {
                name: "Sandship",
                areas: &[
                    Area::Sandship_Deck,
                    Area::Sandship_PastSpume,
                    Area::Sandship_SandshipBrig,
                ],
            },
            Stage::SandshipBoss => &StageDef {
                name: "Sandship Boss",
                areas: &[Area::SandshipBoss_Main],
            },
            Stage::BehindTheTemple => &StageDef {
                name: "Behind the Temple",
                areas: &[Area::BehindTheTemple_Main],
            },
            Stage::HyliasTemple => &StageDef {
                name: "Hylia's Temple",
                areas: &[Area::HyliasTemple_Main],
            },
            Stage::SealedGroundsSpiral => &StageDef {
                name: "Sealed Grounds Spiral",
                areas: &[
                    Area::SealedGroundsSpiral_Lower,
                    Area::SealedGroundsSpiral_Upper,
                ],
            },
            Stage::SealedTemple => &StageDef {
                name: "Sealed Temple",
                areas: &[Area::SealedTemple_Main],
            },
            Stage::InsideBambooIsland => &StageDef {
                name: "Inside Bamboo Island",
                areas: &[Area::InsideBambooIsland_Main],
            },
            Stage::LumpyPumpkin => &StageDef {
                name: "Lumpy Pumpkin",
                areas: &[Area::LumpyPumpkin_Main],
            },
            Stage::Sky => &StageDef {
                name: "Sky",
                areas: &[
                    Area::Sky_BeedleIslandCage,
                    Area::Sky_BeedlesSkyHome,
                    Area::Sky_Field,
                    Area::Sky_OutsideLumpyPumpkin,
                ],
            },
            Stage::SkyKeepEntry => &StageDef {
                name: "Sky Keep Entry",
                areas: &[Area::SkyKeepEntry_Main],
            },
            Stage::SkyloftSilentRealm => &StageDef {
                name: "Skyloft Silent Realm",
                areas: &[Area::SkyloftSilentRealm_Trial],
            },
            Stage::BertiesHouse => &StageDef {
                name: "Bertie's House",
                areas: &[Area::BertiesHouse_Main],
            },
            Stage::GondosHouse => &StageDef {
                name: "Gondo's House",
                areas: &[Area::GondosHouse_Main],
            },
            Stage::MallarasHouse => &StageDef {
                name: "Mallara's House",
                areas: &[Area::MallarasHouse_Main],
            },
            Stage::RupinsHouse => &StageDef {
                name: "Rupin's House",
                areas: &[Area::RupinsHouse_Main],
            },
            Stage::SparrotsHouse => &StageDef {
                name: "Sparrot's House",
                areas: &[Area::SparrotsHouse_Main],
            },
            Stage::SkyviewBoss => &StageDef {
                name: "Skyview Boss",
                areas: &[Area::SkyviewBoss_Main],
            },
            Stage::SkyviewSpring => &StageDef {
                name: "Skyview Spring",
                areas: &[Area::SkyviewSpring_Main],
            },
            Stage::SkyviewTemple => &StageDef {
                name: "Skyview Temple",
                areas: &[
                    Area::SkyviewTemple_BossDoorArea,
                    Area::SkyviewTemple_Entry,
                    Area::SkyviewTemple_FirstHub,
                    Area::SkyviewTemple_MainHub,
                ],
            },
            Stage::InsideThunderhead => &StageDef {
                name: "Inside Thunderhead",
                areas: &[Area::InsideThunderhead_Main],
            },
            Stage::IsleOfSongs => &StageDef {
                name: "Isle of Songs",
                areas: &[Area::IsleOfSongs_Main],
            },
            Stage::InsideVolcanoSummit => &StageDef {
                name: "Inside Volcano Summit",
                areas: &[Area::InsideVolcanoSummit_Main],
            },
            Stage::OutsideFireSanctuary => &StageDef {
                name: "Outside Fire Sanctuary",
                areas: &[
                    Area::OutsideFireSanctuary_Middle,
                    Area::OutsideFireSanctuary_ToFireSanctuary,
                    Area::OutsideFireSanctuary_ToInsideSummit,
                ],
            },
            Stage::VolcanoSummitWaterfall => &StageDef {
                name: "Volcano Summit Waterfall",
                areas: &[Area::VolcanoSummitWaterfall_Main],
            },
        }
    }
    pub fn name(&self) -> &'static str {
        self.get().name
    }
    pub fn areas(&self) -> &'static [Area] {
        self.get().areas
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Area {
    AncientCistern_AfterAcGutters,
    AncientCistern_AfterWhipHooks,
    AncientCistern_BeforeBokoKeyDoor,
    AncientCistern_BeforeBossDoor,
    AncientCistern_BehindWaterfall,
    AncientCistern_BossKeyChestArea,
    AncientCistern_MainBasement,
    AncientCistern_MainHub,
    AncientCistern_MainRoomVines,
    AncientCistern_SpiderThread,
    AncientCistern_WhipChestRoom,
    AncientCisternBoss_Main,
    AncientCisternCandleRoom_Main,
    BatreauxHouse_Main,
    BeedlesShop_Main,
    Bazaar_Main,
    ParrowAndOriellesHouse_Main,
    PeatricesHouse_Main,
    PipersHouse_Main,
    Skyloft_CentralOutside,
    Skyloft_PastWaterfallCave,
    Skyloft_ToSkyKeep,
    Skyloft_WaterfallCaveCrystals,
    WaterfallCave_Main,
    WrynasHouse_Main,
    EarthTemple_AfterBallRolling,
    EarthTemple_BallRolling,
    EarthTemple_BossDoorArea,
    EarthTemple_Entrance,
    EarthTempleBoss_Main,
    EarthTempleSpring_Main,
    EldinSilentRealm_Trial,
    EldinVolcano_FirstRoom,
    EldinVolcano_HotCaveArea,
    EldinVolcano_NearThrillDigger,
    EldinVolcano_OutsideEt,
    EldinVolcano_PastMogmaTurf,
    EldinVolcano_PastSlide,
    EldinVolcano_PreMogmaTurf,
    EldinVolcano_SandSlide,
    EldinVolcano_VolcanoAscent,
    ThrillDiggerCave_Main,
    FaronSilentRealm_Trial,
    DeepWoods_Entry,
    DeepWoods_PastBeehive,
    FaronWoods_ClawshotTargetBranch,
    FaronWoods_Entry,
    FaronWoods_GreatTreePlatforms,
    FaronWoods_GreatTreeTop,
    FaronWoods_Main,
    GreatTree_Entry,
    GreatTree_Lower,
    GreatTree_Middle,
    GreatTree_PastPlatforms,
    GreatTree_Upper,
    FireSanctuaryA_Entry,
    FireSanctuaryA_InFrontOfBossDoor,
    FireSanctuaryA_PastFirstWaterPlant,
    FireSanctuaryA_PrePlatsArea,
    FireSanctuaryA_UpperStaircaseRoom,
    FireSanctuaryB_AfterDoubleMagmanosFight,
    FireSanctuaryB_FirstOutsideSection,
    FireSanctuaryB_LastTrappedMogmaArea,
    FireSanctuaryB_PastSecondRoomWithWaterFruit,
    FireSanctuaryB_UnderDoubleMagmanosFight,
    FireSanctuaryB_WaterFruitRoom,
    FireSanctuaryBoss_Main,
    FireSanctuaryFlameRoom_Main,
    InsideGoddessStatue_Main,
    KnightAcademy_AboveZeldasRoom,
    KnightAcademy_Main,
    Skyloft_OutsideGoddessStatue,
    SparringHall_Main,
    FaroresLair_Main,
    FloriaWaterfall_Main,
    LakeFloria_Entry,
    LakeFloria_StatueSpot,
    LakeFloria_ToFaroresLair,
    LanayruCaves_Main,
    LanayruCaves_ToSandSea,
    FireNode_End,
    FireNode_Main,
    LanayruDesert_HookBeetleArea,
    LanayruDesert_PastToT,
    LanayruDesert_SandOasis,
    LightningNode_Main,
    TempleOfTime_AfterLmf,
    TempleOfTime_End,
    TempleOfTime_NearCube,
    TempleOfTime_NearGossipStone,
    TempleOfTime_Start,
    LanayruMines_FirstHalf,
    LanayruMines_ToCaves,
    LanayruMines_ToDesert,
    LanayruMiningFacilityA_Entry,
    LanayruMiningFacilityA_FirstKeyLockedRoom,
    LanayruMiningFacilityA_FirstWestRoom,
    LanayruMiningFacilityA_GustBellowsRoom,
    LanayruMiningFacilityA_MapRoom,
    LanayruMiningFacilityA_SecondRoom,
    LanayruMiningFacilityB_AfterLmfBkRoom,
    LanayruMiningFacilityB_HubRoom,
    LanayruMiningFacilityB_InsideLmfBkRoom,
    LanayruMiningFacilityB_NearBossDoor,
    LanayruMiningFacilityB_NearFirstHubRoomChest,
    LanayruMiningFacilityB_WestHub,
    LanayruMiningFacilityBoss_Main,
    LanayruMiningFacilityToToT_BossDoor,
    LanayruMiningFacilityToToT_ToTExit,
    InsidePiratesStronghold_Main,
    OutsidePiratesStronghold_InsideSharkhead,
    OutsidePiratesStronghold_Main,
    SandSea_Main,
    SandSeaDocks_Main,
    SandSeaDocks_ToCaves,
    Shipyard_AfterMinecartRide,
    Shipyard_Main,
    ShipyardConstructionBay_Lower,
    ShipyardConstructionBay_Upper,
    SkippersRetreat_NextToShack,
    SkippersRetreat_PastDekuBaba,
    SkippersRetreat_PastMoblin,
    SkippersRetreat_Start,
    SkippersShack_Main,
    LanayruSilentRealm_Trial,
    MogmaTurf_Main,
    Sandship_Deck,
    Sandship_PastSpume,
    Sandship_SandshipBrig,
    SandshipBoss_Main,
    BehindTheTemple_Main,
    HyliasTemple_Main,
    SealedGroundsSpiral_Lower,
    SealedGroundsSpiral_Upper,
    SealedTemple_Main,
    InsideBambooIsland_Main,
    LumpyPumpkin_Main,
    Sky_BeedleIslandCage,
    Sky_BeedlesSkyHome,
    Sky_Field,
    Sky_OutsideLumpyPumpkin,
    SkyKeepEntry_Main,
    SkyloftSilentRealm_Trial,
    BertiesHouse_Main,
    GondosHouse_Main,
    MallarasHouse_Main,
    RupinsHouse_Main,
    Skyloft_OutsideSkyloftVillage,
    SparrotsHouse_Main,
    SkyviewBoss_Main,
    SkyviewSpring_Main,
    SkyviewTemple_BossDoorArea,
    SkyviewTemple_Entry,
    SkyviewTemple_FirstHub,
    SkyviewTemple_MainHub,
    InsideThunderhead_Main,
    IsleOfSongs_Main,
    InsideVolcanoSummit_Main,
    OutsideFireSanctuary_Middle,
    OutsideFireSanctuary_ToFireSanctuary,
    OutsideFireSanctuary_ToInsideSummit,
    VolcanoSummitWaterfall_Main,
}
pub struct AreaDef {
    pub name: &'static str,
    pub full_name: &'static str,
    pub region: Region,
    pub stage: Stage,
    pub time_of_day: Option<ForceToD>,
    pub can_sleep: bool,
    pub locations: &'static [Location],
    pub map_exits: &'static [Exit],
    pub map_entrances: &'static [Entrance],
    pub logic_exits: &'static [Area],
    pub logic_entrances: &'static [Area],
}
impl From<Area> for usize {
    fn from(val: Area) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Area {
    const ALL: &'static [Area] = &[
        Area::AncientCistern_AfterAcGutters,
        Area::AncientCistern_AfterWhipHooks,
        Area::AncientCistern_BeforeBokoKeyDoor,
        Area::AncientCistern_BeforeBossDoor,
        Area::AncientCistern_BehindWaterfall,
        Area::AncientCistern_BossKeyChestArea,
        Area::AncientCistern_MainBasement,
        Area::AncientCistern_MainHub,
        Area::AncientCistern_MainRoomVines,
        Area::AncientCistern_SpiderThread,
        Area::AncientCistern_WhipChestRoom,
        Area::AncientCisternBoss_Main,
        Area::AncientCisternCandleRoom_Main,
        Area::BatreauxHouse_Main,
        Area::BeedlesShop_Main,
        Area::Bazaar_Main,
        Area::ParrowAndOriellesHouse_Main,
        Area::PeatricesHouse_Main,
        Area::PipersHouse_Main,
        Area::Skyloft_CentralOutside,
        Area::Skyloft_PastWaterfallCave,
        Area::Skyloft_ToSkyKeep,
        Area::Skyloft_WaterfallCaveCrystals,
        Area::WaterfallCave_Main,
        Area::WrynasHouse_Main,
        Area::EarthTemple_AfterBallRolling,
        Area::EarthTemple_BallRolling,
        Area::EarthTemple_BossDoorArea,
        Area::EarthTemple_Entrance,
        Area::EarthTempleBoss_Main,
        Area::EarthTempleSpring_Main,
        Area::EldinSilentRealm_Trial,
        Area::EldinVolcano_FirstRoom,
        Area::EldinVolcano_HotCaveArea,
        Area::EldinVolcano_NearThrillDigger,
        Area::EldinVolcano_OutsideEt,
        Area::EldinVolcano_PastMogmaTurf,
        Area::EldinVolcano_PastSlide,
        Area::EldinVolcano_PreMogmaTurf,
        Area::EldinVolcano_SandSlide,
        Area::EldinVolcano_VolcanoAscent,
        Area::ThrillDiggerCave_Main,
        Area::FaronSilentRealm_Trial,
        Area::DeepWoods_Entry,
        Area::DeepWoods_PastBeehive,
        Area::FaronWoods_ClawshotTargetBranch,
        Area::FaronWoods_Entry,
        Area::FaronWoods_GreatTreePlatforms,
        Area::FaronWoods_GreatTreeTop,
        Area::FaronWoods_Main,
        Area::GreatTree_Entry,
        Area::GreatTree_Lower,
        Area::GreatTree_Middle,
        Area::GreatTree_PastPlatforms,
        Area::GreatTree_Upper,
        Area::FireSanctuaryA_Entry,
        Area::FireSanctuaryA_InFrontOfBossDoor,
        Area::FireSanctuaryA_PastFirstWaterPlant,
        Area::FireSanctuaryA_PrePlatsArea,
        Area::FireSanctuaryA_UpperStaircaseRoom,
        Area::FireSanctuaryB_AfterDoubleMagmanosFight,
        Area::FireSanctuaryB_FirstOutsideSection,
        Area::FireSanctuaryB_LastTrappedMogmaArea,
        Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
        Area::FireSanctuaryB_UnderDoubleMagmanosFight,
        Area::FireSanctuaryB_WaterFruitRoom,
        Area::FireSanctuaryBoss_Main,
        Area::FireSanctuaryFlameRoom_Main,
        Area::InsideGoddessStatue_Main,
        Area::KnightAcademy_AboveZeldasRoom,
        Area::KnightAcademy_Main,
        Area::Skyloft_OutsideGoddessStatue,
        Area::SparringHall_Main,
        Area::FaroresLair_Main,
        Area::FloriaWaterfall_Main,
        Area::LakeFloria_Entry,
        Area::LakeFloria_StatueSpot,
        Area::LakeFloria_ToFaroresLair,
        Area::LanayruCaves_Main,
        Area::LanayruCaves_ToSandSea,
        Area::FireNode_End,
        Area::FireNode_Main,
        Area::LanayruDesert_HookBeetleArea,
        Area::LanayruDesert_PastToT,
        Area::LanayruDesert_SandOasis,
        Area::LightningNode_Main,
        Area::TempleOfTime_AfterLmf,
        Area::TempleOfTime_End,
        Area::TempleOfTime_NearCube,
        Area::TempleOfTime_NearGossipStone,
        Area::TempleOfTime_Start,
        Area::LanayruMines_FirstHalf,
        Area::LanayruMines_ToCaves,
        Area::LanayruMines_ToDesert,
        Area::LanayruMiningFacilityA_Entry,
        Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
        Area::LanayruMiningFacilityA_FirstWestRoom,
        Area::LanayruMiningFacilityA_GustBellowsRoom,
        Area::LanayruMiningFacilityA_MapRoom,
        Area::LanayruMiningFacilityA_SecondRoom,
        Area::LanayruMiningFacilityB_AfterLmfBkRoom,
        Area::LanayruMiningFacilityB_HubRoom,
        Area::LanayruMiningFacilityB_InsideLmfBkRoom,
        Area::LanayruMiningFacilityB_NearBossDoor,
        Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
        Area::LanayruMiningFacilityB_WestHub,
        Area::LanayruMiningFacilityBoss_Main,
        Area::LanayruMiningFacilityToToT_BossDoor,
        Area::LanayruMiningFacilityToToT_ToTExit,
        Area::InsidePiratesStronghold_Main,
        Area::OutsidePiratesStronghold_InsideSharkhead,
        Area::OutsidePiratesStronghold_Main,
        Area::SandSea_Main,
        Area::SandSeaDocks_Main,
        Area::SandSeaDocks_ToCaves,
        Area::Shipyard_AfterMinecartRide,
        Area::Shipyard_Main,
        Area::ShipyardConstructionBay_Lower,
        Area::ShipyardConstructionBay_Upper,
        Area::SkippersRetreat_NextToShack,
        Area::SkippersRetreat_PastDekuBaba,
        Area::SkippersRetreat_PastMoblin,
        Area::SkippersRetreat_Start,
        Area::SkippersShack_Main,
        Area::LanayruSilentRealm_Trial,
        Area::MogmaTurf_Main,
        Area::Sandship_Deck,
        Area::Sandship_PastSpume,
        Area::Sandship_SandshipBrig,
        Area::SandshipBoss_Main,
        Area::BehindTheTemple_Main,
        Area::HyliasTemple_Main,
        Area::SealedGroundsSpiral_Lower,
        Area::SealedGroundsSpiral_Upper,
        Area::SealedTemple_Main,
        Area::InsideBambooIsland_Main,
        Area::LumpyPumpkin_Main,
        Area::Sky_BeedleIslandCage,
        Area::Sky_BeedlesSkyHome,
        Area::Sky_Field,
        Area::Sky_OutsideLumpyPumpkin,
        Area::SkyKeepEntry_Main,
        Area::SkyloftSilentRealm_Trial,
        Area::BertiesHouse_Main,
        Area::GondosHouse_Main,
        Area::MallarasHouse_Main,
        Area::RupinsHouse_Main,
        Area::Skyloft_OutsideSkyloftVillage,
        Area::SparrotsHouse_Main,
        Area::SkyviewBoss_Main,
        Area::SkyviewSpring_Main,
        Area::SkyviewTemple_BossDoorArea,
        Area::SkyviewTemple_Entry,
        Area::SkyviewTemple_FirstHub,
        Area::SkyviewTemple_MainHub,
        Area::InsideThunderhead_Main,
        Area::IsleOfSongs_Main,
        Area::InsideVolcanoSummit_Main,
        Area::OutsideFireSanctuary_Middle,
        Area::OutsideFireSanctuary_ToFireSanctuary,
        Area::OutsideFireSanctuary_ToInsideSummit,
        Area::VolcanoSummitWaterfall_Main,
    ];
}
impl Area {
    pub fn get(&self) -> &'static AreaDef {
        match self {
            Area::AncientCistern_AfterAcGutters => &AreaDef {
                name: "After AC Gutters",
                full_name: "Ancient Cistern - After AC Gutters",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[
                    Area::AncientCistern_AfterWhipHooks,
                    Area::AncientCistern_MainRoomVines,
                ],
                logic_entrances: &[Area::AncientCistern_BeforeBokoKeyDoor],
            },
            Area::AncientCistern_AfterWhipHooks => &AreaDef {
                name: "After Whip Hooks",
                full_name: "Ancient Cistern - After Whip Hooks",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternChestAfterWhipHooks],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::AncientCistern_MainRoomVines],
                logic_entrances: &[
                    Area::AncientCistern_AfterAcGutters,
                    Area::AncientCistern_MainHub,
                    Area::AncientCistern_MainRoomVines,
                ],
            },
            Area::AncientCistern_BeforeBokoKeyDoor => &AreaDef {
                name: "Before Boko Key Door",
                full_name: "Ancient Cistern - Before Boko Key Door",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternBokoblin],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::AncientCistern_AfterAcGutters],
                logic_entrances: &[Area::AncientCistern_BehindWaterfall],
            },
            Area::AncientCistern_BeforeBossDoor => &AreaDef {
                name: "Before Boss Door",
                full_name: "Ancient Cistern - Before Boss Door",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::AncientCistern_To_AncientCisternBoss],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[
                    Area::AncientCistern_MainBasement,
                    Area::AncientCistern_MainHub,
                ],
            },
            Area::AncientCistern_BehindWaterfall => &AreaDef {
                name: "Behind Waterfall",
                full_name: "Ancient Cistern - Behind Waterfall",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternChestBehindTheWaterfall],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::AncientCistern_BeforeBokoKeyDoor],
                logic_entrances: &[Area::AncientCistern_MainHub],
            },
            Area::AncientCistern_BossKeyChestArea => &AreaDef {
                name: "Boss Key Chest Area",
                full_name: "Ancient Cistern - Boss Key Chest Area",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternBossKeyChest],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[
                    Area::AncientCistern_MainBasement,
                    Area::AncientCistern_SpiderThread,
                ],
            },
            Area::AncientCistern_MainBasement => &AreaDef {
                name: "Main Basement",
                full_name: "Ancient Cistern - Main Basement",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[
                    Area::AncientCistern_BeforeBossDoor,
                    Area::AncientCistern_BossKeyChestArea,
                    Area::AncientCistern_SpiderThread,
                ],
                logic_entrances: &[
                    Area::AncientCistern_MainHub,
                    Area::AncientCistern_SpiderThread,
                ],
            },
            Area::AncientCistern_MainHub => &AreaDef {
                name: "Main Hub",
                full_name: "Ancient Cistern - Main Hub",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternChestInEastPart],
                map_exits: &[Exit::AncientCistern_To_FloriaWaterfall],
                map_entrances: &[Entrance::AncientCistern_From_FloriaWaterfall],
                logic_exits: &[
                    Area::AncientCistern_AfterWhipHooks,
                    Area::AncientCistern_BeforeBossDoor,
                    Area::AncientCistern_BehindWaterfall,
                    Area::AncientCistern_MainBasement,
                    Area::AncientCistern_SpiderThread,
                    Area::AncientCistern_WhipChestRoom,
                ],
                logic_entrances: &[],
            },
            Area::AncientCistern_MainRoomVines => &AreaDef {
                name: "Main Room Vines",
                full_name: "Ancient Cistern - Main Room Vines",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternChestNearVines],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::AncientCistern_AfterWhipHooks],
                logic_entrances: &[
                    Area::AncientCistern_AfterAcGutters,
                    Area::AncientCistern_AfterWhipHooks,
                ],
            },
            Area::AncientCistern_SpiderThread => &AreaDef {
                name: "Spider Thread",
                full_name: "Ancient Cistern - Spider Thread",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[
                    Area::AncientCistern_BossKeyChestArea,
                    Area::AncientCistern_MainBasement,
                ],
                logic_entrances: &[
                    Area::AncientCistern_MainBasement,
                    Area::AncientCistern_MainHub,
                ],
            },
            Area::AncientCistern_WhipChestRoom => &AreaDef {
                name: "Whip Chest Room",
                full_name: "Ancient Cistern - Whip Chest Room",
                region: Region::AncientCistern,
                stage: Stage::AncientCistern,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternWhip],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::AncientCistern_MainHub],
            },
            Area::AncientCisternBoss_Main => &AreaDef {
                name: "Main",
                full_name: "Ancient Cistern Boss - Main",
                region: Region::AncientCistern,
                stage: Stage::AncientCisternBoss,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternKoloktosHeartContainer],
                map_exits: &[Exit::AncientCisternBoss_To_AncientCisternCandleRoom],
                map_entrances: &[Entrance::AncientCisternBoss_From_AncientCistern],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::AncientCisternCandleRoom_Main => &AreaDef {
                name: "Main",
                full_name: "Ancient Cistern Candle Room - Main",
                region: Region::AncientCistern,
                stage: Stage::AncientCisternCandleRoom,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::AncientCisternFaroresFlame],
                map_exits: &[],
                map_entrances: &[Entrance::AncientCisternCandleRoom_From_AncientCisternBoss],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::BatreauxHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Batreaux' House - Main",
                region: Region::Batreaux,
                stage: Stage::BatreauxHouse,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::Batreaux10Crystals,
                    Location::Batreaux30Crystals,
                    Location::Batreaux30CrystalsChest,
                    Location::Batreaux40Crystals,
                    Location::Batreaux5Crystals,
                    Location::Batreaux50Crystals,
                    Location::Batreaux70Crystals,
                    Location::Batreaux70CrystalsSecondReward,
                    Location::Batreaux80Crystals,
                ],
                map_exits: &[Exit::BatreauxHouse_To_Skyloft],
                map_entrances: &[Entrance::BatreauxHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::BeedlesShop_Main => &AreaDef {
                name: "Main",
                full_name: "Beedle's Shop - Main",
                region: Region::Beedle,
                stage: Stage::BeedlesShop,
                time_of_day: None,
                can_sleep: true,
                locations: &[
                    Location::Beedle1000RupeeItem,
                    Location::Beedle1200RupeeItem,
                    Location::Beedle1600RupeeItem,
                    Location::Beedle300RupeeItem,
                    Location::Beedle50RupeeItem,
                    Location::Beedle600RupeeItem,
                    Location::Beedle800RupeeItem,
                    Location::BeedleFirst100RupeeItem,
                    Location::BeedleSecond100RupeeItem,
                    Location::BeedleThird100RupeeItem,
                ],
                map_exits: &[
                    Exit::BeedlesShop_To_Sky_Night,
                    Exit::BeedlesShop_To_Skyloft_Day,
                ],
                map_entrances: &[
                    Entrance::BeedlesShop_From_Skyloft_Day,
                    Entrance::BeedlesShop_From_Sky_Night,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::Bazaar_Main => &AreaDef {
                name: "Main",
                full_name: "Bazaar - Main",
                region: Region::CentralSkyloft,
                stage: Stage::Bazaar,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::CentralSkyloftBazaarGoddessChest,
                    Location::CentralSkyloftPotionLadysGift,
                ],
                map_exits: &[
                    Exit::Bazaar_To_Skyloft_North,
                    Exit::Bazaar_To_Skyloft_South,
                    Exit::Bazaar_To_Skyloft_West,
                ],
                map_entrances: &[
                    Entrance::Bazaar_From_Skyloft_North,
                    Entrance::Bazaar_From_Skyloft_South,
                    Entrance::Bazaar_From_Skyloft_West,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::ParrowAndOriellesHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Parrow and Orielle's House - Main",
                region: Region::CentralSkyloft,
                stage: Stage::ParrowAndOriellesHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[Location::CentralSkyloftCrystalInOrielleAndParrowsHouse],
                map_exits: &[Exit::ParrowAndOriellesHouse_To_Skyloft],
                map_entrances: &[Entrance::ParrowAndOriellesHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::PeatricesHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Peatrice's House - Main",
                region: Region::CentralSkyloft,
                stage: Stage::PeatricesHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[Location::CentralSkyloftPeaterPeatricesCrystals],
                map_exits: &[Exit::PeatricesHouse_To_Skyloft],
                map_entrances: &[Entrance::PeatricesHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::PipersHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Piper's House - Main",
                region: Region::CentralSkyloft,
                stage: Stage::PipersHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[],
                map_exits: &[Exit::PipersHouse_To_Skyloft],
                map_entrances: &[Entrance::PipersHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::Skyloft_CentralOutside => &AreaDef {
                name: "Central Outside",
                full_name: "Skyloft - Central Outside",
                region: Region::CentralSkyloft,
                stage: Stage::Skyloft,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::CentralSkyloftCrystalBetweenWoodenPlanks,
                    Location::CentralSkyloftCrystalOnLightTower,
                    Location::CentralSkyloftCrystalOnWaterfallIsland,
                    Location::CentralSkyloftCrystalOnWestCliff,
                    Location::CentralSkyloftFloatingIslandGoddessChest,
                    Location::CentralSkyloftFloatingIslandGossipStone,
                    Location::CentralSkyloftItemInBirdNest,
                    Location::CentralSkyloftParrowsCrystals,
                    Location::CentralSkyloftParrowsGift,
                    Location::CentralSkyloftShedChest,
                    Location::CentralSkyloftShedGoddessChest,
                    Location::CentralSkyloftWaterfallGoddessChest,
                    Location::CentralSkyloftWestCliffGoddessChest,
                ],
                map_exits: &[
                    Exit::Skyloft_To_Bazaar_North,
                    Exit::Skyloft_To_Bazaar_South,
                    Exit::Skyloft_To_Bazaar_West,
                    Exit::Skyloft_To_BeedlesShop_Day,
                    Exit::Skyloft_To_ParrowAndOriellesHouse,
                    Exit::Skyloft_To_PeatricesHouse,
                    Exit::Skyloft_To_PipersHouse,
                    Exit::Skyloft_To_Sky,
                    Exit::Skyloft_To_SkyloftSilentRealm,
                    Exit::Skyloft_To_WaterfallCave_Upper,
                    Exit::Skyloft_To_WrynasHouse,
                ],
                map_entrances: &[
                    Entrance::Skyloft_From_BatreauxHouse,
                    Entrance::Skyloft_From_BeedlesShop_Day,
                    Entrance::Skyloft_From_Bazaar_North,
                    Entrance::Skyloft_From_Bazaar_South,
                    Entrance::Skyloft_From_Bazaar_West,
                    Entrance::Skyloft_From_ParrowAndOriellesHouse,
                    Entrance::Skyloft_From_PeatricesHouse,
                    Entrance::Skyloft_From_PipersHouse,
                    Entrance::Skyloft_From_WaterfallCave_Upper,
                    Entrance::Skyloft_From_WrynasHouse,
                    Entrance::Skyloft_From_Sky,
                    Entrance::Skyloft_From_SkyloftSilentRealm,
                    Entrance::Skyloft_From_BertiesHouse,
                    Entrance::Skyloft_From_GondosHouse,
                    Entrance::Skyloft_From_MallarasHouse,
                    Entrance::Skyloft_From_RupinsHouse,
                    Entrance::Skyloft_From_SparrotsHouse,
                ],
                logic_exits: &[
                    Area::Skyloft_OutsideGoddessStatue,
                    Area::Skyloft_OutsideSkyloftVillage,
                    Area::Skyloft_ToSkyKeep,
                    Area::Skyloft_WaterfallCaveCrystals,
                ],
                logic_entrances: &[
                    Area::Skyloft_ToSkyKeep,
                    Area::Skyloft_OutsideGoddessStatue,
                    Area::Skyloft_OutsideSkyloftVillage,
                ],
            },
            Area::Skyloft_PastWaterfallCave => &AreaDef {
                name: "Past Waterfall Cave",
                full_name: "Skyloft - Past Waterfall Cave",
                region: Region::CentralSkyloft,
                stage: Stage::Skyloft,
                time_of_day: None,
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::Skyloft_To_Sky_PastWaterfallCave,
                    Exit::Skyloft_To_WaterfallCave_Lower,
                ],
                map_entrances: &[Entrance::Skyloft_From_WaterfallCave_Lower],
                logic_exits: &[Area::Skyloft_WaterfallCaveCrystals],
                logic_entrances: &[Area::Skyloft_OutsideSkyloftVillage],
            },
            Area::Skyloft_ToSkyKeep => &AreaDef {
                name: "To Sky Keep",
                full_name: "Skyloft - To Sky Keep",
                region: Region::CentralSkyloft,
                stage: Stage::Skyloft,
                time_of_day: None,
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::Skyloft_To_SkyKeepEntry],
                map_entrances: &[Entrance::Skyloft_From_SkyKeepEntry],
                logic_exits: &[Area::Skyloft_CentralOutside],
                logic_entrances: &[Area::Skyloft_CentralOutside],
            },
            Area::Skyloft_WaterfallCaveCrystals => &AreaDef {
                name: "Waterfall Cave Crystals",
                full_name: "Skyloft - Waterfall Cave Crystals",
                region: Region::CentralSkyloft,
                stage: Stage::Skyloft,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::CentralSkyloftCrystalAfterWaterfallCave,
                    Location::CentralSkyloftCrystalInLoftwingPrison,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[
                    Area::Skyloft_CentralOutside,
                    Area::Skyloft_PastWaterfallCave,
                ],
            },
            Area::WaterfallCave_Main => &AreaDef {
                name: "Main",
                full_name: "Waterfall Cave - Main",
                region: Region::CentralSkyloft,
                stage: Stage::WaterfallCave,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::CentralSkyloftWaterfallCaveFirstChest,
                    Location::CentralSkyloftWaterfallCaveSecondChest,
                ],
                map_exits: &[
                    Exit::WaterfallCave_To_Skyloft_Upper,
                    Exit::WaterfallCave_To_Skyloft_Lower,
                ],
                map_entrances: &[
                    Entrance::WaterfallCave_From_Skyloft_Upper,
                    Entrance::WaterfallCave_From_Skyloft_Lower,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::WrynasHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Wryna's House - Main",
                region: Region::CentralSkyloft,
                stage: Stage::WrynasHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[Location::CentralSkyloftWrynasCrystals],
                map_exits: &[Exit::WrynasHouse_To_Skyloft],
                map_entrances: &[Entrance::WrynasHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::EarthTemple_AfterBallRolling => &AreaDef {
                name: "After Ball Rolling",
                full_name: "Earth Temple - After Ball Rolling",
                region: Region::EarthTemple,
                stage: Stage::EarthTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EarthTempleChestGuardedByLizalfos],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::EarthTemple_BossDoorArea],
                logic_entrances: &[Area::EarthTemple_BallRolling],
            },
            Area::EarthTemple_BallRolling => &AreaDef {
                name: "Ball Rolling",
                full_name: "Earth Temple - Ball Rolling",
                region: Region::EarthTemple,
                stage: Stage::EarthTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::EarthTempleBombBag,
                    Location::EarthTempleChestLeftOfMainRoomBridge,
                    Location::EarthTempleChestBehindBombableRock,
                    Location::EarthTempleChestInWestRoom,
                    Location::EarthTempleLeddsGift,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::EarthTemple_AfterBallRolling],
                logic_entrances: &[Area::EarthTemple_Entrance],
            },
            Area::EarthTemple_BossDoorArea => &AreaDef {
                name: "Boss Door Area",
                full_name: "Earth Temple - Boss Door Area",
                region: Region::EarthTemple,
                stage: Stage::EarthTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EarthTempleBossKeyChest],
                map_exits: &[Exit::EarthTemple_To_EarthTempleBoss],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::EarthTemple_AfterBallRolling],
            },
            Area::EarthTemple_Entrance => &AreaDef {
                name: "Entrance",
                full_name: "Earth Temple - Entrance",
                region: Region::EarthTemple,
                stage: Stage::EarthTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EarthTempleVentChest],
                map_exits: &[Exit::EarthTemple_To_EldinVolcano],
                map_entrances: &[Entrance::EarthTemple_From_EldinVolcano],
                logic_exits: &[Area::EarthTemple_BallRolling],
                logic_entrances: &[],
            },
            Area::EarthTempleBoss_Main => &AreaDef {
                name: "Main",
                full_name: "Earth Temple Boss - Main",
                region: Region::EarthTemple,
                stage: Stage::EarthTempleBoss,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EarthTempleScalderaHeartContainer],
                map_exits: &[Exit::EarthTempleBoss_To_EarthTempleSpring],
                map_entrances: &[Entrance::EarthTempleBoss_From_EarthTemple],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::EarthTempleSpring_Main => &AreaDef {
                name: "Main",
                full_name: "Earth Temple Spring - Main",
                region: Region::EarthTemple,
                stage: Stage::EarthTempleSpring,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EarthTempleAmberTablet],
                map_exits: &[Exit::EarthTempleSpring_To_EldinVolcano],
                map_entrances: &[Entrance::EarthTempleSpring_From_EarthTempleBoss],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::EldinSilentRealm_Trial => &AreaDef {
                name: "Trial",
                full_name: "Eldin Silent Realm - Trial",
                region: Region::EldinSilentRealm,
                stage: Stage::EldinSilentRealm,
                time_of_day: None,
                can_sleep: false,
                locations: &[Location::EldinSilentRealmFireshieldEarrings],
                map_exits: &[Exit::EldinSilentRealm_To_EldinVolcano],
                map_entrances: &[Entrance::EldinSilentRealm_From_EldinVolcano],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::EldinVolcano_FirstRoom => &AreaDef {
                name: "First Room",
                full_name: "Eldin Volcano - First Room",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EldinVolcanoChestBehindBombableWallInFirstRoom],
                map_exits: &[Exit::EldinVolcano_To_Sky_EldinEntranceStatue],
                map_entrances: &[Entrance::EldinVolcano_From_Sky_EldinEntranceStatue],
                logic_exits: &[
                    Area::EldinVolcano_PreMogmaTurf,
                    Area::EldinVolcano_VolcanoAscent,
                ],
                logic_entrances: &[
                    Area::EldinVolcano_PreMogmaTurf,
                    Area::EldinVolcano_VolcanoAscent,
                ],
            },
            Area::EldinVolcano_HotCaveArea => &AreaDef {
                name: "Hot Cave Area",
                full_name: "Eldin Volcano - Hot Cave Area",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::EldinVolcano_To_InsideVolcanoSummit],
                map_entrances: &[Entrance::EldinVolcano_From_InsideVolcanoSummit],
                logic_exits: &[Area::EldinVolcano_SandSlide],
                logic_entrances: &[Area::EldinVolcano_OutsideEt, Area::EldinVolcano_PastSlide],
            },
            Area::EldinVolcano_NearThrillDigger => &AreaDef {
                name: "Near Thrill Digger",
                full_name: "Eldin Volcano - Near Thrill Digger",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::EldinVolcano_To_ThrillDiggerCave],
                map_entrances: &[Entrance::EldinVolcano_From_ThrillDiggerCave],
                logic_exits: &[
                    Area::EldinVolcano_OutsideEt,
                    Area::EldinVolcano_VolcanoAscent,
                ],
                logic_entrances: &[Area::EldinVolcano_VolcanoAscent],
            },
            Area::EldinVolcano_OutsideEt => &AreaDef {
                name: "Outside ET",
                full_name: "Eldin Volcano - Outside ET",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::EldinVolcanoDiggingSpotBehindBoulderOnSandySlope,
                    Location::EldinVolcanoDiggingSpotBelowTower,
                    Location::EldinVolcanoDiggingSpotInFrontOfEarthTemple,
                    Location::EldinVolcanoGossipStoneNextToEarthTemple,
                ],
                map_exits: &[
                    Exit::EldinVolcano_To_EarthTemple,
                    Exit::EldinVolcano_To_Sky_TempleEntranceStatue,
                ],
                map_entrances: &[
                    Entrance::EldinVolcano_From_EarthTemple,
                    Entrance::EldinVolcano_From_EarthTempleSpring,
                    Entrance::EldinVolcano_From_Sky_TempleEntranceStatue,
                ],
                logic_exits: &[Area::EldinVolcano_HotCaveArea],
                logic_entrances: &[Area::EldinVolcano_NearThrillDigger],
            },
            Area::EldinVolcano_PastMogmaTurf => &AreaDef {
                name: "Past Mogma Turf",
                full_name: "Eldin Volcano - Past Mogma Turf",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[Entrance::EldinVolcano_From_MogmaTurf_EndVent],
                logic_exits: &[
                    Area::EldinVolcano_PreMogmaTurf,
                    Area::EldinVolcano_VolcanoAscent,
                ],
                logic_entrances: &[Area::EldinVolcano_PreMogmaTurf],
            },
            Area::EldinVolcano_PastSlide => &AreaDef {
                name: "Past Slide",
                full_name: "Eldin Volcano - Past Slide",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EldinVolcanoDiggingSpotAfterDrainingLava],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[
                    Area::EldinVolcano_HotCaveArea,
                    Area::EldinVolcano_VolcanoAscent,
                ],
                logic_entrances: &[
                    Area::EldinVolcano_SandSlide,
                    Area::EldinVolcano_VolcanoAscent,
                ],
            },
            Area::EldinVolcano_PreMogmaTurf => &AreaDef {
                name: "Pre Mogma Turf",
                full_name: "Eldin Volcano - Pre Mogma Turf",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::EldinVolcanoChestAfterCrawlspace,
                    Location::EldinVolcanoChestBehindBombableWallNearCliff,
                    Location::EldinVolcanoItemOnCliff,
                ],
                map_exits: &[
                    Exit::EldinVolcano_To_MogmaTurf_Skydive,
                    Exit::EldinVolcano_To_Sky_VolcanoEastStatue,
                ],
                map_entrances: &[
                    Entrance::EldinVolcano_From_MogmaTurf_StartVent,
                    Entrance::EldinVolcano_From_Sky_VolcanoEastStatue,
                ],
                logic_exits: &[
                    Area::EldinVolcano_FirstRoom,
                    Area::EldinVolcano_PastMogmaTurf,
                ],
                logic_entrances: &[
                    Area::EldinVolcano_FirstRoom,
                    Area::EldinVolcano_PastMogmaTurf,
                ],
            },
            Area::EldinVolcano_SandSlide => &AreaDef {
                name: "Sand Slide",
                full_name: "Eldin Volcano - Sand Slide",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EldinVolcanoDiggingSpotAfterVents],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::EldinVolcano_PastSlide],
                logic_entrances: &[Area::EldinVolcano_HotCaveArea],
            },
            Area::EldinVolcano_VolcanoAscent => &AreaDef {
                name: "Volcano Ascent",
                full_name: "Eldin Volcano - Volcano Ascent",
                region: Region::EldinVolcano,
                stage: Stage::EldinVolcano,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EldinVolcanoChestBehindBombableWallNearVolcanoAscent],
                map_exits: &[
                    Exit::EldinVolcano_To_EldinSilentRealm,
                    Exit::EldinVolcano_To_Sky_VolcanoAscentStatue,
                ],
                map_entrances: &[
                    Entrance::EldinVolcano_From_EldinSilentRealm,
                    Entrance::EldinVolcano_From_Sky_VolcanoAscentStatue,
                ],
                logic_exits: &[
                    Area::EldinVolcano_FirstRoom,
                    Area::EldinVolcano_NearThrillDigger,
                    Area::EldinVolcano_PastSlide,
                ],
                logic_entrances: &[
                    Area::EldinVolcano_FirstRoom,
                    Area::EldinVolcano_NearThrillDigger,
                    Area::EldinVolcano_PastMogmaTurf,
                    Area::EldinVolcano_PastSlide,
                ],
            },
            Area::ThrillDiggerCave_Main => &AreaDef {
                name: "Main",
                full_name: "Thrill Digger Cave - Main",
                region: Region::EldinVolcano,
                stage: Stage::ThrillDiggerCave,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::EldinVolcanoGossipStoneInThrillDiggerCave],
                map_exits: &[Exit::ThrillDiggerCave_To_EldinVolcano],
                map_entrances: &[Entrance::ThrillDiggerCave_From_EldinVolcano],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::FaronSilentRealm_Trial => &AreaDef {
                name: "Trial",
                full_name: "Faron Silent Realm - Trial",
                region: Region::FaronSilentRealm,
                stage: Stage::FaronSilentRealm,
                time_of_day: None,
                can_sleep: false,
                locations: &[Location::FaronSilentRealmWaterScale],
                map_exits: &[Exit::FaronSilentRealm_To_FaronWoods],
                map_entrances: &[Entrance::FaronSilentRealm_From_FaronWoods],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::DeepWoods_Entry => &AreaDef {
                name: "Entry",
                full_name: "Deep Woods - Entry",
                region: Region::FaronWoods,
                stage: Stage::DeepWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::DeepWoods_To_FaronWoods],
                map_entrances: &[Entrance::DeepWoods_From_FaronWoods],
                logic_exits: &[Area::DeepWoods_PastBeehive],
                logic_entrances: &[Area::DeepWoods_PastBeehive],
            },
            Area::DeepWoods_PastBeehive => &AreaDef {
                name: "Past Beehive",
                full_name: "Deep Woods - Past Beehive",
                region: Region::FaronWoods,
                stage: Stage::DeepWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FaronWoodsDeepWoodsChest],
                map_exits: &[
                    Exit::DeepWoods_To_Sky_DeepWoodsStatue,
                    Exit::DeepWoods_To_Sky_ForestTempleStatue,
                    Exit::DeepWoods_To_SkyviewTemple,
                ],
                map_entrances: &[
                    Entrance::DeepWoods_From_Sky_DeepWoodsStatue,
                    Entrance::DeepWoods_From_Sky_ForestTempleStatue,
                    Entrance::DeepWoods_From_SkyviewSpring,
                    Entrance::DeepWoods_From_SkyviewTemple,
                ],
                logic_exits: &[Area::DeepWoods_Entry],
                logic_entrances: &[Area::DeepWoods_Entry],
            },
            Area::FaronWoods_ClawshotTargetBranch => &AreaDef {
                name: "Clawshot Target Branch",
                full_name: "Faron Woods - Clawshot Target Branch",
                region: Region::FaronWoods,
                stage: Stage::FaronWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::FaronWoods_GreatTreeTop, Area::FaronWoods_Main],
            },
            Area::FaronWoods_Entry => &AreaDef {
                name: "Entry",
                full_name: "Faron Woods - Entry",
                region: Region::FaronWoods,
                stage: Stage::FaronWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::FaronWoods_To_BehindTheTemple,
                    Exit::FaronWoods_To_Sky_FaronWoodsEntryStatue,
                ],
                map_entrances: &[
                    Entrance::FaronWoods_From_BehindTheTemple,
                    Entrance::FaronWoods_From_Sky_FaronWoodsEntryStatue,
                ],
                logic_exits: &[Area::FaronWoods_Main],
                logic_entrances: &[Area::FaronWoods_Main],
            },
            Area::FaronWoods_GreatTreePlatforms => &AreaDef {
                name: "Great Tree Platforms",
                full_name: "Faron Woods - Great Tree Platforms",
                region: Region::FaronWoods,
                stage: Stage::FaronWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::FaronWoods_To_GreatTree_LowerPlatform,
                    Exit::FaronWoods_To_GreatTree_UpperPlatform,
                ],
                map_entrances: &[
                    Entrance::FaronWoods_From_GreatTree_LowerPlatform,
                    Entrance::FaronWoods_From_GreatTree_UpperPlatform,
                ],
                logic_exits: &[],
                logic_entrances: &[Area::FaronWoods_GreatTreeTop, Area::FaronWoods_Main],
            },
            Area::FaronWoods_GreatTreeTop => &AreaDef {
                name: "Great Tree Top",
                full_name: "Faron Woods - Great Tree Top",
                region: Region::FaronWoods,
                stage: Stage::FaronWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::FaronWoods_To_GreatTree_Top,
                    Exit::FaronWoods_To_Sky_GreatTreeStatue,
                ],
                map_entrances: &[
                    Entrance::FaronWoods_From_GreatTree_Top,
                    Entrance::FaronWoods_From_Sky_GreatTreeStatue,
                ],
                logic_exits: &[
                    Area::FaronWoods_ClawshotTargetBranch,
                    Area::FaronWoods_GreatTreePlatforms,
                ],
                logic_entrances: &[],
            },
            Area::FaronWoods_Main => &AreaDef {
                name: "Main",
                full_name: "Faron Woods - Main",
                region: Region::FaronWoods,
                stage: Stage::FaronWoods,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::FaronWoodsChestBehindBombableRocksNearErla,
                    Location::FaronWoodsItemBehindBombableRock,
                    Location::FaronWoodsItemOnTree,
                    Location::FaronWoodsSlingshot,
                ],
                map_exits: &[
                    Exit::FaronWoods_To_DeepWoods,
                    Exit::FaronWoods_To_FaronSilentRealm,
                    Exit::FaronWoods_To_GreatTree_Tunnel,
                    Exit::FaronWoods_To_LakeFloria,
                    Exit::FaronWoods_To_Sky_InTheWoodsStatue,
                    Exit::FaronWoods_To_Sky_ViewingPlatformStatue,
                ],
                map_entrances: &[
                    Entrance::FaronWoods_From_FaronSilentRealm,
                    Entrance::FaronWoods_From_DeepWoods,
                    Entrance::FaronWoods_From_GreatTree_Tunnel,
                    Entrance::FaronWoods_From_FloriaWaterfall,
                    Entrance::FaronWoods_From_Sky_InTheWoodsStatue,
                    Entrance::FaronWoods_From_Sky_ViewingPlatformStatue,
                ],
                logic_exits: &[
                    Area::FaronWoods_ClawshotTargetBranch,
                    Area::FaronWoods_Entry,
                    Area::FaronWoods_GreatTreePlatforms,
                ],
                logic_entrances: &[Area::FaronWoods_Entry],
            },
            Area::GreatTree_Entry => &AreaDef {
                name: "Entry",
                full_name: "Great Tree - Entry",
                region: Region::FaronWoods,
                stage: Stage::GreatTree,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::GreatTree_To_FaronWoods_Tunnel],
                map_entrances: &[Entrance::GreatTree_From_FaronWoods_Tunnel],
                logic_exits: &[Area::GreatTree_Lower],
                logic_entrances: &[Area::GreatTree_Lower],
            },
            Area::GreatTree_Lower => &AreaDef {
                name: "Lower",
                full_name: "Great Tree - Lower",
                region: Region::FaronWoods,
                stage: Stage::GreatTree,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[Entrance::GreatTree_From_FaronWoods_LowerPlatform],
                logic_exits: &[
                    Area::GreatTree_Entry,
                    Area::GreatTree_Middle,
                    Area::GreatTree_PastPlatforms,
                ],
                logic_entrances: &[
                    Area::GreatTree_Entry,
                    Area::GreatTree_Middle,
                    Area::GreatTree_PastPlatforms,
                ],
            },
            Area::GreatTree_Middle => &AreaDef {
                name: "Middle",
                full_name: "Great Tree - Middle",
                region: Region::FaronWoods,
                stage: Stage::GreatTree,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FaronWoodsChestInsideGreatTree],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::GreatTree_Lower, Area::GreatTree_PastPlatforms],
                logic_entrances: &[Area::GreatTree_Lower, Area::GreatTree_Upper],
            },
            Area::GreatTree_PastPlatforms => &AreaDef {
                name: "Past Platforms",
                full_name: "Great Tree - Past Platforms",
                region: Region::FaronWoods,
                stage: Stage::GreatTree,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::GreatTree_To_FaronWoods_LowerPlatform],
                map_entrances: &[],
                logic_exits: &[Area::GreatTree_Lower],
                logic_entrances: &[Area::GreatTree_Lower, Area::GreatTree_Middle],
            },
            Area::GreatTree_Upper => &AreaDef {
                name: "Upper",
                full_name: "Great Tree - Upper",
                region: Region::FaronWoods,
                stage: Stage::GreatTree,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::GreatTree_To_FaronWoods_UpperPlatform,
                    Exit::GreatTree_To_FaronWoods_Top,
                ],
                map_entrances: &[
                    Entrance::GreatTree_From_FaronWoods_UpperPlatform,
                    Entrance::GreatTree_From_FaronWoods_Top,
                ],
                logic_exits: &[Area::GreatTree_Middle],
                logic_entrances: &[],
            },
            Area::FireSanctuaryA_Entry => &AreaDef {
                name: "Entry",
                full_name: "Fire Sanctuary A - Entry",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::FireSanctuaryA_To_OutsideFireSanctuary],
                map_entrances: &[Entrance::FireSanctuaryA_From_OutsideFireSanctuary],
                logic_exits: &[Area::FireSanctuaryA_PastFirstWaterPlant],
                logic_entrances: &[],
            },
            Area::FireSanctuaryA_InFrontOfBossDoor => &AreaDef {
                name: "In Front of Boss Door",
                full_name: "Fire Sanctuary A - In Front of Boss Door",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::FireSanctuaryA_To_FireSanctuaryBoss],
                map_entrances: &[],
                logic_exits: &[Area::FireSanctuaryA_UpperStaircaseRoom],
                logic_entrances: &[
                    Area::FireSanctuaryA_PrePlatsArea,
                    Area::FireSanctuaryA_UpperStaircaseRoom,
                ],
            },
            Area::FireSanctuaryA_PastFirstWaterPlant => &AreaDef {
                name: "Past First Water Plant",
                full_name: "Fire Sanctuary A - Past First Water Plant",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FireSanctuaryChestInFirstRoom],
                map_exits: &[Exit::FireSanctuaryA_To_FireSanctuaryB],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::FireSanctuaryA_Entry],
            },
            Area::FireSanctuaryA_PrePlatsArea => &AreaDef {
                name: "Pre Plats Area",
                full_name: "Fire Sanctuary A - Pre Plats Area",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FireSanctuaryPlatsChest],
                map_exits: &[],
                map_entrances: &[Entrance::FireSanctuaryA_From_FireSanctuaryB],
                logic_exits: &[Area::FireSanctuaryA_InFrontOfBossDoor],
                logic_entrances: &[],
            },
            Area::FireSanctuaryA_UpperStaircaseRoom => &AreaDef {
                name: "Upper Staircase Room",
                full_name: "Fire Sanctuary A - Upper Staircase Room",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::FireSanctuaryBossKeyChest,
                    Location::FireSanctuaryChestInStaircaseRoom,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::FireSanctuaryA_InFrontOfBossDoor],
                logic_entrances: &[Area::FireSanctuaryA_InFrontOfBossDoor],
            },
            Area::FireSanctuaryB_AfterDoubleMagmanosFight => &AreaDef {
                name: "After Double Magmanos Fight",
                full_name: "Fire Sanctuary B - After Double Magmanos Fight",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FireSanctuaryMogmaMitts],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::FireSanctuaryB_UnderDoubleMagmanosFight],
                logic_entrances: &[Area::FireSanctuaryB_WaterFruitRoom],
            },
            Area::FireSanctuaryB_FirstOutsideSection => &AreaDef {
                name: "First Outside Section",
                full_name: "Fire Sanctuary B - First Outside Section",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::FireSanctuaryChestInSecondRoom,
                    Location::FireSanctuaryChestOnBalcony,
                ],
                map_exits: &[],
                map_entrances: &[Entrance::FireSanctuaryB_From_FireSanctuaryA],
                logic_exits: &[Area::FireSanctuaryB_PastSecondRoomWithWaterFruit],
                logic_entrances: &[],
            },
            Area::FireSanctuaryB_LastTrappedMogmaArea => &AreaDef {
                name: "Last Trapped Mogma Area",
                full_name: "Fire Sanctuary B - Last Trapped Mogma Area",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::FireSanctuaryChestAfterBombableWall,
                    Location::FireSanctuaryChestAfterSecondTrappedMogma,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::FireSanctuaryB_UnderDoubleMagmanosFight],
            },
            Area::FireSanctuaryB_PastSecondRoomWithWaterFruit => &AreaDef {
                name: "Past Second Room with Water Fruit",
                full_name: "Fire Sanctuary B - Past Second Room with Water Fruit",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FireSanctuaryChestNearFirstTrappedMogma],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::FireSanctuaryB_WaterFruitRoom],
                logic_entrances: &[Area::FireSanctuaryB_FirstOutsideSection],
            },
            Area::FireSanctuaryB_UnderDoubleMagmanosFight => &AreaDef {
                name: "Under Double Magmanos Fight",
                full_name: "Fire Sanctuary B - Under Double Magmanos Fight",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::FireSanctuaryB_To_FireSanctuaryA],
                map_entrances: &[],
                logic_exits: &[Area::FireSanctuaryB_LastTrappedMogmaArea],
                logic_entrances: &[Area::FireSanctuaryB_AfterDoubleMagmanosFight],
            },
            Area::FireSanctuaryB_WaterFruitRoom => &AreaDef {
                name: "Water Fruit Room",
                full_name: "Fire Sanctuary B - Water Fruit Room",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::FireSanctuaryFirstChestInWaterFruitRoom,
                    Location::FireSanctuarySecondChestInWaterFruitRoom,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::FireSanctuaryB_AfterDoubleMagmanosFight],
                logic_entrances: &[Area::FireSanctuaryB_PastSecondRoomWithWaterFruit],
            },
            Area::FireSanctuaryBoss_Main => &AreaDef {
                name: "Main",
                full_name: "Fire Sanctuary Boss - Main",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryBoss,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FireSanctuaryGhirahimHeartContainer],
                map_exits: &[Exit::FireSanctuaryBoss_To_FireSanctuaryFlameRoom],
                map_entrances: &[Entrance::FireSanctuaryBoss_From_FireSanctuaryA],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::FireSanctuaryFlameRoom_Main => &AreaDef {
                name: "Main",
                full_name: "Fire Sanctuary Flame Room - Main",
                region: Region::FireSanctuary,
                stage: Stage::FireSanctuaryFlameRoom,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::FireSanctuaryDinsFlame],
                map_exits: &[],
                map_entrances: &[Entrance::FireSanctuaryFlameRoom_From_FireSanctuaryBoss],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::InsideGoddessStatue_Main => &AreaDef {
                name: "Main",
                full_name: "Inside Goddess Statue - Main",
                region: Region::KnightAcademy,
                stage: Stage::InsideGoddessStatue,
                time_of_day: None,
                can_sleep: false,
                locations: &[Location::KnightAcademyChestInGoddessStatue],
                map_exits: &[Exit::InsideGoddessStatue_To_Skyloft],
                map_entrances: &[Entrance::InsideGoddessStatue_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::KnightAcademy_AboveZeldasRoom => &AreaDef {
                name: "Above Zelda's Room",
                full_name: "Knight Academy - Above Zelda's Room",
                region: Region::KnightAcademy,
                stage: Stage::KnightAcademy,
                time_of_day: None,
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[Entrance::KnightAcademy_From_Skyloft_Chimney],
                logic_exits: &[Area::KnightAcademy_Main],
                logic_entrances: &[],
            },
            Area::KnightAcademy_Main => &AreaDef {
                name: "Main",
                full_name: "Knight Academy - Main",
                region: Region::KnightAcademy,
                stage: Stage::KnightAcademy,
                time_of_day: None,
                can_sleep: true,
                locations: &[
                    Location::KnightAcademyCawlinsLetter,
                    Location::KnightAcademyCrystalInKnightAcademyPlant,
                    Location::KnightAcademyCrystalInLinksRoom,
                    Location::KnightAcademyCrystalInZeldasRoom,
                    Location::KnightAcademyFledgesCrystals,
                    Location::KnightAcademyFledgesGift,
                    Location::KnightAcademyGhostPipitsCrystals,
                    Location::KnightAcademyInZeldasCloset,
                    Location::KnightAcademyOwlansCrystals,
                ],
                map_exits: &[
                    Exit::KnightAcademy_To_Skyloft_Lower_Right,
                    Exit::KnightAcademy_To_Skyloft_Lower_Left,
                    Exit::KnightAcademy_To_Skyloft_Upper_Right,
                    Exit::KnightAcademy_To_Skyloft_Upper_Left,
                ],
                map_entrances: &[
                    Entrance::KnightAcademy_From_Skyloft_Lower_Right,
                    Entrance::KnightAcademy_From_Skyloft_Lower_Left,
                    Entrance::KnightAcademy_From_Skyloft_Upper_Right,
                    Entrance::KnightAcademy_From_Skyloft_Upper_Left,
                ],
                logic_exits: &[],
                logic_entrances: &[Area::KnightAcademy_AboveZeldasRoom],
            },
            Area::Skyloft_OutsideGoddessStatue => &AreaDef {
                name: "Outside Goddess Statue",
                full_name: "Skyloft - Outside Goddess Statue",
                region: Region::KnightAcademy,
                stage: Stage::Skyloft,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::KnightAcademyChestNearGoddessStatue,
                    Location::KnightAcademyOwlansGift,
                    Location::KnightAcademyPumpkinArchery600Points,
                ],
                map_exits: &[
                    Exit::Skyloft_To_InsideGoddessStatue,
                    Exit::Skyloft_To_KnightAcademy_Chimney,
                    Exit::Skyloft_To_KnightAcademy_Lower_Right,
                    Exit::Skyloft_To_KnightAcademy_Lower_Left,
                    Exit::Skyloft_To_KnightAcademy_Upper_Right,
                    Exit::Skyloft_To_KnightAcademy_Upper_Left,
                    Exit::Skyloft_To_SparringHall_Right,
                    Exit::Skyloft_To_SparringHall_Left,
                ],
                map_entrances: &[
                    Entrance::Skyloft_From_InsideGoddessStatue,
                    Entrance::Skyloft_From_KnightAcademy_Lower_Right,
                    Entrance::Skyloft_From_KnightAcademy_Lower_Left,
                    Entrance::Skyloft_From_KnightAcademy_Upper_Right,
                    Entrance::Skyloft_From_KnightAcademy_Upper_Left,
                    Entrance::Skyloft_From_SparringHall_Right,
                    Entrance::Skyloft_From_SparringHall_Left,
                ],
                logic_exits: &[Area::Skyloft_CentralOutside],
                logic_entrances: &[Area::Skyloft_CentralOutside],
            },
            Area::SparringHall_Main => &AreaDef {
                name: "Main",
                full_name: "Sparring Hall - Main",
                region: Region::KnightAcademy,
                stage: Stage::SparringHall,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::KnightAcademyCrystalInSparringHall,
                    Location::KnightAcademySparringHallChest,
                ],
                map_exits: &[
                    Exit::SparringHall_To_Skyloft_Right,
                    Exit::SparringHall_To_Skyloft_Left,
                ],
                map_entrances: &[
                    Entrance::SparringHall_From_Skyloft_Right,
                    Entrance::SparringHall_From_Skyloft_Left,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::FaroresLair_Main => &AreaDef {
                name: "Main",
                full_name: "Farore's Lair - Main",
                region: Region::LakeFloria,
                stage: Stage::FaroresLair,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LakeFloriaDragonLairEastChest,
                    Location::LakeFloriaDragonLairSouthChest,
                ],
                map_exits: &[
                    Exit::FaroresLair_To_FloriaWaterfall,
                    Exit::FaroresLair_To_LakeFloria,
                ],
                map_entrances: &[
                    Entrance::FaroresLair_From_FloriaWaterfall,
                    Entrance::FaroresLair_From_LakeFloria,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::FloriaWaterfall_Main => &AreaDef {
                name: "Main",
                full_name: "Floria Waterfall - Main",
                region: Region::LakeFloria,
                stage: Stage::FloriaWaterfall,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::FloriaWaterfall_To_AncientCistern,
                    Exit::FloriaWaterfall_To_FaronWoods,
                    Exit::FloriaWaterfall_To_FaroresLair,
                    Exit::FloriaWaterfall_To_Sky_FloriaWaterfallStatue,
                ],
                map_entrances: &[
                    Entrance::FloriaWaterfall_From_AncientCistern,
                    Entrance::FloriaWaterfall_From_FaroresLair,
                    Entrance::FloriaWaterfall_From_Sky_FloriaWaterfallStatue,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::LakeFloria_Entry => &AreaDef {
                name: "Entry",
                full_name: "Lake Floria - Entry",
                region: Region::LakeFloria,
                stage: Stage::LakeFloria,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[Entrance::LakeFloria_From_FaronWoods],
                logic_exits: &[Area::LakeFloria_StatueSpot],
                logic_entrances: &[],
            },
            Area::LakeFloria_StatueSpot => &AreaDef {
                name: "Statue Spot",
                full_name: "Lake Floria - Statue Spot",
                region: Region::LakeFloria,
                stage: Stage::LakeFloria,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LakeFloriaLakeFloriaChest],
                map_exits: &[Exit::LakeFloria_To_Sky_LakeFloriaStatue],
                map_entrances: &[Entrance::LakeFloria_From_Sky_LakeFloriaStatue],
                logic_exits: &[Area::LakeFloria_ToFaroresLair],
                logic_entrances: &[Area::LakeFloria_Entry, Area::LakeFloria_ToFaroresLair],
            },
            Area::LakeFloria_ToFaroresLair => &AreaDef {
                name: "To Farore's Lair",
                full_name: "Lake Floria - To Farore's Lair",
                region: Region::LakeFloria,
                stage: Stage::LakeFloria,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::LakeFloria_To_FaroresLair],
                map_entrances: &[Entrance::LakeFloria_From_FaroresLair],
                logic_exits: &[Area::LakeFloria_StatueSpot],
                logic_entrances: &[Area::LakeFloria_StatueSpot],
            },
            Area::LanayruCaves_Main => &AreaDef {
                name: "Main",
                full_name: "Lanayru Caves - Main",
                region: Region::LanayruCaves,
                stage: Stage::LanayruCaves,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruCavesChest,
                    Location::LanayruCavesGolosGift,
                    Location::LanayruCavesGossipStoneInCenter,
                ],
                map_exits: &[
                    Exit::LanayruCaves_To_LanayruDesert,
                    Exit::LanayruCaves_To_LanayruMines,
                ],
                map_entrances: &[
                    Entrance::LanayruCaves_From_LanayruDesert,
                    Entrance::LanayruCaves_From_LanayruMines,
                ],
                logic_exits: &[Area::LanayruCaves_ToSandSea],
                logic_entrances: &[Area::LanayruCaves_ToSandSea],
            },
            Area::LanayruCaves_ToSandSea => &AreaDef {
                name: "To Sand Sea",
                full_name: "Lanayru Caves - To Sand Sea",
                region: Region::LanayruCaves,
                stage: Stage::LanayruCaves,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::LanayruCaves_To_SandSeaDocks],
                map_entrances: &[Entrance::LanayruCaves_From_SandSeaDocks],
                logic_exits: &[Area::LanayruCaves_Main],
                logic_entrances: &[Area::LanayruCaves_Main],
            },
            Area::FireNode_End => &AreaDef {
                name: "End",
                full_name: "Fire Node - End",
                region: Region::LanayruDesert,
                stage: Stage::FireNode,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruDesertFireNodeLeftEndingChest,
                    Location::LanayruDesertFireNodeRightEndingChest,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::FireNode_Main],
            },
            Area::FireNode_Main => &AreaDef {
                name: "Main",
                full_name: "Fire Node - Main",
                region: Region::LanayruDesert,
                stage: Stage::FireNode,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruDesertFireNodeFirstSmallChest,
                    Location::LanayruDesertFireNodeSecondSmallChest,
                    Location::LanayruDesertFireNodeShortcutChest,
                ],
                map_exits: &[Exit::FireNode_To_LanayruDesert],
                map_entrances: &[Entrance::FireNode_From_LanayruDesert],
                logic_exits: &[Area::FireNode_End],
                logic_entrances: &[],
            },
            Area::LanayruDesert_HookBeetleArea => &AreaDef {
                name: "Hook Beetle Area",
                full_name: "Lanayru Desert - Hook Beetle Area",
                region: Region::LanayruDesert,
                stage: Stage::LanayruDesert,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruDesertChestNearHookBeetleFight,
                    Location::LanayruDesertChestNearPartyWheel,
                    Location::LanayruDesertHookBeetleFight,
                ],
                map_exits: &[
                    Exit::LanayruDesert_To_LanayruMines,
                    Exit::LanayruDesert_To_Sky_DesertEntranceStatue,
                ],
                map_entrances: &[
                    Entrance::LanayruDesert_From_LanayruMines,
                    Entrance::LanayruDesert_From_Sky_DesertEntranceStatue,
                ],
                logic_exits: &[Area::LanayruDesert_PastToT, Area::LanayruDesert_SandOasis],
                logic_entrances: &[Area::LanayruDesert_PastToT, Area::LanayruDesert_SandOasis],
            },
            Area::LanayruDesert_PastToT => &AreaDef {
                name: "Past ToT",
                full_name: "Lanayru Desert - Past ToT",
                region: Region::LanayruDesert,
                stage: Stage::LanayruDesert,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruDesertChestOnPlatformNearFireNode,
                    Location::LanayruDesertChestOnPlatformNearLightningNode,
                    Location::LanayruDesertChestOnTopOfLanayruMiningFacility,
                    Location::LanayruDesertSecretPassagewayChest,
                ],
                map_exits: &[
                    Exit::LanayruDesert_To_FireNode,
                    Exit::LanayruDesert_To_LanayruMiningFacilityA,
                    Exit::LanayruDesert_To_LanayruSilentRealm,
                    Exit::LanayruDesert_To_LightningNode,
                    Exit::LanayruDesert_To_Sky_NorthDesertStatue,
                    Exit::LanayruDesert_To_Sky_StoneCacheStatue,
                    Exit::LanayruDesert_To_TempleOfTime_End,
                ],
                map_entrances: &[
                    Entrance::LanayruDesert_From_FireNode,
                    Entrance::LanayruDesert_From_LightningNode,
                    Entrance::LanayruDesert_From_TempleOfTime_End,
                    Entrance::LanayruDesert_From_LanayruMiningFacilityA,
                    Entrance::LanayruDesert_From_LanayruSilentRealm,
                    Entrance::LanayruDesert_From_Sky_NorthDesertStatue,
                    Entrance::LanayruDesert_From_Sky_StoneCacheStatue,
                ],
                logic_exits: &[Area::LanayruDesert_HookBeetleArea],
                logic_entrances: &[Area::LanayruDesert_HookBeetleArea],
            },
            Area::LanayruDesert_SandOasis => &AreaDef {
                name: "Sand Oasis",
                full_name: "Lanayru Desert - Sand Oasis",
                region: Region::LanayruDesert,
                stage: Stage::LanayruDesert,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruDesertChestNearSandOasis],
                map_exits: &[
                    Exit::LanayruDesert_To_LanayruCaves,
                    Exit::LanayruDesert_To_Sky_WestDesertStatue,
                    Exit::LanayruDesert_To_TempleOfTime_Start,
                ],
                map_entrances: &[
                    Entrance::LanayruDesert_From_LanayruCaves,
                    Entrance::LanayruDesert_From_TempleOfTime_Start,
                    Entrance::LanayruDesert_From_Sky_WestDesertStatue,
                ],
                logic_exits: &[Area::LanayruDesert_HookBeetleArea],
                logic_entrances: &[Area::LanayruDesert_HookBeetleArea],
            },
            Area::LightningNode_Main => &AreaDef {
                name: "Main",
                full_name: "Lightning Node - Main",
                region: Region::LanayruDesert,
                stage: Stage::LightningNode,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruDesertLightningNodeFirstChest,
                    Location::LanayruDesertLightningNodeRaisedChestNearGenerator,
                    Location::LanayruDesertLightningNodeSecondChest,
                ],
                map_exits: &[Exit::LightningNode_To_LanayruDesert],
                map_entrances: &[Entrance::LightningNode_From_LanayruDesert],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::TempleOfTime_AfterLmf => &AreaDef {
                name: "After LMF",
                full_name: "Temple of Time - After LMF",
                region: Region::LanayruDesert,
                stage: Stage::TempleOfTime,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[Entrance::TempleOfTime_From_LanayruMiningFacilityToToT],
                logic_exits: &[Area::TempleOfTime_NearGossipStone],
                logic_entrances: &[],
            },
            Area::TempleOfTime_End => &AreaDef {
                name: "End",
                full_name: "Temple of Time - End",
                region: Region::LanayruDesert,
                stage: Stage::TempleOfTime,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::TempleOfTime_To_LanayruDesert_End],
                map_entrances: &[Entrance::TempleOfTime_From_LanayruDesert_End],
                logic_exits: &[Area::TempleOfTime_Start],
                logic_entrances: &[Area::TempleOfTime_NearCube],
            },
            Area::TempleOfTime_NearCube => &AreaDef {
                name: "Near Cube",
                full_name: "Temple of Time - Near Cube",
                region: Region::LanayruDesert,
                stage: Stage::TempleOfTime,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::TempleOfTime_End],
                logic_entrances: &[Area::TempleOfTime_NearGossipStone],
            },
            Area::TempleOfTime_NearGossipStone => &AreaDef {
                name: "Near Gossip Stone",
                full_name: "Temple of Time - Near Gossip Stone",
                region: Region::LanayruDesert,
                stage: Stage::TempleOfTime,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruDesertGossipStoneInTempleOfTimeArea],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::TempleOfTime_NearCube],
                logic_entrances: &[Area::TempleOfTime_AfterLmf, Area::TempleOfTime_Start],
            },
            Area::TempleOfTime_Start => &AreaDef {
                name: "Start",
                full_name: "Temple of Time - Start",
                region: Region::LanayruDesert,
                stage: Stage::TempleOfTime,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::TempleOfTime_To_LanayruDesert_Start],
                map_entrances: &[Entrance::TempleOfTime_From_LanayruDesert_Start],
                logic_exits: &[Area::TempleOfTime_NearGossipStone],
                logic_entrances: &[Area::TempleOfTime_End],
            },
            Area::LanayruMines_FirstHalf => &AreaDef {
                name: "First Half",
                full_name: "Lanayru Mines - First Half",
                region: Region::LanayruMines,
                stage: Stage::LanayruMines,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruMinesChestAtTheEndOfMines,
                    Location::LanayruMinesChestBehindFirstLanding,
                    Location::LanayruMinesChestBehindStatue,
                    Location::LanayruMinesChestNearFirstTimeshiftStone,
                ],
                map_exits: &[Exit::LanayruMines_To_Sky_LanayruMineEntryStatue],
                map_entrances: &[Entrance::LanayruMines_From_Sky_LanayruMineEntryStatue],
                logic_exits: &[Area::LanayruMines_ToCaves, Area::LanayruMines_ToDesert],
                logic_entrances: &[Area::LanayruMines_ToCaves],
            },
            Area::LanayruMines_ToCaves => &AreaDef {
                name: "To Caves",
                full_name: "Lanayru Mines - To Caves",
                region: Region::LanayruMines,
                stage: Stage::LanayruMines,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::LanayruMines_To_LanayruCaves],
                map_entrances: &[Entrance::LanayruMines_From_LanayruCaves],
                logic_exits: &[Area::LanayruMines_FirstHalf],
                logic_entrances: &[Area::LanayruMines_FirstHalf],
            },
            Area::LanayruMines_ToDesert => &AreaDef {
                name: "To Desert",
                full_name: "Lanayru Mines - To Desert",
                region: Region::LanayruMines,
                stage: Stage::LanayruMines,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::LanayruMines_To_LanayruDesert],
                map_entrances: &[Entrance::LanayruMines_From_LanayruDesert],
                logic_exits: &[],
                logic_entrances: &[Area::LanayruMines_FirstHalf],
            },
            Area::LanayruMiningFacilityA_Entry => &AreaDef {
                name: "Entry",
                full_name: "Lanayru Mining Facility A - Entry",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityChestBehindBars],
                map_exits: &[Exit::LanayruMiningFacilityA_To_LanayruDesert],
                map_entrances: &[Entrance::LanayruMiningFacilityA_From_LanayruDesert],
                logic_exits: &[Area::LanayruMiningFacilityA_SecondRoom],
                logic_entrances: &[],
            },
            Area::LanayruMiningFacilityA_FirstKeyLockedRoom => &AreaDef {
                name: "First Key Locked Room",
                full_name: "Lanayru Mining Facility A - First Key Locked Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityChestInKeyLockedRoom],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::LanayruMiningFacilityA_GustBellowsRoom],
                logic_entrances: &[Area::LanayruMiningFacilityA_SecondRoom],
            },
            Area::LanayruMiningFacilityA_FirstWestRoom => &AreaDef {
                name: "First West Room",
                full_name: "Lanayru Mining Facility A - First West Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityChestInFirstWestRoom],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::LanayruMiningFacilityA_MapRoom],
                logic_entrances: &[Area::LanayruMiningFacilityA_SecondRoom],
            },
            Area::LanayruMiningFacilityA_GustBellowsRoom => &AreaDef {
                name: "Gust Bellows Room",
                full_name: "Lanayru Mining Facility A - Gust Bellows Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruMiningFacilityChestInsideGustBellowsRoom,
                    Location::LanayruMiningFacilityGustBellows,
                ],
                map_exits: &[Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub2],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::LanayruMiningFacilityA_FirstKeyLockedRoom],
            },
            Area::LanayruMiningFacilityA_MapRoom => &AreaDef {
                name: "Map Room",
                full_name: "Lanayru Mining Facility A - Map Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityChestAfterArmosFight],
                map_exits: &[Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_HubW],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::LanayruMiningFacilityA_FirstWestRoom],
            },
            Area::LanayruMiningFacilityA_SecondRoom => &AreaDef {
                name: "Second Room",
                full_name: "Lanayru Mining Facility A - Second Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityA,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub],
                map_entrances: &[],
                logic_exits: &[
                    Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                    Area::LanayruMiningFacilityA_FirstWestRoom,
                ],
                logic_entrances: &[Area::LanayruMiningFacilityA_Entry],
            },
            Area::LanayruMiningFacilityB_AfterLmfBkRoom => &AreaDef {
                name: "After LMF BK Room",
                full_name: "Lanayru Mining Facility B - After LMF BK Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityShortcutChestInMainHub],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                    Area::LanayruMiningFacilityB_NearBossDoor,
                ],
                logic_entrances: &[
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                    Area::LanayruMiningFacilityB_NearBossDoor,
                ],
            },
            Area::LanayruMiningFacilityB_HubRoom => &AreaDef {
                name: "Hub Room",
                full_name: "Lanayru Mining Facility B - Hub Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub],
                logic_exits: &[Area::LanayruMiningFacilityB_NearFirstHubRoomChest],
                logic_entrances: &[],
            },
            Area::LanayruMiningFacilityB_InsideLmfBkRoom => &AreaDef {
                name: "Inside LMF BK Room",
                full_name: "Lanayru Mining Facility B - Inside LMF BK Room",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityBossKeyChest],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::LanayruMiningFacilityB_AfterLmfBkRoom],
                logic_entrances: &[
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    Area::LanayruMiningFacilityB_NearBossDoor,
                ],
            },
            Area::LanayruMiningFacilityB_NearBossDoor => &AreaDef {
                name: "Near Boss Door",
                full_name: "Lanayru Mining Facility B - Near Boss Door",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::LanayruMiningFacilityB_To_LanayruMiningFacilityBoss],
                map_entrances: &[],
                logic_exits: &[
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                ],
                logic_entrances: &[
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    Area::LanayruMiningFacilityB_WestHub,
                ],
            },
            Area::LanayruMiningFacilityB_NearFirstHubRoomChest => &AreaDef {
                name: "Near First Hub Room Chest",
                full_name: "Lanayru Mining Facility B - Near First Hub Room Chest",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityFirstChestInHubRoom],
                map_exits: &[],
                map_entrances: &[Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub2],
                logic_exits: &[],
                logic_entrances: &[Area::LanayruMiningFacilityB_HubRoom],
            },
            Area::LanayruMiningFacilityB_WestHub => &AreaDef {
                name: "West Hub",
                full_name: "Lanayru Mining Facility B - West Hub",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityB,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruMiningFacilityChestBehindFirstCrawlspace,
                    Location::LanayruMiningFacilityChestInSpikeMaze,
                ],
                map_exits: &[],
                map_entrances: &[Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_HubW],
                logic_exits: &[Area::LanayruMiningFacilityB_NearBossDoor],
                logic_entrances: &[],
            },
            Area::LanayruMiningFacilityBoss_Main => &AreaDef {
                name: "Main",
                full_name: "Lanayru Mining Facility Boss - Main",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityBoss,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityMolderachHeartContainer],
                map_exits: &[Exit::LanayruMiningFacilityBoss_To_LanayruMiningFacilityToToT],
                map_entrances: &[Entrance::LanayruMiningFacilityBoss_From_LanayruMiningFacilityB],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::LanayruMiningFacilityToToT_BossDoor => &AreaDef {
                name: "Boss Door",
                full_name: "Lanayru Mining Facility to ToT - Boss Door",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityToToT,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[],
                map_entrances: &[
                    Entrance::LanayruMiningFacilityToToT_From_LanayruMiningFacilityBoss,
                ],
                logic_exits: &[Area::LanayruMiningFacilityToToT_ToTExit],
                logic_entrances: &[],
            },
            Area::LanayruMiningFacilityToToT_ToTExit => &AreaDef {
                name: "ToT Exit",
                full_name: "Lanayru Mining Facility to ToT - ToT Exit",
                region: Region::LanayruMiningFacility,
                stage: Stage::LanayruMiningFacilityToToT,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruMiningFacilityGoddessHarp],
                map_exits: &[Exit::LanayruMiningFacilityToToT_To_TempleOfTime],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::LanayruMiningFacilityToToT_BossDoor],
            },
            Area::InsidePiratesStronghold_Main => &AreaDef {
                name: "Main",
                full_name: "Inside Pirate's Stronghold - Main",
                region: Region::LanayruSandSea,
                stage: Stage::InsidePiratesStronghold,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruSandSeaPirateStrongholdFirstChest,
                    Location::LanayruSandSeaPirateStrongholdSecondChest,
                    Location::LanayruSandSeaPirateStrongholdThirdChest,
                ],
                map_exits: &[
                    Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_End,
                    Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_Beginning,
                ],
                map_entrances: &[
                    Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_End,
                    Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_Beginning,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::OutsidePiratesStronghold_InsideSharkhead => &AreaDef {
                name: "Inside Sharkhead",
                full_name: "Outside Pirate's Stronghold - Inside Sharkhead",
                region: Region::LanayruSandSea,
                stage: Stage::OutsidePiratesStronghold,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_End],
                map_entrances: &[
                    Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_End,
                ],
                logic_exits: &[],
                logic_entrances: &[Area::OutsidePiratesStronghold_Main],
            },
            Area::OutsidePiratesStronghold_Main => &AreaDef {
                name: "Main",
                full_name: "Outside Pirate's Stronghold - Main",
                region: Region::LanayruSandSea,
                stage: Stage::OutsidePiratesStronghold,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_Beginning,
                    Exit::OutsidePiratesStronghold_To_SandSea,
                ],
                map_entrances: &[
                    Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_Beginning,
                    Entrance::OutsidePiratesStronghold_From_SandSea,
                ],
                logic_exits: &[Area::OutsidePiratesStronghold_InsideSharkhead],
                logic_entrances: &[],
            },
            Area::SandSea_Main => &AreaDef {
                name: "Main",
                full_name: "Sand Sea - Main",
                region: Region::LanayruSandSea,
                stage: Stage::SandSea,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::SandSea_To_OutsidePiratesStronghold,
                    Exit::SandSea_To_SandSeaDocks,
                    Exit::SandSea_To_Sandship,
                    Exit::SandSea_To_Shipyard,
                    Exit::SandSea_To_SkippersRetreat,
                ],
                map_entrances: &[
                    Entrance::SandSea_From_OutsidePiratesStronghold,
                    Entrance::SandSea_From_SandSeaDocks,
                    Entrance::SandSea_From_Shipyard,
                    Entrance::SandSea_From_SkippersRetreat,
                    Entrance::SandSea_From_Sandship,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::SandSeaDocks_Main => &AreaDef {
                name: "Main",
                full_name: "Sand Sea Docks - Main",
                region: Region::LanayruSandSea,
                stage: Stage::SandSeaDocks,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::SandSeaDocks_To_SandSea,
                    Exit::SandSeaDocks_To_Sky_AncientHarbor,
                ],
                map_entrances: &[Entrance::SandSeaDocks_From_SandSea],
                logic_exits: &[],
                logic_entrances: &[Area::SandSeaDocks_ToCaves],
            },
            Area::SandSeaDocks_ToCaves => &AreaDef {
                name: "To Caves",
                full_name: "Sand Sea Docks - To Caves",
                region: Region::LanayruSandSea,
                stage: Stage::SandSeaDocks,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::SandSeaDocks_To_LanayruCaves],
                map_entrances: &[Entrance::SandSeaDocks_From_LanayruCaves],
                logic_exits: &[Area::SandSeaDocks_Main],
                logic_entrances: &[],
            },
            Area::Shipyard_AfterMinecartRide => &AreaDef {
                name: "After Minecart Ride",
                full_name: "Shipyard - After Minecart Ride",
                region: Region::LanayruSandSea,
                stage: Stage::Shipyard,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::Shipyard_To_ShipyardConstructionBay_Upper],
                map_entrances: &[Entrance::Shipyard_From_ShipyardConstructionBay_Upper],
                logic_exits: &[],
                logic_entrances: &[Area::Shipyard_Main],
            },
            Area::Shipyard_Main => &AreaDef {
                name: "Main",
                full_name: "Shipyard - Main",
                region: Region::LanayruSandSea,
                stage: Stage::Shipyard,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::LanayruSandSeaGossipStoneInShipyard,
                    Location::LanayruSandSeaRicketyCoasterHeartStoppingTrackIn105,
                ],
                map_exits: &[
                    Exit::Shipyard_To_SandSea,
                    Exit::Shipyard_To_ShipyardConstructionBay_Lower,
                ],
                map_entrances: &[
                    Entrance::Shipyard_From_SandSea,
                    Entrance::Shipyard_From_ShipyardConstructionBay_Lower,
                ],
                logic_exits: &[Area::Shipyard_AfterMinecartRide],
                logic_entrances: &[],
            },
            Area::ShipyardConstructionBay_Lower => &AreaDef {
                name: "Lower",
                full_name: "Shipyard Construction Bay - Lower",
                region: Region::LanayruSandSea,
                stage: Stage::ShipyardConstructionBay,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::ShipyardConstructionBay_To_Shipyard_Lower],
                map_entrances: &[Entrance::ShipyardConstructionBay_From_Shipyard_Lower],
                logic_exits: &[],
                logic_entrances: &[Area::ShipyardConstructionBay_Upper],
            },
            Area::ShipyardConstructionBay_Upper => &AreaDef {
                name: "Upper",
                full_name: "Shipyard Construction Bay - Upper",
                region: Region::LanayruSandSea,
                stage: Stage::ShipyardConstructionBay,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::ShipyardConstructionBay_To_Shipyard_Upper],
                map_entrances: &[Entrance::ShipyardConstructionBay_From_Shipyard_Upper],
                logic_exits: &[Area::ShipyardConstructionBay_Lower],
                logic_entrances: &[],
            },
            Area::SkippersRetreat_NextToShack => &AreaDef {
                name: "Next to Shack",
                full_name: "Skipper's Retreat - Next to Shack",
                region: Region::LanayruSandSea,
                stage: Stage::SkippersRetreat,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruSandSeaSkippersRetreatSkydiveChest],
                map_exits: &[Exit::SkippersRetreat_To_SkippersShack],
                map_entrances: &[Entrance::SkippersRetreat_From_SkippersShack],
                logic_exits: &[Area::SkippersRetreat_PastDekuBaba],
                logic_entrances: &[Area::SkippersRetreat_PastDekuBaba],
            },
            Area::SkippersRetreat_PastDekuBaba => &AreaDef {
                name: "Past Deku Baba",
                full_name: "Skipper's Retreat - Past Deku Baba",
                region: Region::LanayruSandSea,
                stage: Stage::SkippersRetreat,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruSandSeaSkippersRetreatChestOnTopOfCactiPillar],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::SkippersRetreat_NextToShack],
                logic_entrances: &[
                    Area::SkippersRetreat_NextToShack,
                    Area::SkippersRetreat_PastMoblin,
                ],
            },
            Area::SkippersRetreat_PastMoblin => &AreaDef {
                name: "Past Moblin",
                full_name: "Skipper's Retreat - Past Moblin",
                region: Region::LanayruSandSea,
                stage: Stage::SkippersRetreat,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruSandSeaSkippersRetreatChestAfterMoblin],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::SkippersRetreat_PastDekuBaba],
                logic_entrances: &[Area::SkippersRetreat_Start],
            },
            Area::SkippersRetreat_Start => &AreaDef {
                name: "Start",
                full_name: "Skipper's Retreat - Start",
                region: Region::LanayruSandSea,
                stage: Stage::SkippersRetreat,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::SkippersRetreat_To_SandSea],
                map_entrances: &[Entrance::SkippersRetreat_From_SandSea],
                logic_exits: &[Area::SkippersRetreat_PastMoblin],
                logic_entrances: &[],
            },
            Area::SkippersShack_Main => &AreaDef {
                name: "Main",
                full_name: "Skipper's Shack - Main",
                region: Region::LanayruSandSea,
                stage: Stage::SkippersShack,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruSandSeaSkippersRetreatChestInShack],
                map_exits: &[Exit::SkippersShack_To_SkippersRetreat],
                map_entrances: &[Entrance::SkippersShack_From_SkippersRetreat],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::LanayruSilentRealm_Trial => &AreaDef {
                name: "Trial",
                full_name: "Lanayru Silent Realm - Trial",
                region: Region::LanayruSilentRealm,
                stage: Stage::LanayruSilentRealm,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::LanayruSilentRealmClawshots],
                map_exits: &[Exit::LanayruSilentRealm_To_LanayruDesert],
                map_entrances: &[Entrance::LanayruSilentRealm_From_LanayruDesert],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::MogmaTurf_Main => &AreaDef {
                name: "Main",
                full_name: "Mogma Turf - Main",
                region: Region::MogmaTurf,
                stage: Stage::MogmaTurf,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::MogmaTurfChestBehindBombableWallAtEntrance,
                    Location::MogmaTurfChestBehindBombableWallInFireMaze,
                    Location::MogmaTurfDiggingMittsFight,
                    Location::MogmaTurfFreeFallChest,
                    Location::MogmaTurfSandSlideChest,
                ],
                map_exits: &[
                    Exit::MogmaTurf_To_EldinVolcano_EndVent,
                    Exit::MogmaTurf_To_EldinVolcano_StartVent,
                ],
                map_entrances: &[Entrance::MogmaTurf_From_EldinVolcano_Skydive],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::Sandship_Deck => &AreaDef {
                name: "Deck",
                full_name: "Sandship - Deck",
                region: Region::Sandship,
                stage: Stage::Sandship,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SandshipBossKeyChest,
                    Location::SandshipBow,
                    Location::SandshipChestAtTheStern,
                    Location::SandshipChestBefore4DoorCorridor,
                ],
                map_exits: &[Exit::Sandship_To_SandSea],
                map_entrances: &[Entrance::Sandship_From_SandSea],
                logic_exits: &[Area::Sandship_PastSpume],
                logic_entrances: &[],
            },
            Area::Sandship_PastSpume => &AreaDef {
                name: "Past Spume",
                full_name: "Sandship - Past Spume",
                region: Region::Sandship,
                stage: Stage::Sandship,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SandshipChestBehindCombinationLock],
                map_exits: &[Exit::Sandship_To_SandshipBoss],
                map_entrances: &[],
                logic_exits: &[Area::Sandship_SandshipBrig],
                logic_entrances: &[Area::Sandship_Deck],
            },
            Area::Sandship_SandshipBrig => &AreaDef {
                name: "Sandship Brig",
                full_name: "Sandship - Sandship Brig",
                region: Region::Sandship,
                stage: Stage::Sandship,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SandshipRobotInBrigsReward,
                    Location::SandshipTreasureRoomFifthChest,
                    Location::SandshipTreasureRoomFirstChest,
                    Location::SandshipTreasureRoomFourthChest,
                    Location::SandshipTreasureRoomSecondChest,
                    Location::SandshipTreasureRoomThirdChest,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::Sandship_PastSpume],
            },
            Area::SandshipBoss_Main => &AreaDef {
                name: "Main",
                full_name: "Sandship Boss - Main",
                region: Region::Sandship,
                stage: Stage::SandshipBoss,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SandshipNayrusFlame,
                    Location::SandshipTentalusHeartContainer,
                ],
                map_exits: &[],
                map_entrances: &[Entrance::SandshipBoss_From_Sandship],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::BehindTheTemple_Main => &AreaDef {
                name: "Main",
                full_name: "Behind the Temple - Main",
                region: Region::SealedGrounds,
                stage: Stage::BehindTheTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SealedGroundsGorkosGoddessWallReward],
                map_exits: &[
                    Exit::BehindTheTemple_To_FaronWoods,
                    Exit::BehindTheTemple_To_SealedGroundsSpiral,
                    Exit::BehindTheTemple_To_SealedTemple,
                    Exit::BehindTheTemple_To_Sky_BehindTheTempleStatue,
                ],
                map_entrances: &[
                    Entrance::BehindTheTemple_From_FaronWoods,
                    Entrance::BehindTheTemple_From_SealedTemple,
                    Entrance::BehindTheTemple_From_Sky_BehindTheTempleStatue,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::HyliasTemple_Main => &AreaDef {
                name: "Main",
                full_name: "Hylia's Temple - Main",
                region: Region::SealedGrounds,
                stage: Stage::HyliasTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SealedGroundsZeldasBlessing],
                map_exits: &[],
                map_entrances: &[Entrance::HyliasTemple_From_SealedTemple],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::SealedGroundsSpiral_Lower => &AreaDef {
                name: "Lower",
                full_name: "Sealed Grounds Spiral - Lower",
                region: Region::SealedGrounds,
                stage: Stage::SealedGroundsSpiral,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::SealedGroundsSpiral_To_SealedTemple],
                map_entrances: &[Entrance::SealedGroundsSpiral_From_SealedTemple],
                logic_exits: &[Area::SealedGroundsSpiral_Upper],
                logic_entrances: &[Area::SealedGroundsSpiral_Upper],
            },
            Area::SealedGroundsSpiral_Upper => &AreaDef {
                name: "Upper",
                full_name: "Sealed Grounds Spiral - Upper",
                region: Region::SealedGrounds,
                stage: Stage::SealedGroundsSpiral,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::SealedGroundsSpiral_To_Sky_SealedGroundsStatue],
                map_entrances: &[
                    Entrance::SealedGroundsSpiral_From_BehindTheTemple,
                    Entrance::SealedGroundsSpiral_From_Sky_SealedGroundsStatue,
                ],
                logic_exits: &[Area::SealedGroundsSpiral_Lower],
                logic_entrances: &[Area::SealedGroundsSpiral_Lower],
            },
            Area::SealedTemple_Main => &AreaDef {
                name: "Main",
                full_name: "Sealed Temple - Main",
                region: Region::SealedGrounds,
                stage: Stage::SealedTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SealedGroundsChestInsideSealedTemple,
                    Location::SealedGroundsSongFromImpa,
                ],
                map_exits: &[
                    Exit::SealedTemple_To_BehindTheTemple,
                    Exit::SealedTemple_To_HyliasTemple,
                    Exit::SealedTemple_To_SealedGroundsSpiral,
                ],
                map_entrances: &[
                    Entrance::SealedTemple_From_BehindTheTemple,
                    Entrance::SealedTemple_From_SealedGroundsSpiral,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::InsideBambooIsland_Main => &AreaDef {
                name: "Main",
                full_name: "Inside Bamboo Island - Main",
                region: Region::Sky,
                stage: Stage::InsideBambooIsland,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SkyGossipStoneInsideBambooIsland],
                map_exits: &[Exit::InsideBambooIsland_To_Sky],
                map_entrances: &[Entrance::InsideBambooIsland_From_Sky],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::LumpyPumpkin_Main => &AreaDef {
                name: "Main",
                full_name: "Lumpy Pumpkin - Main",
                region: Region::Sky,
                stage: Stage::LumpyPumpkin,
                time_of_day: None,
                can_sleep: true,
                locations: &[
                    Location::SkyCrystalInsideLumpyPumpkin,
                    Location::SkyLumpyPumpkinChandelier,
                    Location::SkyLumpyPumpkinHarpMinigame,
                ],
                map_exits: &[
                    Exit::LumpyPumpkin_To_Sky_North,
                    Exit::LumpyPumpkin_To_Sky_South_Right,
                    Exit::LumpyPumpkin_To_Sky_South_Left,
                ],
                map_entrances: &[
                    Entrance::LumpyPumpkin_From_Sky_North,
                    Entrance::LumpyPumpkin_From_Sky_South_Right,
                    Entrance::LumpyPumpkin_From_Sky_South_Left,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::Sky_BeedleIslandCage => &AreaDef {
                name: "Beedle Island Cage",
                full_name: "Sky - Beedle Island Cage",
                region: Region::Sky,
                stage: Stage::Sky,
                time_of_day: None,
                can_sleep: false,
                locations: &[Location::SkyBeedlesIslandCageGoddessChest],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[],
                logic_entrances: &[Area::Sky_BeedlesSkyHome, Area::Sky_Field],
            },
            Area::Sky_BeedlesSkyHome => &AreaDef {
                name: "Beedle's Sky Home",
                full_name: "Sky - Beedle's Sky Home",
                region: Region::Sky,
                stage: Stage::Sky,
                time_of_day: Some(ForceToD::Night),
                can_sleep: false,
                locations: &[
                    Location::SkyBeedlesCrystals,
                    Location::SkyCrystalOnBeedlesShip,
                ],
                map_exits: &[Exit::Sky_To_BeedlesShop_Night],
                map_entrances: &[Entrance::Sky_From_BeedlesShop_Night],
                logic_exits: &[Area::Sky_BeedleIslandCage],
                logic_entrances: &[],
            },
            Area::Sky_Field => &AreaDef {
                name: "Field",
                full_name: "Sky - Field",
                region: Region::Sky,
                stage: Stage::Sky,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SkyBambooIslandGoddessChest,
                    Location::SkyBeedlesIslandGoddessChest,
                    Location::SkyChestInBreakableBoulderNearFunFunIsland,
                    Location::SkyChestInBreakableBoulderNearLumpyPumpkin,
                    Location::SkyDodohsCrystals,
                    Location::SkyFunFunIslandMinigame500Rupees,
                    Location::SkyGoddessChestInCaveOnIslandNextToBambooIsland,
                    Location::SkyGoddessChestInsideVolcanicIsland,
                    Location::SkyGoddessChestOnIslandClosestToFaronPillar,
                    Location::SkyGoddessChestOnIslandNextToBambooIsland,
                    Location::SkyGoddessChestOutsideVolcanicIsland,
                    Location::SkyGoddessChestUnderFunFunIsland,
                    Location::SkyGossipStoneInVolcanicIsland,
                    Location::SkyLumpyPumpkinGoddessChestOnTheRoof,
                    Location::SkyNortheastIslandCageGoddessChest,
                    Location::SkyNortheastIslandGoddessChestBehindBombableRocks,
                    Location::SkyOriellesCrystals,
                    Location::SkySouthwestTripleIslandCageGoddessChest,
                    Location::SkySouthwestTripleIslandLowerGoddessChest,
                    Location::SkySouthwestTripleIslandUpperGoddessChest,
                ],
                map_exits: &[
                    Exit::Sky_To_BehindTheTemple_BehindTheTempleStatue,
                    Exit::Sky_To_DeepWoods_DeepWoodsStatue,
                    Exit::Sky_To_DeepWoods_ForestTempleStatue,
                    Exit::Sky_To_EldinVolcano_EldinEntranceStatue,
                    Exit::Sky_To_EldinVolcano_TempleEntranceStatue,
                    Exit::Sky_To_EldinVolcano_VolcanoEastStatue,
                    Exit::Sky_To_EldinVolcano_VolcanoAscentStatue,
                    Exit::Sky_To_FaronWoods_FaronWoodsEntryStatue,
                    Exit::Sky_To_FaronWoods_GreatTreeStatue,
                    Exit::Sky_To_FaronWoods_InTheWoodsStatue,
                    Exit::Sky_To_FaronWoods_ViewingPlatformStatue,
                    Exit::Sky_To_FloriaWaterfall_FloriaWaterfallStatue,
                    Exit::Sky_To_InsideBambooIsland,
                    Exit::Sky_To_InsideThunderhead,
                    Exit::Sky_To_LakeFloria_LakeFloriaStatue,
                    Exit::Sky_To_LanayruDesert_DesertEntranceStatue,
                    Exit::Sky_To_LanayruDesert_NorthDesertStatue,
                    Exit::Sky_To_LanayruDesert_StoneCacheStatue,
                    Exit::Sky_To_LanayruDesert_WestDesertStatue,
                    Exit::Sky_To_LanayruMines_LanayruMineEntryStatue,
                    Exit::Sky_To_OutsideFireSanctuary_InsideTheVolcanoStatue,
                    Exit::Sky_To_SealedGroundsSpiral_SealedGroundsStatue,
                    Exit::Sky_To_Skyloft,
                ],
                map_entrances: &[
                    Entrance::Sky_From_Skyloft,
                    Entrance::Sky_From_Skyloft_PastWaterfallCave,
                    Entrance::Sky_From_EldinVolcano_EldinEntranceStatue,
                    Entrance::Sky_From_EldinVolcano_TempleEntranceStatue,
                    Entrance::Sky_From_EldinVolcano_VolcanoEastStatue,
                    Entrance::Sky_From_EldinVolcano_VolcanoAscentStatue,
                    Entrance::Sky_From_DeepWoods_DeepWoodsStatue,
                    Entrance::Sky_From_DeepWoods_ForestTempleStatue,
                    Entrance::Sky_From_FaronWoods_FaronWoodsEntryStatue,
                    Entrance::Sky_From_FaronWoods_GreatTreeStatue,
                    Entrance::Sky_From_FaronWoods_InTheWoodsStatue,
                    Entrance::Sky_From_FaronWoods_ViewingPlatformStatue,
                    Entrance::Sky_From_FloriaWaterfall_FloriaWaterfallStatue,
                    Entrance::Sky_From_LakeFloria_LakeFloriaStatue,
                    Entrance::Sky_From_LanayruDesert_DesertEntranceStatue,
                    Entrance::Sky_From_LanayruDesert_NorthDesertStatue,
                    Entrance::Sky_From_LanayruDesert_StoneCacheStatue,
                    Entrance::Sky_From_LanayruDesert_WestDesertStatue,
                    Entrance::Sky_From_LanayruMines_LanayruMineEntryStatue,
                    Entrance::Sky_From_SandSeaDocks_AncientHarbor,
                    Entrance::Sky_From_BehindTheTemple_BehindTheTempleStatue,
                    Entrance::Sky_From_SealedGroundsSpiral_SealedGroundsStatue,
                    Entrance::Sky_From_InsideBambooIsland,
                    Entrance::Sky_From_InsideThunderhead,
                    Entrance::Sky_From_OutsideFireSanctuary_InsideTheVolcanoStatue,
                ],
                logic_exits: &[Area::Sky_BeedleIslandCage, Area::Sky_OutsideLumpyPumpkin],
                logic_entrances: &[Area::Sky_OutsideLumpyPumpkin],
            },
            Area::Sky_OutsideLumpyPumpkin => &AreaDef {
                name: "Outside Lumpy Pumpkin",
                full_name: "Sky - Outside Lumpy Pumpkin",
                region: Region::Sky,
                stage: Stage::Sky,
                time_of_day: None,
                can_sleep: false,
                locations: &[
                    Location::SkyCrystalOutsideLumpyPumpkin,
                    Location::SkyKinasCrystals,
                    Location::SkyLumpyPumpkinOutsideGoddessChest,
                ],
                map_exits: &[
                    Exit::Sky_To_LumpyPumpkin_North,
                    Exit::Sky_To_LumpyPumpkin_South_Right,
                    Exit::Sky_To_LumpyPumpkin_South_Left,
                ],
                map_entrances: &[
                    Entrance::Sky_From_LumpyPumpkin_North,
                    Entrance::Sky_From_LumpyPumpkin_South_Right,
                    Entrance::Sky_From_LumpyPumpkin_South_Left,
                ],
                logic_exits: &[Area::Sky_Field],
                logic_entrances: &[Area::Sky_Field],
            },
            Area::SkyKeepEntry_Main => &AreaDef {
                name: "Main",
                full_name: "Sky Keep Entry - Main",
                region: Region::SkyKeep,
                stage: Stage::SkyKeepEntry,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SkyKeepChestAfterDreadfuse,
                    Location::SkyKeepFirstChest,
                ],
                map_exits: &[Exit::SkyKeepEntry_To_Skyloft],
                map_entrances: &[Entrance::SkyKeepEntry_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::SkyloftSilentRealm_Trial => &AreaDef {
                name: "Trial",
                full_name: "Skyloft Silent Realm - Trial",
                region: Region::SkyloftSilentRealm,
                stage: Stage::SkyloftSilentRealm,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SkyloftSilentRealmStoneOfTrials],
                map_exits: &[Exit::SkyloftSilentRealm_To_Skyloft],
                map_entrances: &[Entrance::SkyloftSilentRealm_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::BertiesHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Bertie's House - Main",
                region: Region::SkyloftVillage,
                stage: Stage::BertiesHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[Location::SkyloftVillageBertiesCrystals],
                map_exits: &[Exit::BertiesHouse_To_Skyloft],
                map_entrances: &[Entrance::BertiesHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::GondosHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Gondo's House - Main",
                region: Region::SkyloftVillage,
                stage: Stage::GondosHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[],
                map_exits: &[Exit::GondosHouse_To_Skyloft],
                map_entrances: &[Entrance::GondosHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::MallarasHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Mallara's House - Main",
                region: Region::SkyloftVillage,
                stage: Stage::MallarasHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[Location::SkyloftVillageMallarasCrystals],
                map_exits: &[Exit::MallarasHouse_To_Skyloft],
                map_entrances: &[Entrance::MallarasHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::RupinsHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Rupin's House - Main",
                region: Region::SkyloftVillage,
                stage: Stage::RupinsHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[],
                map_exits: &[Exit::RupinsHouse_To_Skyloft],
                map_entrances: &[Entrance::RupinsHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::Skyloft_OutsideSkyloftVillage => &AreaDef {
                name: "Outside Skyloft Village",
                full_name: "Skyloft - Outside Skyloft Village",
                region: Region::SkyloftVillage,
                stage: Stage::Skyloft,
                time_of_day: None,
                can_sleep: false,
                locations: &[Location::SkyloftVillageCrystalNearPumpkinPatch],
                map_exits: &[
                    Exit::Skyloft_To_BatreauxHouse,
                    Exit::Skyloft_To_BertiesHouse,
                    Exit::Skyloft_To_GondosHouse,
                    Exit::Skyloft_To_MallarasHouse,
                    Exit::Skyloft_To_RupinsHouse,
                    Exit::Skyloft_To_SparrotsHouse,
                ],
                map_entrances: &[],
                logic_exits: &[
                    Area::Skyloft_CentralOutside,
                    Area::Skyloft_PastWaterfallCave,
                ],
                logic_entrances: &[Area::Skyloft_CentralOutside],
            },
            Area::SparrotsHouse_Main => &AreaDef {
                name: "Main",
                full_name: "Sparrot's House - Main",
                region: Region::SkyloftVillage,
                stage: Stage::SparrotsHouse,
                time_of_day: None,
                can_sleep: true,
                locations: &[Location::SkyloftVillageSparrotsCrystals],
                map_exits: &[Exit::SparrotsHouse_To_Skyloft],
                map_entrances: &[Entrance::SparrotsHouse_From_Skyloft],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::SkyviewBoss_Main => &AreaDef {
                name: "Main",
                full_name: "Skyview Boss - Main",
                region: Region::Skyview,
                stage: Stage::SkyviewBoss,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SkyviewGhirahimHeartContainer],
                map_exits: &[
                    Exit::SkyviewBoss_To_SkyviewSpring,
                    Exit::SkyviewBoss_To_SkyviewTemple,
                ],
                map_entrances: &[
                    Entrance::SkyviewBoss_From_SkyviewSpring,
                    Entrance::SkyviewBoss_From_SkyviewTemple,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::SkyviewSpring_Main => &AreaDef {
                name: "Main",
                full_name: "Skyview Spring - Main",
                region: Region::Skyview,
                stage: Stage::SkyviewSpring,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[Location::SkyviewRubyTablet],
                map_exits: &[
                    Exit::SkyviewSpring_To_DeepWoods,
                    Exit::SkyviewSpring_To_SkyviewBoss,
                ],
                map_entrances: &[Entrance::SkyviewSpring_From_SkyviewBoss],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::SkyviewTemple_BossDoorArea => &AreaDef {
                name: "Boss Door Area",
                full_name: "Skyview Temple - Boss Door Area",
                region: Region::Skyview,
                stage: Stage::SkyviewTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SkyviewBossKeyChest,
                    Location::SkyviewChestNearBossDoor,
                ],
                map_exits: &[Exit::SkyviewTemple_To_SkyviewBoss],
                map_entrances: &[Entrance::SkyviewTemple_From_SkyviewBoss],
                logic_exits: &[],
                logic_entrances: &[Area::SkyviewTemple_MainHub],
            },
            Area::SkyviewTemple_Entry => &AreaDef {
                name: "Entry",
                full_name: "Skyview Temple - Entry",
                region: Region::Skyview,
                stage: Stage::SkyviewTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::SkyviewTemple_To_DeepWoods],
                map_entrances: &[Entrance::SkyviewTemple_From_DeepWoods],
                logic_exits: &[Area::SkyviewTemple_FirstHub],
                logic_entrances: &[],
            },
            Area::SkyviewTemple_FirstHub => &AreaDef {
                name: "First Hub",
                full_name: "Skyview Temple - First Hub",
                region: Region::Skyview,
                stage: Stage::SkyviewTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SkyviewChestBehindTwoEyes,
                    Location::SkyviewChestOnTreeBranch,
                    Location::SkyviewDiggingSpotInCrawlspace,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::SkyviewTemple_MainHub],
                logic_entrances: &[Area::SkyviewTemple_Entry],
            },
            Area::SkyviewTemple_MainHub => &AreaDef {
                name: "Main Hub",
                full_name: "Skyview Temple - Main Hub",
                region: Region::Skyview,
                stage: Stage::SkyviewTemple,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::SkyviewBeetle,
                    Location::SkyviewChestBehindThreeEyes,
                    Location::SkyviewItemBehindBars,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::SkyviewTemple_BossDoorArea],
                logic_entrances: &[Area::SkyviewTemple_FirstHub],
            },
            Area::InsideThunderhead_Main => &AreaDef {
                name: "Main",
                full_name: "Inside Thunderhead - Main",
                region: Region::Thunderhead,
                stage: Stage::InsideThunderhead,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::ThunderheadBugHeaven10BugsIn3Minutes,
                    Location::ThunderheadBugHeavenGoddessChest,
                    Location::ThunderheadEastIslandChest,
                    Location::ThunderheadEastIslandGoddessChest,
                    Location::ThunderheadFirstGoddessChestOnMogmaMittsIsland,
                    Location::ThunderheadGoddessChestOnTopOfIsleOfSongs,
                    Location::ThunderheadGoddessChestOutsideIsleOfSongs,
                    Location::ThunderheadSongFromLevias,
                ],
                map_exits: &[
                    Exit::InsideThunderhead_To_IsleOfSongs,
                    Exit::InsideThunderhead_To_Sky,
                ],
                map_entrances: &[
                    Entrance::InsideThunderhead_From_Sky,
                    Entrance::InsideThunderhead_From_IsleOfSongs,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::IsleOfSongs_Main => &AreaDef {
                name: "Main",
                full_name: "Isle of Songs - Main",
                region: Region::Thunderhead,
                stage: Stage::IsleOfSongs,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::ThunderheadIsleOfSongsDinsPower,
                    Location::ThunderheadIsleOfSongsFaroresCourage,
                    Location::ThunderheadIsleOfSongsNayrusWisdom,
                ],
                map_exits: &[Exit::IsleOfSongs_To_InsideThunderhead],
                map_entrances: &[Entrance::IsleOfSongs_From_InsideThunderhead],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::InsideVolcanoSummit_Main => &AreaDef {
                name: "Main",
                full_name: "Inside Volcano Summit - Main",
                region: Region::VolcanoSummit,
                stage: Stage::InsideVolcanoSummit,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::VolcanoSummitBokoBasePouchChest,
                    Location::VolcanoSummitSmallChestInVolcanoSummit,
                ],
                map_exits: &[
                    Exit::InsideVolcanoSummit_To_EldinVolcano,
                    Exit::InsideVolcanoSummit_To_OutsideFireSanctuary,
                    Exit::InsideVolcanoSummit_To_VolcanoSummitWaterfall,
                ],
                map_entrances: &[
                    Entrance::InsideVolcanoSummit_From_EldinVolcano,
                    Entrance::InsideVolcanoSummit_From_OutsideFireSanctuary,
                    Entrance::InsideVolcanoSummit_From_VolcanoSummitWaterfall,
                ],
                logic_exits: &[],
                logic_entrances: &[],
            },
            Area::OutsideFireSanctuary_Middle => &AreaDef {
                name: "Middle",
                full_name: "Outside Fire Sanctuary - Middle",
                region: Region::VolcanoSummit,
                stage: Stage::OutsideFireSanctuary,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::VolcanoSummitGossipStoneOutsideFireSanctuary,
                    Location::VolcanoSummitItemBehindDigging,
                ],
                map_exits: &[],
                map_entrances: &[],
                logic_exits: &[Area::OutsideFireSanctuary_ToFireSanctuary],
                logic_entrances: &[Area::OutsideFireSanctuary_ToInsideSummit],
            },
            Area::OutsideFireSanctuary_ToFireSanctuary => &AreaDef {
                name: "To Fire Sanctuary",
                full_name: "Outside Fire Sanctuary - To Fire Sanctuary",
                region: Region::VolcanoSummit,
                stage: Stage::OutsideFireSanctuary,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[
                    Exit::OutsideFireSanctuary_To_FireSanctuaryA,
                    Exit::OutsideFireSanctuary_To_Sky_InsideTheVolcanoStatue,
                ],
                map_entrances: &[
                    Entrance::OutsideFireSanctuary_From_FireSanctuaryA,
                    Entrance::OutsideFireSanctuary_From_Sky_InsideTheVolcanoStatue,
                ],
                logic_exits: &[],
                logic_entrances: &[Area::OutsideFireSanctuary_Middle],
            },
            Area::OutsideFireSanctuary_ToInsideSummit => &AreaDef {
                name: "To Inside Summit",
                full_name: "Outside Fire Sanctuary - To Inside Summit",
                region: Region::VolcanoSummit,
                stage: Stage::OutsideFireSanctuary,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[],
                map_exits: &[Exit::OutsideFireSanctuary_To_InsideVolcanoSummit],
                map_entrances: &[Entrance::OutsideFireSanctuary_From_InsideVolcanoSummit],
                logic_exits: &[Area::OutsideFireSanctuary_Middle],
                logic_entrances: &[],
            },
            Area::VolcanoSummitWaterfall_Main => &AreaDef {
                name: "Main",
                full_name: "Volcano Summit Waterfall - Main",
                region: Region::VolcanoSummit,
                stage: Stage::VolcanoSummitWaterfall,
                time_of_day: Some(ForceToD::Day),
                can_sleep: false,
                locations: &[
                    Location::VolcanoSummitChestBehindBombableWallInWaterfallArea,
                    Location::VolcanoSummitGossipStoneInWaterfallArea,
                ],
                map_exits: &[Exit::VolcanoSummitWaterfall_To_InsideVolcanoSummit],
                map_entrances: &[Entrance::VolcanoSummitWaterfall_From_InsideVolcanoSummit],
                logic_exits: &[],
                logic_entrances: &[],
            },
        }
    }
    pub fn name(&self) -> &'static str {
        self.get().name
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum DoubleDoor {
    No,
    Left,
    Right,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum ConnectionShuffleType {
    Never,
    Other,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum DoorConnection<T: Copy> {
    No,
    Left(T),
    Right(T),
}
impl<T: Copy> DoorConnection<T> {
    pub fn is_no(&self) -> bool {
        matches!(self, DoorConnection::No)
    }
    pub fn has_left_neighbor(&self) -> bool {
        matches!(self, DoorConnection::Left(_))
    }
    pub fn has_right_neighbor(&self) -> bool {
        matches!(self, DoorConnection::Right(_))
    }
    pub fn get_left_neighbor(&self) -> Option<T> {
        match self {
            DoorConnection::Left(val) => Some(*val),
            _ => None,
        }
    }
    pub fn get_right_neighbor(&self) -> Option<T> {
        match self {
            DoorConnection::Right(val) => Some(*val),
            _ => None,
        }
    }
    pub fn is_left_door(&self) -> bool {
        self.has_right_neighbor()
    }
    pub fn is_right_door(&self) -> bool {
        self.has_left_neighbor()
    }
    pub fn is_opposite<U: Copy>(&self, other: DoorConnection<U>) -> bool {
        match (self, other) {
            (DoorConnection::No, DoorConnection::No) => true,
            (DoorConnection::Left(_), DoorConnection::Right(_)) => true,
            (DoorConnection::Right(_), DoorConnection::Left(_)) => true,
            _ => false,
        }
    }
    pub fn is_same<U: Copy>(&self, other: DoorConnection<U>) -> bool {
        match (self, other) {
            (DoorConnection::No, DoorConnection::No) => true,
            (DoorConnection::Left(_), DoorConnection::Left(_)) => true,
            (DoorConnection::Right(_), DoorConnection::Right(_)) => true,
            _ => false,
        }
    }
}
pub struct ExitPatchInfo {
    pub stage_name: &'static str,
    pub room: u8,
    pub exit_idx: u8,
}
pub struct ExitDef {
    pub area: Area,
    pub to: Area,
    pub disambiguation: Option<&'static str>,
    pub display_name: &'static str,
    pub door_connection: DoorConnection<Exit>,
    pub connection_shuffle_type: ConnectionShuffleType,
    pub coupled_entrance: Option<Entrance>,
    pub vanilla_entrance: Option<Entrance>,
    pub patch_info: &'static [ExitPatchInfo],
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Exit {
    AncientCistern_To_AncientCisternBoss,
    AncientCistern_To_FloriaWaterfall,
    AncientCisternBoss_To_AncientCisternCandleRoom,
    BatreauxHouse_To_Skyloft,
    BeedlesShop_To_Sky_Night,
    BeedlesShop_To_Skyloft_Day,
    Bazaar_To_Skyloft_North,
    Bazaar_To_Skyloft_South,
    Bazaar_To_Skyloft_West,
    ParrowAndOriellesHouse_To_Skyloft,
    PeatricesHouse_To_Skyloft,
    PipersHouse_To_Skyloft,
    Skyloft_To_Bazaar_North,
    Skyloft_To_Bazaar_South,
    Skyloft_To_Bazaar_West,
    Skyloft_To_BeedlesShop_Day,
    Skyloft_To_ParrowAndOriellesHouse,
    Skyloft_To_PeatricesHouse,
    Skyloft_To_PipersHouse,
    Skyloft_To_Sky,
    Skyloft_To_SkyloftSilentRealm,
    Skyloft_To_WaterfallCave_Upper,
    Skyloft_To_WrynasHouse,
    Skyloft_To_Sky_PastWaterfallCave,
    Skyloft_To_WaterfallCave_Lower,
    Skyloft_To_SkyKeepEntry,
    WaterfallCave_To_Skyloft_Upper,
    WaterfallCave_To_Skyloft_Lower,
    WrynasHouse_To_Skyloft,
    EarthTemple_To_EarthTempleBoss,
    EarthTemple_To_EldinVolcano,
    EarthTempleBoss_To_EarthTempleSpring,
    EarthTempleSpring_To_EldinVolcano,
    EldinSilentRealm_To_EldinVolcano,
    EldinVolcano_To_Sky_EldinEntranceStatue,
    EldinVolcano_To_InsideVolcanoSummit,
    EldinVolcano_To_ThrillDiggerCave,
    EldinVolcano_To_EarthTemple,
    EldinVolcano_To_Sky_TempleEntranceStatue,
    EldinVolcano_To_MogmaTurf_Skydive,
    EldinVolcano_To_Sky_VolcanoEastStatue,
    EldinVolcano_To_EldinSilentRealm,
    EldinVolcano_To_Sky_VolcanoAscentStatue,
    ThrillDiggerCave_To_EldinVolcano,
    FaronSilentRealm_To_FaronWoods,
    DeepWoods_To_FaronWoods,
    DeepWoods_To_Sky_DeepWoodsStatue,
    DeepWoods_To_Sky_ForestTempleStatue,
    DeepWoods_To_SkyviewTemple,
    FaronWoods_To_BehindTheTemple,
    FaronWoods_To_Sky_FaronWoodsEntryStatue,
    FaronWoods_To_GreatTree_LowerPlatform,
    FaronWoods_To_GreatTree_UpperPlatform,
    FaronWoods_To_GreatTree_Top,
    FaronWoods_To_Sky_GreatTreeStatue,
    FaronWoods_To_DeepWoods,
    FaronWoods_To_FaronSilentRealm,
    FaronWoods_To_GreatTree_Tunnel,
    FaronWoods_To_LakeFloria,
    FaronWoods_To_Sky_InTheWoodsStatue,
    FaronWoods_To_Sky_ViewingPlatformStatue,
    GreatTree_To_FaronWoods_Tunnel,
    GreatTree_To_FaronWoods_LowerPlatform,
    GreatTree_To_FaronWoods_UpperPlatform,
    GreatTree_To_FaronWoods_Top,
    FireSanctuaryA_To_OutsideFireSanctuary,
    FireSanctuaryA_To_FireSanctuaryBoss,
    FireSanctuaryA_To_FireSanctuaryB,
    FireSanctuaryB_To_FireSanctuaryA,
    FireSanctuaryBoss_To_FireSanctuaryFlameRoom,
    InsideGoddessStatue_To_Skyloft,
    KnightAcademy_To_Skyloft_Lower_Right,
    KnightAcademy_To_Skyloft_Lower_Left,
    KnightAcademy_To_Skyloft_Upper_Right,
    KnightAcademy_To_Skyloft_Upper_Left,
    Skyloft_To_InsideGoddessStatue,
    Skyloft_To_KnightAcademy_Chimney,
    Skyloft_To_KnightAcademy_Lower_Right,
    Skyloft_To_KnightAcademy_Lower_Left,
    Skyloft_To_KnightAcademy_Upper_Right,
    Skyloft_To_KnightAcademy_Upper_Left,
    Skyloft_To_SparringHall_Right,
    Skyloft_To_SparringHall_Left,
    SparringHall_To_Skyloft_Right,
    SparringHall_To_Skyloft_Left,
    FaroresLair_To_FloriaWaterfall,
    FaroresLair_To_LakeFloria,
    FloriaWaterfall_To_AncientCistern,
    FloriaWaterfall_To_FaronWoods,
    FloriaWaterfall_To_FaroresLair,
    FloriaWaterfall_To_Sky_FloriaWaterfallStatue,
    LakeFloria_To_Sky_LakeFloriaStatue,
    LakeFloria_To_FaroresLair,
    LanayruCaves_To_LanayruDesert,
    LanayruCaves_To_LanayruMines,
    LanayruCaves_To_SandSeaDocks,
    FireNode_To_LanayruDesert,
    LanayruDesert_To_LanayruMines,
    LanayruDesert_To_Sky_DesertEntranceStatue,
    LanayruDesert_To_FireNode,
    LanayruDesert_To_LanayruMiningFacilityA,
    LanayruDesert_To_LanayruSilentRealm,
    LanayruDesert_To_LightningNode,
    LanayruDesert_To_Sky_NorthDesertStatue,
    LanayruDesert_To_Sky_StoneCacheStatue,
    LanayruDesert_To_TempleOfTime_End,
    LanayruDesert_To_LanayruCaves,
    LanayruDesert_To_Sky_WestDesertStatue,
    LanayruDesert_To_TempleOfTime_Start,
    LightningNode_To_LanayruDesert,
    TempleOfTime_To_LanayruDesert_End,
    TempleOfTime_To_LanayruDesert_Start,
    LanayruMines_To_Sky_LanayruMineEntryStatue,
    LanayruMines_To_LanayruCaves,
    LanayruMines_To_LanayruDesert,
    LanayruMiningFacilityA_To_LanayruDesert,
    LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub2,
    LanayruMiningFacilityA_To_LanayruMiningFacilityB_HubW,
    LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub,
    LanayruMiningFacilityB_To_LanayruMiningFacilityBoss,
    LanayruMiningFacilityBoss_To_LanayruMiningFacilityToToT,
    LanayruMiningFacilityToToT_To_TempleOfTime,
    InsidePiratesStronghold_To_OutsidePiratesStronghold_End,
    InsidePiratesStronghold_To_OutsidePiratesStronghold_Beginning,
    OutsidePiratesStronghold_To_InsidePiratesStronghold_End,
    OutsidePiratesStronghold_To_InsidePiratesStronghold_Beginning,
    OutsidePiratesStronghold_To_SandSea,
    SandSea_To_OutsidePiratesStronghold,
    SandSea_To_SandSeaDocks,
    SandSea_To_Sandship,
    SandSea_To_Shipyard,
    SandSea_To_SkippersRetreat,
    SandSeaDocks_To_SandSea,
    SandSeaDocks_To_Sky_AncientHarbor,
    SandSeaDocks_To_LanayruCaves,
    Shipyard_To_ShipyardConstructionBay_Upper,
    Shipyard_To_SandSea,
    Shipyard_To_ShipyardConstructionBay_Lower,
    ShipyardConstructionBay_To_Shipyard_Lower,
    ShipyardConstructionBay_To_Shipyard_Upper,
    SkippersRetreat_To_SkippersShack,
    SkippersRetreat_To_SandSea,
    SkippersShack_To_SkippersRetreat,
    LanayruSilentRealm_To_LanayruDesert,
    MogmaTurf_To_EldinVolcano_EndVent,
    MogmaTurf_To_EldinVolcano_StartVent,
    Sandship_To_SandSea,
    Sandship_To_SandshipBoss,
    BehindTheTemple_To_FaronWoods,
    BehindTheTemple_To_SealedGroundsSpiral,
    BehindTheTemple_To_SealedTemple,
    BehindTheTemple_To_Sky_BehindTheTempleStatue,
    SealedGroundsSpiral_To_SealedTemple,
    SealedGroundsSpiral_To_Sky_SealedGroundsStatue,
    SealedTemple_To_BehindTheTemple,
    SealedTemple_To_HyliasTemple,
    SealedTemple_To_SealedGroundsSpiral,
    InsideBambooIsland_To_Sky,
    LumpyPumpkin_To_Sky_North,
    LumpyPumpkin_To_Sky_South_Right,
    LumpyPumpkin_To_Sky_South_Left,
    Sky_To_BeedlesShop_Night,
    Sky_To_BehindTheTemple_BehindTheTempleStatue,
    Sky_To_DeepWoods_DeepWoodsStatue,
    Sky_To_DeepWoods_ForestTempleStatue,
    Sky_To_EldinVolcano_EldinEntranceStatue,
    Sky_To_EldinVolcano_TempleEntranceStatue,
    Sky_To_EldinVolcano_VolcanoEastStatue,
    Sky_To_EldinVolcano_VolcanoAscentStatue,
    Sky_To_FaronWoods_FaronWoodsEntryStatue,
    Sky_To_FaronWoods_GreatTreeStatue,
    Sky_To_FaronWoods_InTheWoodsStatue,
    Sky_To_FaronWoods_ViewingPlatformStatue,
    Sky_To_FloriaWaterfall_FloriaWaterfallStatue,
    Sky_To_InsideBambooIsland,
    Sky_To_InsideThunderhead,
    Sky_To_LakeFloria_LakeFloriaStatue,
    Sky_To_LanayruDesert_DesertEntranceStatue,
    Sky_To_LanayruDesert_NorthDesertStatue,
    Sky_To_LanayruDesert_StoneCacheStatue,
    Sky_To_LanayruDesert_WestDesertStatue,
    Sky_To_LanayruMines_LanayruMineEntryStatue,
    Sky_To_OutsideFireSanctuary_InsideTheVolcanoStatue,
    Sky_To_SealedGroundsSpiral_SealedGroundsStatue,
    Sky_To_Skyloft,
    Sky_To_LumpyPumpkin_North,
    Sky_To_LumpyPumpkin_South_Right,
    Sky_To_LumpyPumpkin_South_Left,
    SkyKeepEntry_To_Skyloft,
    SkyloftSilentRealm_To_Skyloft,
    BertiesHouse_To_Skyloft,
    GondosHouse_To_Skyloft,
    MallarasHouse_To_Skyloft,
    RupinsHouse_To_Skyloft,
    Skyloft_To_BatreauxHouse,
    Skyloft_To_BertiesHouse,
    Skyloft_To_GondosHouse,
    Skyloft_To_MallarasHouse,
    Skyloft_To_RupinsHouse,
    Skyloft_To_SparrotsHouse,
    SparrotsHouse_To_Skyloft,
    SkyviewBoss_To_SkyviewSpring,
    SkyviewBoss_To_SkyviewTemple,
    SkyviewSpring_To_DeepWoods,
    SkyviewSpring_To_SkyviewBoss,
    SkyviewTemple_To_SkyviewBoss,
    SkyviewTemple_To_DeepWoods,
    InsideThunderhead_To_IsleOfSongs,
    InsideThunderhead_To_Sky,
    IsleOfSongs_To_InsideThunderhead,
    InsideVolcanoSummit_To_EldinVolcano,
    InsideVolcanoSummit_To_OutsideFireSanctuary,
    InsideVolcanoSummit_To_VolcanoSummitWaterfall,
    OutsideFireSanctuary_To_FireSanctuaryA,
    OutsideFireSanctuary_To_Sky_InsideTheVolcanoStatue,
    OutsideFireSanctuary_To_InsideVolcanoSummit,
    VolcanoSummitWaterfall_To_InsideVolcanoSummit,
}
impl From<Exit> for usize {
    fn from(val: Exit) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Exit {
    const ALL: &'static [Exit] = &[
        Exit::AncientCistern_To_AncientCisternBoss,
        Exit::AncientCistern_To_FloriaWaterfall,
        Exit::AncientCisternBoss_To_AncientCisternCandleRoom,
        Exit::BatreauxHouse_To_Skyloft,
        Exit::BeedlesShop_To_Sky_Night,
        Exit::BeedlesShop_To_Skyloft_Day,
        Exit::Bazaar_To_Skyloft_North,
        Exit::Bazaar_To_Skyloft_South,
        Exit::Bazaar_To_Skyloft_West,
        Exit::ParrowAndOriellesHouse_To_Skyloft,
        Exit::PeatricesHouse_To_Skyloft,
        Exit::PipersHouse_To_Skyloft,
        Exit::Skyloft_To_Bazaar_North,
        Exit::Skyloft_To_Bazaar_South,
        Exit::Skyloft_To_Bazaar_West,
        Exit::Skyloft_To_BeedlesShop_Day,
        Exit::Skyloft_To_ParrowAndOriellesHouse,
        Exit::Skyloft_To_PeatricesHouse,
        Exit::Skyloft_To_PipersHouse,
        Exit::Skyloft_To_Sky,
        Exit::Skyloft_To_SkyloftSilentRealm,
        Exit::Skyloft_To_WaterfallCave_Upper,
        Exit::Skyloft_To_WrynasHouse,
        Exit::Skyloft_To_Sky_PastWaterfallCave,
        Exit::Skyloft_To_WaterfallCave_Lower,
        Exit::Skyloft_To_SkyKeepEntry,
        Exit::WaterfallCave_To_Skyloft_Upper,
        Exit::WaterfallCave_To_Skyloft_Lower,
        Exit::WrynasHouse_To_Skyloft,
        Exit::EarthTemple_To_EarthTempleBoss,
        Exit::EarthTemple_To_EldinVolcano,
        Exit::EarthTempleBoss_To_EarthTempleSpring,
        Exit::EarthTempleSpring_To_EldinVolcano,
        Exit::EldinSilentRealm_To_EldinVolcano,
        Exit::EldinVolcano_To_Sky_EldinEntranceStatue,
        Exit::EldinVolcano_To_InsideVolcanoSummit,
        Exit::EldinVolcano_To_ThrillDiggerCave,
        Exit::EldinVolcano_To_EarthTemple,
        Exit::EldinVolcano_To_Sky_TempleEntranceStatue,
        Exit::EldinVolcano_To_MogmaTurf_Skydive,
        Exit::EldinVolcano_To_Sky_VolcanoEastStatue,
        Exit::EldinVolcano_To_EldinSilentRealm,
        Exit::EldinVolcano_To_Sky_VolcanoAscentStatue,
        Exit::ThrillDiggerCave_To_EldinVolcano,
        Exit::FaronSilentRealm_To_FaronWoods,
        Exit::DeepWoods_To_FaronWoods,
        Exit::DeepWoods_To_Sky_DeepWoodsStatue,
        Exit::DeepWoods_To_Sky_ForestTempleStatue,
        Exit::DeepWoods_To_SkyviewTemple,
        Exit::FaronWoods_To_BehindTheTemple,
        Exit::FaronWoods_To_Sky_FaronWoodsEntryStatue,
        Exit::FaronWoods_To_GreatTree_LowerPlatform,
        Exit::FaronWoods_To_GreatTree_UpperPlatform,
        Exit::FaronWoods_To_GreatTree_Top,
        Exit::FaronWoods_To_Sky_GreatTreeStatue,
        Exit::FaronWoods_To_DeepWoods,
        Exit::FaronWoods_To_FaronSilentRealm,
        Exit::FaronWoods_To_GreatTree_Tunnel,
        Exit::FaronWoods_To_LakeFloria,
        Exit::FaronWoods_To_Sky_InTheWoodsStatue,
        Exit::FaronWoods_To_Sky_ViewingPlatformStatue,
        Exit::GreatTree_To_FaronWoods_Tunnel,
        Exit::GreatTree_To_FaronWoods_LowerPlatform,
        Exit::GreatTree_To_FaronWoods_UpperPlatform,
        Exit::GreatTree_To_FaronWoods_Top,
        Exit::FireSanctuaryA_To_OutsideFireSanctuary,
        Exit::FireSanctuaryA_To_FireSanctuaryBoss,
        Exit::FireSanctuaryA_To_FireSanctuaryB,
        Exit::FireSanctuaryB_To_FireSanctuaryA,
        Exit::FireSanctuaryBoss_To_FireSanctuaryFlameRoom,
        Exit::InsideGoddessStatue_To_Skyloft,
        Exit::KnightAcademy_To_Skyloft_Lower_Right,
        Exit::KnightAcademy_To_Skyloft_Lower_Left,
        Exit::KnightAcademy_To_Skyloft_Upper_Right,
        Exit::KnightAcademy_To_Skyloft_Upper_Left,
        Exit::Skyloft_To_InsideGoddessStatue,
        Exit::Skyloft_To_KnightAcademy_Chimney,
        Exit::Skyloft_To_KnightAcademy_Lower_Right,
        Exit::Skyloft_To_KnightAcademy_Lower_Left,
        Exit::Skyloft_To_KnightAcademy_Upper_Right,
        Exit::Skyloft_To_KnightAcademy_Upper_Left,
        Exit::Skyloft_To_SparringHall_Right,
        Exit::Skyloft_To_SparringHall_Left,
        Exit::SparringHall_To_Skyloft_Right,
        Exit::SparringHall_To_Skyloft_Left,
        Exit::FaroresLair_To_FloriaWaterfall,
        Exit::FaroresLair_To_LakeFloria,
        Exit::FloriaWaterfall_To_AncientCistern,
        Exit::FloriaWaterfall_To_FaronWoods,
        Exit::FloriaWaterfall_To_FaroresLair,
        Exit::FloriaWaterfall_To_Sky_FloriaWaterfallStatue,
        Exit::LakeFloria_To_Sky_LakeFloriaStatue,
        Exit::LakeFloria_To_FaroresLair,
        Exit::LanayruCaves_To_LanayruDesert,
        Exit::LanayruCaves_To_LanayruMines,
        Exit::LanayruCaves_To_SandSeaDocks,
        Exit::FireNode_To_LanayruDesert,
        Exit::LanayruDesert_To_LanayruMines,
        Exit::LanayruDesert_To_Sky_DesertEntranceStatue,
        Exit::LanayruDesert_To_FireNode,
        Exit::LanayruDesert_To_LanayruMiningFacilityA,
        Exit::LanayruDesert_To_LanayruSilentRealm,
        Exit::LanayruDesert_To_LightningNode,
        Exit::LanayruDesert_To_Sky_NorthDesertStatue,
        Exit::LanayruDesert_To_Sky_StoneCacheStatue,
        Exit::LanayruDesert_To_TempleOfTime_End,
        Exit::LanayruDesert_To_LanayruCaves,
        Exit::LanayruDesert_To_Sky_WestDesertStatue,
        Exit::LanayruDesert_To_TempleOfTime_Start,
        Exit::LightningNode_To_LanayruDesert,
        Exit::TempleOfTime_To_LanayruDesert_End,
        Exit::TempleOfTime_To_LanayruDesert_Start,
        Exit::LanayruMines_To_Sky_LanayruMineEntryStatue,
        Exit::LanayruMines_To_LanayruCaves,
        Exit::LanayruMines_To_LanayruDesert,
        Exit::LanayruMiningFacilityA_To_LanayruDesert,
        Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub2,
        Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_HubW,
        Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub,
        Exit::LanayruMiningFacilityB_To_LanayruMiningFacilityBoss,
        Exit::LanayruMiningFacilityBoss_To_LanayruMiningFacilityToToT,
        Exit::LanayruMiningFacilityToToT_To_TempleOfTime,
        Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_End,
        Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_Beginning,
        Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_End,
        Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_Beginning,
        Exit::OutsidePiratesStronghold_To_SandSea,
        Exit::SandSea_To_OutsidePiratesStronghold,
        Exit::SandSea_To_SandSeaDocks,
        Exit::SandSea_To_Sandship,
        Exit::SandSea_To_Shipyard,
        Exit::SandSea_To_SkippersRetreat,
        Exit::SandSeaDocks_To_SandSea,
        Exit::SandSeaDocks_To_Sky_AncientHarbor,
        Exit::SandSeaDocks_To_LanayruCaves,
        Exit::Shipyard_To_ShipyardConstructionBay_Upper,
        Exit::Shipyard_To_SandSea,
        Exit::Shipyard_To_ShipyardConstructionBay_Lower,
        Exit::ShipyardConstructionBay_To_Shipyard_Lower,
        Exit::ShipyardConstructionBay_To_Shipyard_Upper,
        Exit::SkippersRetreat_To_SkippersShack,
        Exit::SkippersRetreat_To_SandSea,
        Exit::SkippersShack_To_SkippersRetreat,
        Exit::LanayruSilentRealm_To_LanayruDesert,
        Exit::MogmaTurf_To_EldinVolcano_EndVent,
        Exit::MogmaTurf_To_EldinVolcano_StartVent,
        Exit::Sandship_To_SandSea,
        Exit::Sandship_To_SandshipBoss,
        Exit::BehindTheTemple_To_FaronWoods,
        Exit::BehindTheTemple_To_SealedGroundsSpiral,
        Exit::BehindTheTemple_To_SealedTemple,
        Exit::BehindTheTemple_To_Sky_BehindTheTempleStatue,
        Exit::SealedGroundsSpiral_To_SealedTemple,
        Exit::SealedGroundsSpiral_To_Sky_SealedGroundsStatue,
        Exit::SealedTemple_To_BehindTheTemple,
        Exit::SealedTemple_To_HyliasTemple,
        Exit::SealedTemple_To_SealedGroundsSpiral,
        Exit::InsideBambooIsland_To_Sky,
        Exit::LumpyPumpkin_To_Sky_North,
        Exit::LumpyPumpkin_To_Sky_South_Right,
        Exit::LumpyPumpkin_To_Sky_South_Left,
        Exit::Sky_To_BeedlesShop_Night,
        Exit::Sky_To_BehindTheTemple_BehindTheTempleStatue,
        Exit::Sky_To_DeepWoods_DeepWoodsStatue,
        Exit::Sky_To_DeepWoods_ForestTempleStatue,
        Exit::Sky_To_EldinVolcano_EldinEntranceStatue,
        Exit::Sky_To_EldinVolcano_TempleEntranceStatue,
        Exit::Sky_To_EldinVolcano_VolcanoEastStatue,
        Exit::Sky_To_EldinVolcano_VolcanoAscentStatue,
        Exit::Sky_To_FaronWoods_FaronWoodsEntryStatue,
        Exit::Sky_To_FaronWoods_GreatTreeStatue,
        Exit::Sky_To_FaronWoods_InTheWoodsStatue,
        Exit::Sky_To_FaronWoods_ViewingPlatformStatue,
        Exit::Sky_To_FloriaWaterfall_FloriaWaterfallStatue,
        Exit::Sky_To_InsideBambooIsland,
        Exit::Sky_To_InsideThunderhead,
        Exit::Sky_To_LakeFloria_LakeFloriaStatue,
        Exit::Sky_To_LanayruDesert_DesertEntranceStatue,
        Exit::Sky_To_LanayruDesert_NorthDesertStatue,
        Exit::Sky_To_LanayruDesert_StoneCacheStatue,
        Exit::Sky_To_LanayruDesert_WestDesertStatue,
        Exit::Sky_To_LanayruMines_LanayruMineEntryStatue,
        Exit::Sky_To_OutsideFireSanctuary_InsideTheVolcanoStatue,
        Exit::Sky_To_SealedGroundsSpiral_SealedGroundsStatue,
        Exit::Sky_To_Skyloft,
        Exit::Sky_To_LumpyPumpkin_North,
        Exit::Sky_To_LumpyPumpkin_South_Right,
        Exit::Sky_To_LumpyPumpkin_South_Left,
        Exit::SkyKeepEntry_To_Skyloft,
        Exit::SkyloftSilentRealm_To_Skyloft,
        Exit::BertiesHouse_To_Skyloft,
        Exit::GondosHouse_To_Skyloft,
        Exit::MallarasHouse_To_Skyloft,
        Exit::RupinsHouse_To_Skyloft,
        Exit::Skyloft_To_BatreauxHouse,
        Exit::Skyloft_To_BertiesHouse,
        Exit::Skyloft_To_GondosHouse,
        Exit::Skyloft_To_MallarasHouse,
        Exit::Skyloft_To_RupinsHouse,
        Exit::Skyloft_To_SparrotsHouse,
        Exit::SparrotsHouse_To_Skyloft,
        Exit::SkyviewBoss_To_SkyviewSpring,
        Exit::SkyviewBoss_To_SkyviewTemple,
        Exit::SkyviewSpring_To_DeepWoods,
        Exit::SkyviewSpring_To_SkyviewBoss,
        Exit::SkyviewTemple_To_SkyviewBoss,
        Exit::SkyviewTemple_To_DeepWoods,
        Exit::InsideThunderhead_To_IsleOfSongs,
        Exit::InsideThunderhead_To_Sky,
        Exit::IsleOfSongs_To_InsideThunderhead,
        Exit::InsideVolcanoSummit_To_EldinVolcano,
        Exit::InsideVolcanoSummit_To_OutsideFireSanctuary,
        Exit::InsideVolcanoSummit_To_VolcanoSummitWaterfall,
        Exit::OutsideFireSanctuary_To_FireSanctuaryA,
        Exit::OutsideFireSanctuary_To_Sky_InsideTheVolcanoStatue,
        Exit::OutsideFireSanctuary_To_InsideVolcanoSummit,
        Exit::VolcanoSummitWaterfall_To_InsideVolcanoSummit,
    ];
}
impl Exit {
    pub fn get(&self) -> &'static ExitDef {
        match self {
            Exit::AncientCistern_To_AncientCisternBoss => &ExitDef {
                area: Area::AncientCistern_BeforeBossDoor,
                to: Area::AncientCisternBoss_Main,
                disambiguation: None,
                display_name: "Ancient Cistern to Ancient Cistern Boss",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::AncientCisternBoss_From_AncientCistern),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::AncientCistern_To_FloriaWaterfall => &ExitDef {
                area: Area::AncientCistern_MainHub,
                to: Area::FloriaWaterfall_Main,
                disambiguation: None,
                display_name: "Ancient Cistern to Floria Waterfall",
                coupled_entrance: Some(Entrance::AncientCistern_From_FloriaWaterfall),
                vanilla_entrance: Some(Entrance::FloriaWaterfall_From_AncientCistern),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "D101",
                        room: 0u8,
                        exit_idx: 2u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D101",
                        room: 0u8,
                        exit_idx: 3u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D101",
                        room: 3u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D101",
                        room: 4u8,
                        exit_idx: 2u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D101",
                        room: 5u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "B101_1",
                        room: 0u8,
                        exit_idx: 3u8,
                    },
                ],
            },
            Exit::AncientCisternBoss_To_AncientCisternCandleRoom => &ExitDef {
                area: Area::AncientCisternBoss_Main,
                to: Area::AncientCisternCandleRoom_Main,
                disambiguation: None,
                display_name: "Ancient Cistern Boss to Ancient Cistern Candle Room",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::AncientCisternCandleRoom_From_AncientCisternBoss),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::BatreauxHouse_To_Skyloft => &ExitDef {
                area: Area::BatreauxHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Batreaux' House to Skyloft",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Skyloft_From_BatreauxHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F012r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::BeedlesShop_To_Sky_Night => &ExitDef {
                area: Area::BeedlesShop_Main,
                to: Area::Sky_BeedlesSkyHome,
                disambiguation: Some("Night"),
                display_name: "Beedle's Shop to Sky (Night)",
                coupled_entrance: Some(Entrance::BeedlesShop_From_Sky_Night),
                vanilla_entrance: Some(Entrance::Sky_From_BeedlesShop_Night),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F002r",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::BeedlesShop_To_Skyloft_Day => &ExitDef {
                area: Area::BeedlesShop_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: Some("Day"),
                display_name: "Beedle's Shop to Skyloft (Day)",
                coupled_entrance: Some(Entrance::BeedlesShop_From_Skyloft_Day),
                vanilla_entrance: Some(Entrance::Skyloft_From_BeedlesShop_Day),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "F002r",
                        room: 0u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "F002r",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                ],
            },
            Exit::Bazaar_To_Skyloft_North => &ExitDef {
                area: Area::Bazaar_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: Some("North"),
                display_name: "Bazaar to Skyloft (North)",
                coupled_entrance: Some(Entrance::Bazaar_From_Skyloft_North),
                vanilla_entrance: Some(Entrance::Skyloft_From_Bazaar_North),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F004r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::Bazaar_To_Skyloft_South => &ExitDef {
                area: Area::Bazaar_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: Some("South"),
                display_name: "Bazaar to Skyloft (South)",
                coupled_entrance: Some(Entrance::Bazaar_From_Skyloft_South),
                vanilla_entrance: Some(Entrance::Skyloft_From_Bazaar_South),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F004r",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::Bazaar_To_Skyloft_West => &ExitDef {
                area: Area::Bazaar_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: Some("West"),
                display_name: "Bazaar to Skyloft (West)",
                coupled_entrance: Some(Entrance::Bazaar_From_Skyloft_West),
                vanilla_entrance: Some(Entrance::Skyloft_From_Bazaar_West),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F004r",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::ParrowAndOriellesHouse_To_Skyloft => &ExitDef {
                area: Area::ParrowAndOriellesHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Parrow and Orielle's House to Skyloft",
                coupled_entrance: Some(Entrance::ParrowAndOriellesHouse_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_ParrowAndOriellesHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F005r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::PeatricesHouse_To_Skyloft => &ExitDef {
                area: Area::PeatricesHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Peatrice's House to Skyloft",
                coupled_entrance: Some(Entrance::PeatricesHouse_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_PeatricesHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F018r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::PipersHouse_To_Skyloft => &ExitDef {
                area: Area::PipersHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Piper's House to Skyloft",
                coupled_entrance: Some(Entrance::PipersHouse_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_PipersHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F007r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::Skyloft_To_Bazaar_North => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::Bazaar_Main,
                disambiguation: Some("North"),
                display_name: "Skyloft to Bazaar (North)",
                coupled_entrance: Some(Entrance::Skyloft_From_Bazaar_North),
                vanilla_entrance: Some(Entrance::Bazaar_From_Skyloft_North),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::Skyloft_To_Bazaar_South => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::Bazaar_Main,
                disambiguation: Some("South"),
                display_name: "Skyloft to Bazaar (South)",
                coupled_entrance: Some(Entrance::Skyloft_From_Bazaar_South),
                vanilla_entrance: Some(Entrance::Bazaar_From_Skyloft_South),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::Skyloft_To_Bazaar_West => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::Bazaar_Main,
                disambiguation: Some("West"),
                display_name: "Skyloft to Bazaar (West)",
                coupled_entrance: Some(Entrance::Skyloft_From_Bazaar_West),
                vanilla_entrance: Some(Entrance::Bazaar_From_Skyloft_West),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 19u8,
                }],
            },
            Exit::Skyloft_To_BeedlesShop_Day => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::BeedlesShop_Main,
                disambiguation: Some("Day"),
                display_name: "Skyloft to Beedle's Shop (Day)",
                coupled_entrance: Some(Entrance::Skyloft_From_BeedlesShop_Day),
                vanilla_entrance: Some(Entrance::BeedlesShop_From_Skyloft_Day),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 26u8,
                }],
            },
            Exit::Skyloft_To_ParrowAndOriellesHouse => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::ParrowAndOriellesHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Parrow and Orielle's House",
                coupled_entrance: Some(Entrance::Skyloft_From_ParrowAndOriellesHouse),
                vanilla_entrance: Some(Entrance::ParrowAndOriellesHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 31u8,
                }],
            },
            Exit::Skyloft_To_PeatricesHouse => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::PeatricesHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Peatrice's House",
                coupled_entrance: Some(Entrance::Skyloft_From_PeatricesHouse),
                vanilla_entrance: Some(Entrance::PeatricesHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 38u8,
                }],
            },
            Exit::Skyloft_To_PipersHouse => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::PipersHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Piper's House",
                coupled_entrance: Some(Entrance::Skyloft_From_PipersHouse),
                vanilla_entrance: Some(Entrance::PipersHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "F000",
                        room: 0u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "F000",
                        room: 0u8,
                        exit_idx: 32u8,
                    },
                ],
            },
            Exit::Skyloft_To_Sky => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::Sky_Field,
                disambiguation: None,
                display_name: "Skyloft to Sky",
                coupled_entrance: Some(Entrance::Skyloft_From_Sky),
                vanilla_entrance: Some(Entrance::Sky_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Skyloft_To_SkyloftSilentRealm => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::SkyloftSilentRealm_Trial,
                disambiguation: None,
                display_name: "Skyloft to Skyloft Silent Realm",
                coupled_entrance: Some(Entrance::Skyloft_From_SkyloftSilentRealm),
                vanilla_entrance: Some(Entrance::SkyloftSilentRealm_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Skyloft_To_WaterfallCave_Upper => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::WaterfallCave_Main,
                disambiguation: Some("Upper"),
                display_name: "Skyloft to Waterfall Cave (Upper)",
                coupled_entrance: Some(Entrance::Skyloft_From_WaterfallCave_Upper),
                vanilla_entrance: Some(Entrance::WaterfallCave_From_Skyloft_Upper),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 6u8,
                }],
            },
            Exit::Skyloft_To_WrynasHouse => &ExitDef {
                area: Area::Skyloft_CentralOutside,
                to: Area::WrynasHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Wryna's House",
                coupled_entrance: Some(Entrance::Skyloft_From_WrynasHouse),
                vanilla_entrance: Some(Entrance::WrynasHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 10u8,
                }],
            },
            Exit::Skyloft_To_Sky_PastWaterfallCave => &ExitDef {
                area: Area::Skyloft_PastWaterfallCave,
                to: Area::Sky_Field,
                disambiguation: Some("Past Waterfall Cave"),
                display_name: "Skyloft to Sky (Past Waterfall Cave)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Sky_From_Skyloft_PastWaterfallCave),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Skyloft_To_WaterfallCave_Lower => &ExitDef {
                area: Area::Skyloft_PastWaterfallCave,
                to: Area::WaterfallCave_Main,
                disambiguation: Some("Lower"),
                display_name: "Skyloft to Waterfall Cave (Lower)",
                coupled_entrance: Some(Entrance::Skyloft_From_WaterfallCave_Lower),
                vanilla_entrance: Some(Entrance::WaterfallCave_From_Skyloft_Lower),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 7u8,
                }],
            },
            Exit::Skyloft_To_SkyKeepEntry => &ExitDef {
                area: Area::Skyloft_ToSkyKeep,
                to: Area::SkyKeepEntry_Main,
                disambiguation: None,
                display_name: "Skyloft to Sky Keep Entry",
                coupled_entrance: Some(Entrance::Skyloft_From_SkyKeepEntry),
                vanilla_entrance: Some(Entrance::SkyKeepEntry_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 48u8,
                }],
            },
            Exit::WaterfallCave_To_Skyloft_Upper => &ExitDef {
                area: Area::WaterfallCave_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: Some("Upper"),
                display_name: "Waterfall Cave to Skyloft (Upper)",
                coupled_entrance: Some(Entrance::WaterfallCave_From_Skyloft_Upper),
                vanilla_entrance: Some(Entrance::Skyloft_From_WaterfallCave_Upper),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "D000",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::WaterfallCave_To_Skyloft_Lower => &ExitDef {
                area: Area::WaterfallCave_Main,
                to: Area::Skyloft_PastWaterfallCave,
                disambiguation: Some("Lower"),
                display_name: "Waterfall Cave to Skyloft (Lower)",
                coupled_entrance: Some(Entrance::WaterfallCave_From_Skyloft_Lower),
                vanilla_entrance: Some(Entrance::Skyloft_From_WaterfallCave_Lower),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "D000",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::WrynasHouse_To_Skyloft => &ExitDef {
                area: Area::WrynasHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Wryna's House to Skyloft",
                coupled_entrance: Some(Entrance::WrynasHouse_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_WrynasHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F006r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::EarthTemple_To_EarthTempleBoss => &ExitDef {
                area: Area::EarthTemple_BossDoorArea,
                to: Area::EarthTempleBoss_Main,
                disambiguation: None,
                display_name: "Earth Temple to Earth Temple Boss",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::EarthTempleBoss_From_EarthTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EarthTemple_To_EldinVolcano => &ExitDef {
                area: Area::EarthTemple_Entrance,
                to: Area::EldinVolcano_OutsideEt,
                disambiguation: None,
                display_name: "Earth Temple to Eldin Volcano",
                coupled_entrance: Some(Entrance::EarthTemple_From_EldinVolcano),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_EarthTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "D200",
                        room: 1u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D200",
                        room: 1u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D200",
                        room: 2u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D200",
                        room: 4u8,
                        exit_idx: 2u8,
                    },
                    ExitPatchInfo {
                        stage_name: "B210",
                        room: 0u8,
                        exit_idx: 0u8,
                    },
                ],
            },
            Exit::EarthTempleBoss_To_EarthTempleSpring => &ExitDef {
                area: Area::EarthTempleBoss_Main,
                to: Area::EarthTempleSpring_Main,
                disambiguation: None,
                display_name: "Earth Temple Boss to Earth Temple Spring",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::EarthTempleSpring_From_EarthTempleBoss),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EarthTempleSpring_To_EldinVolcano => &ExitDef {
                area: Area::EarthTempleSpring_Main,
                to: Area::EldinVolcano_OutsideEt,
                disambiguation: None,
                display_name: "Earth Temple Spring to Eldin Volcano",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::EldinVolcano_From_EarthTempleSpring),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinSilentRealm_To_EldinVolcano => &ExitDef {
                area: Area::EldinSilentRealm_Trial,
                to: Area::EldinVolcano_VolcanoAscent,
                disambiguation: None,
                display_name: "Eldin Silent Realm to Eldin Volcano",
                coupled_entrance: Some(Entrance::EldinSilentRealm_From_EldinVolcano),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_EldinSilentRealm),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinVolcano_To_Sky_EldinEntranceStatue => &ExitDef {
                area: Area::EldinVolcano_FirstRoom,
                to: Area::Sky_Field,
                disambiguation: Some("Eldin Entrance Statue"),
                display_name: "Eldin Volcano to Sky (Eldin Entrance Statue)",
                coupled_entrance: Some(Entrance::EldinVolcano_From_Sky_EldinEntranceStatue),
                vanilla_entrance: Some(Entrance::Sky_From_EldinVolcano_EldinEntranceStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinVolcano_To_InsideVolcanoSummit => &ExitDef {
                area: Area::EldinVolcano_HotCaveArea,
                to: Area::InsideVolcanoSummit_Main,
                disambiguation: None,
                display_name: "Eldin Volcano to Inside Volcano Summit",
                coupled_entrance: Some(Entrance::EldinVolcano_From_InsideVolcanoSummit),
                vanilla_entrance: Some(Entrance::InsideVolcanoSummit_From_EldinVolcano),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "F200",
                        room: 5u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "F200",
                        room: 5u8,
                        exit_idx: 0u8,
                    },
                ],
            },
            Exit::EldinVolcano_To_ThrillDiggerCave => &ExitDef {
                area: Area::EldinVolcano_NearThrillDigger,
                to: Area::ThrillDiggerCave_Main,
                disambiguation: None,
                display_name: "Eldin Volcano to Thrill Digger Cave",
                coupled_entrance: Some(Entrance::EldinVolcano_From_ThrillDiggerCave),
                vanilla_entrance: Some(Entrance::ThrillDiggerCave_From_EldinVolcano),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F200",
                    room: 4u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::EldinVolcano_To_EarthTemple => &ExitDef {
                area: Area::EldinVolcano_OutsideEt,
                to: Area::EarthTemple_Entrance,
                disambiguation: None,
                display_name: "Eldin Volcano to Earth Temple",
                coupled_entrance: Some(Entrance::EldinVolcano_From_EarthTemple),
                vanilla_entrance: Some(Entrance::EarthTemple_From_EldinVolcano),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F200",
                    room: 4u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::EldinVolcano_To_Sky_TempleEntranceStatue => &ExitDef {
                area: Area::EldinVolcano_OutsideEt,
                to: Area::Sky_Field,
                disambiguation: Some("Temple Entrance Statue"),
                display_name: "Eldin Volcano to Sky (Temple Entrance Statue)",
                coupled_entrance: Some(Entrance::EldinVolcano_From_Sky_TempleEntranceStatue),
                vanilla_entrance: Some(Entrance::Sky_From_EldinVolcano_TempleEntranceStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinVolcano_To_MogmaTurf_Skydive => &ExitDef {
                area: Area::EldinVolcano_PreMogmaTurf,
                to: Area::MogmaTurf_Main,
                disambiguation: Some("Skydive"),
                display_name: "Eldin Volcano to Mogma Turf (Skydive)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::MogmaTurf_From_EldinVolcano_Skydive),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinVolcano_To_Sky_VolcanoEastStatue => &ExitDef {
                area: Area::EldinVolcano_PreMogmaTurf,
                to: Area::Sky_Field,
                disambiguation: Some("Volcano East Statue"),
                display_name: "Eldin Volcano to Sky (Volcano East Statue)",
                coupled_entrance: Some(Entrance::EldinVolcano_From_Sky_VolcanoEastStatue),
                vanilla_entrance: Some(Entrance::Sky_From_EldinVolcano_VolcanoEastStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinVolcano_To_EldinSilentRealm => &ExitDef {
                area: Area::EldinVolcano_VolcanoAscent,
                to: Area::EldinSilentRealm_Trial,
                disambiguation: None,
                display_name: "Eldin Volcano to Eldin Silent Realm",
                coupled_entrance: Some(Entrance::EldinVolcano_From_EldinSilentRealm),
                vanilla_entrance: Some(Entrance::EldinSilentRealm_From_EldinVolcano),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::EldinVolcano_To_Sky_VolcanoAscentStatue => &ExitDef {
                area: Area::EldinVolcano_VolcanoAscent,
                to: Area::Sky_Field,
                disambiguation: Some("Volcano Ascent Statue"),
                display_name: "Eldin Volcano to Sky (Volcano Ascent Statue)",
                coupled_entrance: Some(Entrance::EldinVolcano_From_Sky_VolcanoAscentStatue),
                vanilla_entrance: Some(Entrance::Sky_From_EldinVolcano_VolcanoAscentStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::ThrillDiggerCave_To_EldinVolcano => &ExitDef {
                area: Area::ThrillDiggerCave_Main,
                to: Area::EldinVolcano_NearThrillDigger,
                disambiguation: None,
                display_name: "Thrill Digger Cave to Eldin Volcano",
                coupled_entrance: Some(Entrance::ThrillDiggerCave_From_EldinVolcano),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_ThrillDiggerCave),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F211",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::FaronSilentRealm_To_FaronWoods => &ExitDef {
                area: Area::FaronSilentRealm_Trial,
                to: Area::FaronWoods_Main,
                disambiguation: None,
                display_name: "Faron Silent Realm to Faron Woods",
                coupled_entrance: Some(Entrance::FaronSilentRealm_From_FaronWoods),
                vanilla_entrance: Some(Entrance::FaronWoods_From_FaronSilentRealm),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::DeepWoods_To_FaronWoods => &ExitDef {
                area: Area::DeepWoods_Entry,
                to: Area::FaronWoods_Main,
                disambiguation: None,
                display_name: "Deep Woods to Faron Woods",
                coupled_entrance: Some(Entrance::DeepWoods_From_FaronWoods),
                vanilla_entrance: Some(Entrance::FaronWoods_From_DeepWoods),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F101",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::DeepWoods_To_Sky_DeepWoodsStatue => &ExitDef {
                area: Area::DeepWoods_PastBeehive,
                to: Area::Sky_Field,
                disambiguation: Some("Deep Woods Statue"),
                display_name: "Deep Woods to Sky (Deep Woods Statue)",
                coupled_entrance: Some(Entrance::DeepWoods_From_Sky_DeepWoodsStatue),
                vanilla_entrance: Some(Entrance::Sky_From_DeepWoods_DeepWoodsStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::DeepWoods_To_Sky_ForestTempleStatue => &ExitDef {
                area: Area::DeepWoods_PastBeehive,
                to: Area::Sky_Field,
                disambiguation: Some("Forest Temple Statue"),
                display_name: "Deep Woods to Sky (Forest Temple Statue)",
                coupled_entrance: Some(Entrance::DeepWoods_From_Sky_ForestTempleStatue),
                vanilla_entrance: Some(Entrance::Sky_From_DeepWoods_ForestTempleStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::DeepWoods_To_SkyviewTemple => &ExitDef {
                area: Area::DeepWoods_PastBeehive,
                to: Area::SkyviewTemple_Entry,
                disambiguation: None,
                display_name: "Deep Woods to Skyview Temple",
                coupled_entrance: Some(Entrance::DeepWoods_From_SkyviewTemple),
                vanilla_entrance: Some(Entrance::SkyviewTemple_From_DeepWoods),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F101",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::FaronWoods_To_BehindTheTemple => &ExitDef {
                area: Area::FaronWoods_Entry,
                to: Area::BehindTheTemple_Main,
                disambiguation: None,
                display_name: "Faron Woods to Behind the Temple",
                coupled_entrance: Some(Entrance::FaronWoods_From_BehindTheTemple),
                vanilla_entrance: Some(Entrance::BehindTheTemple_From_FaronWoods),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::FaronWoods_To_Sky_FaronWoodsEntryStatue => &ExitDef {
                area: Area::FaronWoods_Entry,
                to: Area::Sky_Field,
                disambiguation: Some("Faron Woods Entry Statue"),
                display_name: "Faron Woods to Sky (Faron Woods Entry Statue)",
                coupled_entrance: Some(Entrance::FaronWoods_From_Sky_FaronWoodsEntryStatue),
                vanilla_entrance: Some(Entrance::Sky_From_FaronWoods_FaronWoodsEntryStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FaronWoods_To_GreatTree_LowerPlatform => &ExitDef {
                area: Area::FaronWoods_GreatTreePlatforms,
                to: Area::GreatTree_Lower,
                disambiguation: Some("Lower Platform"),
                display_name: "Faron Woods to Great Tree (Lower Platform)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::GreatTree_From_FaronWoods_LowerPlatform),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::FaronWoods_To_GreatTree_UpperPlatform => &ExitDef {
                area: Area::FaronWoods_GreatTreePlatforms,
                to: Area::GreatTree_Upper,
                disambiguation: Some("Upper Platform"),
                display_name: "Faron Woods to Great Tree (Upper Platform)",
                coupled_entrance: Some(Entrance::FaronWoods_From_GreatTree_UpperPlatform),
                vanilla_entrance: Some(Entrance::GreatTree_From_FaronWoods_UpperPlatform),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    exit_idx: 4u8,
                }],
            },
            Exit::FaronWoods_To_GreatTree_Top => &ExitDef {
                area: Area::FaronWoods_GreatTreeTop,
                to: Area::GreatTree_Upper,
                disambiguation: Some("Top"),
                display_name: "Faron Woods to Great Tree (Top)",
                coupled_entrance: Some(Entrance::FaronWoods_From_GreatTree_Top),
                vanilla_entrance: Some(Entrance::GreatTree_From_FaronWoods_Top),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    exit_idx: 5u8,
                }],
            },
            Exit::FaronWoods_To_Sky_GreatTreeStatue => &ExitDef {
                area: Area::FaronWoods_GreatTreeTop,
                to: Area::Sky_Field,
                disambiguation: Some("Great Tree Statue"),
                display_name: "Faron Woods to Sky (Great Tree Statue)",
                coupled_entrance: Some(Entrance::FaronWoods_From_Sky_GreatTreeStatue),
                vanilla_entrance: Some(Entrance::Sky_From_FaronWoods_GreatTreeStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FaronWoods_To_DeepWoods => &ExitDef {
                area: Area::FaronWoods_Main,
                to: Area::DeepWoods_Entry,
                disambiguation: None,
                display_name: "Faron Woods to Deep Woods",
                coupled_entrance: Some(Entrance::FaronWoods_From_DeepWoods),
                vanilla_entrance: Some(Entrance::DeepWoods_From_FaronWoods),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "F100",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "F100",
                        room: 0u8,
                        exit_idx: 13u8,
                    },
                ],
            },
            Exit::FaronWoods_To_FaronSilentRealm => &ExitDef {
                area: Area::FaronWoods_Main,
                to: Area::FaronSilentRealm_Trial,
                disambiguation: None,
                display_name: "Faron Woods to Faron Silent Realm",
                coupled_entrance: Some(Entrance::FaronWoods_From_FaronSilentRealm),
                vanilla_entrance: Some(Entrance::FaronSilentRealm_From_FaronWoods),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FaronWoods_To_GreatTree_Tunnel => &ExitDef {
                area: Area::FaronWoods_Main,
                to: Area::GreatTree_Entry,
                disambiguation: Some("Tunnel"),
                display_name: "Faron Woods to Great Tree (Tunnel)",
                coupled_entrance: Some(Entrance::FaronWoods_From_GreatTree_Tunnel),
                vanilla_entrance: Some(Entrance::GreatTree_From_FaronWoods_Tunnel),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    exit_idx: 6u8,
                }],
            },
            Exit::FaronWoods_To_LakeFloria => &ExitDef {
                area: Area::FaronWoods_Main,
                to: Area::LakeFloria_Entry,
                disambiguation: None,
                display_name: "Faron Woods to Lake Floria",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::LakeFloria_From_FaronWoods),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "F100",
                        room: 0u8,
                        exit_idx: 9u8,
                    },
                    ExitPatchInfo {
                        stage_name: "F100",
                        room: 0u8,
                        exit_idx: 12u8,
                    },
                ],
            },
            Exit::FaronWoods_To_Sky_InTheWoodsStatue => &ExitDef {
                area: Area::FaronWoods_Main,
                to: Area::Sky_Field,
                disambiguation: Some("In the Woods Statue"),
                display_name: "Faron Woods to Sky (In the Woods Statue)",
                coupled_entrance: Some(Entrance::FaronWoods_From_Sky_InTheWoodsStatue),
                vanilla_entrance: Some(Entrance::Sky_From_FaronWoods_InTheWoodsStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FaronWoods_To_Sky_ViewingPlatformStatue => &ExitDef {
                area: Area::FaronWoods_Main,
                to: Area::Sky_Field,
                disambiguation: Some("Viewing Platform Statue"),
                display_name: "Faron Woods to Sky (Viewing Platform Statue)",
                coupled_entrance: Some(Entrance::FaronWoods_From_Sky_ViewingPlatformStatue),
                vanilla_entrance: Some(Entrance::Sky_From_FaronWoods_ViewingPlatformStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::GreatTree_To_FaronWoods_Tunnel => &ExitDef {
                area: Area::GreatTree_Entry,
                to: Area::FaronWoods_Main,
                disambiguation: Some("Tunnel"),
                display_name: "Great Tree to Faron Woods (Tunnel)",
                coupled_entrance: Some(Entrance::GreatTree_From_FaronWoods_Tunnel),
                vanilla_entrance: Some(Entrance::FaronWoods_From_GreatTree_Tunnel),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    exit_idx: 4u8,
                }],
            },
            Exit::GreatTree_To_FaronWoods_LowerPlatform => &ExitDef {
                area: Area::GreatTree_PastPlatforms,
                to: Area::FaronWoods_GreatTreePlatforms,
                disambiguation: Some("Lower Platform"),
                display_name: "Great Tree to Faron Woods (Lower Platform)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::FaronWoods_From_GreatTree_LowerPlatform),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::GreatTree_To_FaronWoods_UpperPlatform => &ExitDef {
                area: Area::GreatTree_Upper,
                to: Area::FaronWoods_GreatTreePlatforms,
                disambiguation: Some("Upper Platform"),
                display_name: "Great Tree to Faron Woods (Upper Platform)",
                coupled_entrance: Some(Entrance::GreatTree_From_FaronWoods_UpperPlatform),
                vanilla_entrance: Some(Entrance::FaronWoods_From_GreatTree_UpperPlatform),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::GreatTree_To_FaronWoods_Top => &ExitDef {
                area: Area::GreatTree_Upper,
                to: Area::FaronWoods_GreatTreeTop,
                disambiguation: Some("Top"),
                display_name: "Great Tree to Faron Woods (Top)",
                coupled_entrance: Some(Entrance::GreatTree_From_FaronWoods_Top),
                vanilla_entrance: Some(Entrance::FaronWoods_From_GreatTree_Top),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::FireSanctuaryA_To_OutsideFireSanctuary => &ExitDef {
                area: Area::FireSanctuaryA_Entry,
                to: Area::OutsideFireSanctuary_ToFireSanctuary,
                disambiguation: None,
                display_name: "Fire Sanctuary A to Outside Fire Sanctuary",
                coupled_entrance: Some(Entrance::FireSanctuaryA_From_OutsideFireSanctuary),
                vanilla_entrance: Some(Entrance::OutsideFireSanctuary_From_FireSanctuaryA),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FireSanctuaryA_To_FireSanctuaryBoss => &ExitDef {
                area: Area::FireSanctuaryA_InFrontOfBossDoor,
                to: Area::FireSanctuaryBoss_Main,
                disambiguation: None,
                display_name: "Fire Sanctuary A to Fire Sanctuary Boss",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::FireSanctuaryBoss_From_FireSanctuaryA),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FireSanctuaryA_To_FireSanctuaryB => &ExitDef {
                area: Area::FireSanctuaryA_PastFirstWaterPlant,
                to: Area::FireSanctuaryB_FirstOutsideSection,
                disambiguation: None,
                display_name: "Fire Sanctuary A to Fire Sanctuary B",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::FireSanctuaryB_From_FireSanctuaryA),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FireSanctuaryB_To_FireSanctuaryA => &ExitDef {
                area: Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                to: Area::FireSanctuaryA_PrePlatsArea,
                disambiguation: None,
                display_name: "Fire Sanctuary B to Fire Sanctuary A",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::FireSanctuaryA_From_FireSanctuaryB),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::FireSanctuaryBoss_To_FireSanctuaryFlameRoom => &ExitDef {
                area: Area::FireSanctuaryBoss_Main,
                to: Area::FireSanctuaryFlameRoom_Main,
                disambiguation: None,
                display_name: "Fire Sanctuary Boss to Fire Sanctuary Flame Room",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::FireSanctuaryFlameRoom_From_FireSanctuaryBoss),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::InsideGoddessStatue_To_Skyloft => &ExitDef {
                area: Area::InsideGoddessStatue_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: None,
                display_name: "Inside Goddess Statue to Skyloft",
                coupled_entrance: Some(Entrance::InsideGoddessStatue_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_InsideGoddessStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F008r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::KnightAcademy_To_Skyloft_Lower_Right => &ExitDef {
                area: Area::KnightAcademy_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Lower"),
                display_name: "Knight Academy to Skyloft (Lower Right Door)",
                coupled_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Lower_Left),
                vanilla_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Lower_Right),
                door_connection: DoorConnection::Left(Exit::KnightAcademy_To_Skyloft_Lower_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::KnightAcademy_To_Skyloft_Lower_Left => &ExitDef {
                area: Area::KnightAcademy_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Lower"),
                display_name: "Knight Academy to Skyloft (Lower Left Door)",
                coupled_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Lower_Right),
                vanilla_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Lower_Left),
                door_connection: DoorConnection::Right(Exit::KnightAcademy_To_Skyloft_Lower_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::KnightAcademy_To_Skyloft_Upper_Right => &ExitDef {
                area: Area::KnightAcademy_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Upper"),
                display_name: "Knight Academy to Skyloft (Upper Right Door)",
                coupled_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Upper_Left),
                vanilla_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Upper_Right),
                door_connection: DoorConnection::Left(Exit::KnightAcademy_To_Skyloft_Upper_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::KnightAcademy_To_Skyloft_Upper_Left => &ExitDef {
                area: Area::KnightAcademy_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Upper"),
                display_name: "Knight Academy to Skyloft (Upper Left Door)",
                coupled_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Upper_Right),
                vanilla_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Upper_Left),
                door_connection: DoorConnection::Right(Exit::KnightAcademy_To_Skyloft_Upper_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::Skyloft_To_InsideGoddessStatue => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::InsideGoddessStatue_Main,
                disambiguation: None,
                display_name: "Skyloft to Inside Goddess Statue",
                coupled_entrance: Some(Entrance::Skyloft_From_InsideGoddessStatue),
                vanilla_entrance: Some(Entrance::InsideGoddessStatue_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 5u8,
                }],
            },
            Exit::Skyloft_To_KnightAcademy_Chimney => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::KnightAcademy_AboveZeldasRoom,
                disambiguation: Some("Chimney"),
                display_name: "Skyloft to Knight Academy (Chimney)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Chimney),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 57u8,
                }],
            },
            Exit::Skyloft_To_KnightAcademy_Lower_Right => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::KnightAcademy_Main,
                disambiguation: Some("Lower"),
                display_name: "Skyloft to Knight Academy (Lower Right Door)",
                coupled_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Lower_Left),
                vanilla_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Lower_Right),
                door_connection: DoorConnection::Left(Exit::Skyloft_To_KnightAcademy_Lower_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::Skyloft_To_KnightAcademy_Lower_Left => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::KnightAcademy_Main,
                disambiguation: Some("Lower"),
                display_name: "Skyloft to Knight Academy (Lower Left Door)",
                coupled_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Lower_Right),
                vanilla_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Lower_Left),
                door_connection: DoorConnection::Right(Exit::Skyloft_To_KnightAcademy_Lower_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 4u8,
                }],
            },
            Exit::Skyloft_To_KnightAcademy_Upper_Right => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::KnightAcademy_Main,
                disambiguation: Some("Upper"),
                display_name: "Skyloft to Knight Academy (Upper Right Door)",
                coupled_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Upper_Left),
                vanilla_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Upper_Right),
                door_connection: DoorConnection::Left(Exit::Skyloft_To_KnightAcademy_Upper_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 24u8,
                }],
            },
            Exit::Skyloft_To_KnightAcademy_Upper_Left => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::KnightAcademy_Main,
                disambiguation: Some("Upper"),
                display_name: "Skyloft to Knight Academy (Upper Left Door)",
                coupled_entrance: Some(Entrance::Skyloft_From_KnightAcademy_Upper_Right),
                vanilla_entrance: Some(Entrance::KnightAcademy_From_Skyloft_Upper_Left),
                door_connection: DoorConnection::Right(Exit::Skyloft_To_KnightAcademy_Upper_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 23u8,
                }],
            },
            Exit::Skyloft_To_SparringHall_Right => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::SparringHall_Main,
                disambiguation: None,
                display_name: "Skyloft to Sparring Hall (Right Door)",
                coupled_entrance: Some(Entrance::Skyloft_From_SparringHall_Left),
                vanilla_entrance: Some(Entrance::SparringHall_From_Skyloft_Right),
                door_connection: DoorConnection::Left(Exit::Skyloft_To_SparringHall_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 27u8,
                }],
            },
            Exit::Skyloft_To_SparringHall_Left => &ExitDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                to: Area::SparringHall_Main,
                disambiguation: None,
                display_name: "Skyloft to Sparring Hall (Left Door)",
                coupled_entrance: Some(Entrance::Skyloft_From_SparringHall_Right),
                vanilla_entrance: Some(Entrance::SparringHall_From_Skyloft_Left),
                door_connection: DoorConnection::Right(Exit::Skyloft_To_SparringHall_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 20u8,
                }],
            },
            Exit::SparringHall_To_Skyloft_Right => &ExitDef {
                area: Area::SparringHall_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: None,
                display_name: "Sparring Hall to Skyloft (Right Door)",
                coupled_entrance: Some(Entrance::SparringHall_From_Skyloft_Left),
                vanilla_entrance: Some(Entrance::Skyloft_From_SparringHall_Right),
                door_connection: DoorConnection::Left(Exit::SparringHall_To_Skyloft_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F009r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::SparringHall_To_Skyloft_Left => &ExitDef {
                area: Area::SparringHall_Main,
                to: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: None,
                display_name: "Sparring Hall to Skyloft (Left Door)",
                coupled_entrance: Some(Entrance::SparringHall_From_Skyloft_Right),
                vanilla_entrance: Some(Entrance::Skyloft_From_SparringHall_Left),
                door_connection: DoorConnection::Right(Exit::SparringHall_To_Skyloft_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F009r",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::FaroresLair_To_FloriaWaterfall => &ExitDef {
                area: Area::FaroresLair_Main,
                to: Area::FloriaWaterfall_Main,
                disambiguation: None,
                display_name: "Farore's Lair to Floria Waterfall",
                coupled_entrance: Some(Entrance::FaroresLair_From_FloriaWaterfall),
                vanilla_entrance: Some(Entrance::FloriaWaterfall_From_FaroresLair),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F102_2",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::FaroresLair_To_LakeFloria => &ExitDef {
                area: Area::FaroresLair_Main,
                to: Area::LakeFloria_ToFaroresLair,
                disambiguation: None,
                display_name: "Farore's Lair to Lake Floria",
                coupled_entrance: Some(Entrance::FaroresLair_From_LakeFloria),
                vanilla_entrance: Some(Entrance::LakeFloria_From_FaroresLair),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F102_2",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::FloriaWaterfall_To_AncientCistern => &ExitDef {
                area: Area::FloriaWaterfall_Main,
                to: Area::AncientCistern_MainHub,
                disambiguation: None,
                display_name: "Floria Waterfall to Ancient Cistern",
                coupled_entrance: Some(Entrance::FloriaWaterfall_From_AncientCistern),
                vanilla_entrance: Some(Entrance::AncientCistern_From_FloriaWaterfall),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F102_1",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::FloriaWaterfall_To_FaronWoods => &ExitDef {
                area: Area::FloriaWaterfall_Main,
                to: Area::FaronWoods_Main,
                disambiguation: None,
                display_name: "Floria Waterfall to Faron Woods",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::FaronWoods_From_FloriaWaterfall),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F102_1",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::FloriaWaterfall_To_FaroresLair => &ExitDef {
                area: Area::FloriaWaterfall_Main,
                to: Area::FaroresLair_Main,
                disambiguation: None,
                display_name: "Floria Waterfall to Farore's Lair",
                coupled_entrance: Some(Entrance::FloriaWaterfall_From_FaroresLair),
                vanilla_entrance: Some(Entrance::FaroresLair_From_FloriaWaterfall),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F102_1",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::FloriaWaterfall_To_Sky_FloriaWaterfallStatue => &ExitDef {
                area: Area::FloriaWaterfall_Main,
                to: Area::Sky_Field,
                disambiguation: Some("Floria Waterfall Statue"),
                display_name: "Floria Waterfall to Sky (Floria Waterfall Statue)",
                coupled_entrance: Some(Entrance::FloriaWaterfall_From_Sky_FloriaWaterfallStatue),
                vanilla_entrance: Some(Entrance::Sky_From_FloriaWaterfall_FloriaWaterfallStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LakeFloria_To_Sky_LakeFloriaStatue => &ExitDef {
                area: Area::LakeFloria_StatueSpot,
                to: Area::Sky_Field,
                disambiguation: Some("Lake Floria Statue"),
                display_name: "Lake Floria to Sky (Lake Floria Statue)",
                coupled_entrance: Some(Entrance::LakeFloria_From_Sky_LakeFloriaStatue),
                vanilla_entrance: Some(Entrance::Sky_From_LakeFloria_LakeFloriaStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LakeFloria_To_FaroresLair => &ExitDef {
                area: Area::LakeFloria_ToFaroresLair,
                to: Area::FaroresLair_Main,
                disambiguation: None,
                display_name: "Lake Floria to Farore's Lair",
                coupled_entrance: Some(Entrance::LakeFloria_From_FaroresLair),
                vanilla_entrance: Some(Entrance::FaroresLair_From_LakeFloria),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F102",
                    room: 4u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruCaves_To_LanayruDesert => &ExitDef {
                area: Area::LanayruCaves_Main,
                to: Area::LanayruDesert_SandOasis,
                disambiguation: None,
                display_name: "Lanayru Caves to Lanayru Desert",
                coupled_entrance: Some(Entrance::LanayruCaves_From_LanayruDesert),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_LanayruCaves),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F303",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::LanayruCaves_To_LanayruMines => &ExitDef {
                area: Area::LanayruCaves_Main,
                to: Area::LanayruMines_ToCaves,
                disambiguation: None,
                display_name: "Lanayru Caves to Lanayru Mines",
                coupled_entrance: Some(Entrance::LanayruCaves_From_LanayruMines),
                vanilla_entrance: Some(Entrance::LanayruMines_From_LanayruCaves),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F303",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruCaves_To_SandSeaDocks => &ExitDef {
                area: Area::LanayruCaves_ToSandSea,
                to: Area::SandSeaDocks_ToCaves,
                disambiguation: None,
                display_name: "Lanayru Caves to Sand Sea Docks",
                coupled_entrance: Some(Entrance::LanayruCaves_From_SandSeaDocks),
                vanilla_entrance: Some(Entrance::SandSeaDocks_From_LanayruCaves),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F303",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::FireNode_To_LanayruDesert => &ExitDef {
                area: Area::FireNode_Main,
                to: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Fire Node to Lanayru Desert",
                coupled_entrance: Some(Entrance::FireNode_From_LanayruDesert),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_FireNode),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300_3",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruDesert_To_LanayruMines => &ExitDef {
                area: Area::LanayruDesert_HookBeetleArea,
                to: Area::LanayruMines_ToDesert,
                disambiguation: None,
                display_name: "Lanayru Desert to Lanayru Mines",
                coupled_entrance: Some(Entrance::LanayruDesert_From_LanayruMines),
                vanilla_entrance: Some(Entrance::LanayruMines_From_LanayruDesert),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::LanayruDesert_To_Sky_DesertEntranceStatue => &ExitDef {
                area: Area::LanayruDesert_HookBeetleArea,
                to: Area::Sky_Field,
                disambiguation: Some("Desert Entrance Statue"),
                display_name: "Lanayru Desert to Sky (Desert Entrance Statue)",
                coupled_entrance: Some(Entrance::LanayruDesert_From_Sky_DesertEntranceStatue),
                vanilla_entrance: Some(Entrance::Sky_From_LanayruDesert_DesertEntranceStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruDesert_To_FireNode => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::FireNode_Main,
                disambiguation: None,
                display_name: "Lanayru Desert to Fire Node",
                coupled_entrance: Some(Entrance::LanayruDesert_From_FireNode),
                vanilla_entrance: Some(Entrance::FireNode_From_LanayruDesert),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::LanayruDesert_To_LanayruMiningFacilityA => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::LanayruMiningFacilityA_Entry,
                disambiguation: None,
                display_name: "Lanayru Desert to Lanayru Mining Facility A",
                coupled_entrance: Some(Entrance::LanayruDesert_From_LanayruMiningFacilityA),
                vanilla_entrance: Some(Entrance::LanayruMiningFacilityA_From_LanayruDesert),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruDesert_To_LanayruSilentRealm => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::LanayruSilentRealm_Trial,
                disambiguation: None,
                display_name: "Lanayru Desert to Lanayru Silent Realm",
                coupled_entrance: Some(Entrance::LanayruDesert_From_LanayruSilentRealm),
                vanilla_entrance: Some(Entrance::LanayruSilentRealm_From_LanayruDesert),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruDesert_To_LightningNode => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::LightningNode_Main,
                disambiguation: None,
                display_name: "Lanayru Desert to Lightning Node",
                coupled_entrance: Some(Entrance::LanayruDesert_From_LightningNode),
                vanilla_entrance: Some(Entrance::LightningNode_From_LanayruDesert),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruDesert_To_Sky_NorthDesertStatue => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::Sky_Field,
                disambiguation: Some("North Desert Statue"),
                display_name: "Lanayru Desert to Sky (North Desert Statue)",
                coupled_entrance: Some(Entrance::LanayruDesert_From_Sky_NorthDesertStatue),
                vanilla_entrance: Some(Entrance::Sky_From_LanayruDesert_NorthDesertStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruDesert_To_Sky_StoneCacheStatue => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::Sky_Field,
                disambiguation: Some("Stone Cache Statue"),
                display_name: "Lanayru Desert to Sky (Stone Cache Statue)",
                coupled_entrance: Some(Entrance::LanayruDesert_From_Sky_StoneCacheStatue),
                vanilla_entrance: Some(Entrance::Sky_From_LanayruDesert_StoneCacheStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruDesert_To_TempleOfTime_End => &ExitDef {
                area: Area::LanayruDesert_PastToT,
                to: Area::TempleOfTime_End,
                disambiguation: Some("End"),
                display_name: "Lanayru Desert to Temple of Time (End)",
                coupled_entrance: Some(Entrance::LanayruDesert_From_TempleOfTime_End),
                vanilla_entrance: Some(Entrance::TempleOfTime_From_LanayruDesert_End),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    exit_idx: 4u8,
                }],
            },
            Exit::LanayruDesert_To_LanayruCaves => &ExitDef {
                area: Area::LanayruDesert_SandOasis,
                to: Area::LanayruCaves_Main,
                disambiguation: None,
                display_name: "Lanayru Desert to Lanayru Caves",
                coupled_entrance: Some(Entrance::LanayruDesert_From_LanayruCaves),
                vanilla_entrance: Some(Entrance::LanayruCaves_From_LanayruDesert),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    exit_idx: 8u8,
                }],
            },
            Exit::LanayruDesert_To_Sky_WestDesertStatue => &ExitDef {
                area: Area::LanayruDesert_SandOasis,
                to: Area::Sky_Field,
                disambiguation: Some("West Desert Statue"),
                display_name: "Lanayru Desert to Sky (West Desert Statue)",
                coupled_entrance: Some(Entrance::LanayruDesert_From_Sky_WestDesertStatue),
                vanilla_entrance: Some(Entrance::Sky_From_LanayruDesert_WestDesertStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruDesert_To_TempleOfTime_Start => &ExitDef {
                area: Area::LanayruDesert_SandOasis,
                to: Area::TempleOfTime_Start,
                disambiguation: Some("Start"),
                display_name: "Lanayru Desert to Temple of Time (Start)",
                coupled_entrance: Some(Entrance::LanayruDesert_From_TempleOfTime_Start),
                vanilla_entrance: Some(Entrance::TempleOfTime_From_LanayruDesert_Start),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::LightningNode_To_LanayruDesert => &ExitDef {
                area: Area::LightningNode_Main,
                to: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Lightning Node to Lanayru Desert",
                coupled_entrance: Some(Entrance::LightningNode_From_LanayruDesert),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_LightningNode),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300_2",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::TempleOfTime_To_LanayruDesert_End => &ExitDef {
                area: Area::TempleOfTime_End,
                to: Area::LanayruDesert_PastToT,
                disambiguation: Some("End"),
                display_name: "Temple of Time to Lanayru Desert (End)",
                coupled_entrance: Some(Entrance::TempleOfTime_From_LanayruDesert_End),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_TempleOfTime_End),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300_4",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::TempleOfTime_To_LanayruDesert_Start => &ExitDef {
                area: Area::TempleOfTime_Start,
                to: Area::LanayruDesert_SandOasis,
                disambiguation: Some("Start"),
                display_name: "Temple of Time to Lanayru Desert (Start)",
                coupled_entrance: Some(Entrance::TempleOfTime_From_LanayruDesert_Start),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_TempleOfTime_Start),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300_4",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruMines_To_Sky_LanayruMineEntryStatue => &ExitDef {
                area: Area::LanayruMines_FirstHalf,
                to: Area::Sky_Field,
                disambiguation: Some("Lanayru Mine Entry Statue"),
                display_name: "Lanayru Mines to Sky (Lanayru Mine Entry Statue)",
                coupled_entrance: Some(Entrance::LanayruMines_From_Sky_LanayruMineEntryStatue),
                vanilla_entrance: Some(Entrance::Sky_From_LanayruMines_LanayruMineEntryStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMines_To_LanayruCaves => &ExitDef {
                area: Area::LanayruMines_ToCaves,
                to: Area::LanayruCaves_Main,
                disambiguation: None,
                display_name: "Lanayru Mines to Lanayru Caves",
                coupled_entrance: Some(Entrance::LanayruMines_From_LanayruCaves),
                vanilla_entrance: Some(Entrance::LanayruCaves_From_LanayruMines),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300_1",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::LanayruMines_To_LanayruDesert => &ExitDef {
                area: Area::LanayruMines_ToDesert,
                to: Area::LanayruDesert_HookBeetleArea,
                disambiguation: None,
                display_name: "Lanayru Mines to Lanayru Desert",
                coupled_entrance: Some(Entrance::LanayruMines_From_LanayruDesert),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_LanayruMines),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F300_1",
                    room: 2u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruMiningFacilityA_To_LanayruDesert => &ExitDef {
                area: Area::LanayruMiningFacilityA_Entry,
                to: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Lanayru Mining Facility A to Lanayru Desert",
                coupled_entrance: Some(Entrance::LanayruMiningFacilityA_From_LanayruDesert),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_LanayruMiningFacilityA),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub2 => &ExitDef {
                area: Area::LanayruMiningFacilityA_GustBellowsRoom,
                to: Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
                disambiguation: Some("Hub 2"),
                display_name: "Lanayru Mining Facility A to Lanayru Mining Facility B (Hub 2)",
                coupled_entrance: None,
                vanilla_entrance: Some(
                    Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub2,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_HubW => &ExitDef {
                area: Area::LanayruMiningFacilityA_MapRoom,
                to: Area::LanayruMiningFacilityB_WestHub,
                disambiguation: Some("Hub W"),
                display_name: "Lanayru Mining Facility A to Lanayru Mining Facility B (Hub W)",
                coupled_entrance: None,
                vanilla_entrance: Some(
                    Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_HubW,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub => &ExitDef {
                area: Area::LanayruMiningFacilityA_SecondRoom,
                to: Area::LanayruMiningFacilityB_HubRoom,
                disambiguation: Some("Hub"),
                display_name: "Lanayru Mining Facility A to Lanayru Mining Facility B (Hub)",
                coupled_entrance: None,
                vanilla_entrance: Some(
                    Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMiningFacilityB_To_LanayruMiningFacilityBoss => &ExitDef {
                area: Area::LanayruMiningFacilityB_NearBossDoor,
                to: Area::LanayruMiningFacilityBoss_Main,
                disambiguation: None,
                display_name: "Lanayru Mining Facility B to Lanayru Mining Facility Boss",
                coupled_entrance: None,
                vanilla_entrance: Some(
                    Entrance::LanayruMiningFacilityBoss_From_LanayruMiningFacilityB,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMiningFacilityBoss_To_LanayruMiningFacilityToToT => &ExitDef {
                area: Area::LanayruMiningFacilityBoss_Main,
                to: Area::LanayruMiningFacilityToToT_BossDoor,
                disambiguation: None,
                display_name: "Lanayru Mining Facility Boss to Lanayru Mining Facility to ToT",
                coupled_entrance: None,
                vanilla_entrance: Some(
                    Entrance::LanayruMiningFacilityToToT_From_LanayruMiningFacilityBoss,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::LanayruMiningFacilityToToT_To_TempleOfTime => &ExitDef {
                area: Area::LanayruMiningFacilityToToT_ToTExit,
                to: Area::TempleOfTime_AfterLmf,
                disambiguation: None,
                display_name: "Lanayru Mining Facility to ToT to Temple of Time",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::TempleOfTime_From_LanayruMiningFacilityToToT),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_End => &ExitDef {
                area: Area::InsidePiratesStronghold_Main,
                to: Area::OutsidePiratesStronghold_InsideSharkhead,
                disambiguation: Some("End"),
                display_name: "Inside Pirate's Stronghold to Outside Pirate's Stronghold (End)",
                coupled_entrance: Some(
                    Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_End,
                ),
                vanilla_entrance: Some(
                    Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_End,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_2",
                    room: 1u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_Beginning => &ExitDef {
                area: Area::InsidePiratesStronghold_Main,
                to: Area::OutsidePiratesStronghold_Main,
                disambiguation: Some("Beginning"),
                display_name:
                    "Inside Pirate's Stronghold to Outside Pirate's Stronghold (Beginning)",
                coupled_entrance: Some(
                    Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_Beginning,
                ),
                vanilla_entrance: Some(
                    Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_Beginning,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_2",
                    room: 1u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_End => &ExitDef {
                area: Area::OutsidePiratesStronghold_InsideSharkhead,
                to: Area::InsidePiratesStronghold_Main,
                disambiguation: Some("End"),
                display_name: "Outside Pirate's Stronghold to Inside Pirate's Stronghold (End)",
                coupled_entrance: Some(
                    Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_End,
                ),
                vanilla_entrance: Some(
                    Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_End,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_6",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_Beginning => &ExitDef {
                area: Area::OutsidePiratesStronghold_Main,
                to: Area::InsidePiratesStronghold_Main,
                disambiguation: Some("Beginning"),
                display_name:
                    "Outside Pirate's Stronghold to Inside Pirate's Stronghold (Beginning)",
                coupled_entrance: Some(
                    Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_Beginning,
                ),
                vanilla_entrance: Some(
                    Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_Beginning,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_6",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::OutsidePiratesStronghold_To_SandSea => &ExitDef {
                area: Area::OutsidePiratesStronghold_Main,
                to: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Outside Pirate's Stronghold to Sand Sea",
                coupled_entrance: Some(Entrance::OutsidePiratesStronghold_From_SandSea),
                vanilla_entrance: Some(Entrance::SandSea_From_OutsidePiratesStronghold),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_6",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::SandSea_To_OutsidePiratesStronghold => &ExitDef {
                area: Area::SandSea_Main,
                to: Area::OutsidePiratesStronghold_Main,
                disambiguation: None,
                display_name: "Sand Sea to Outside Pirate's Stronghold",
                coupled_entrance: Some(Entrance::SandSea_From_OutsidePiratesStronghold),
                vanilla_entrance: Some(Entrance::OutsidePiratesStronghold_From_SandSea),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    exit_idx: 4u8,
                }],
            },
            Exit::SandSea_To_SandSeaDocks => &ExitDef {
                area: Area::SandSea_Main,
                to: Area::SandSeaDocks_Main,
                disambiguation: None,
                display_name: "Sand Sea to Sand Sea Docks",
                coupled_entrance: Some(Entrance::SandSea_From_SandSeaDocks),
                vanilla_entrance: Some(Entrance::SandSeaDocks_From_SandSea),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::SandSea_To_Sandship => &ExitDef {
                area: Area::SandSea_Main,
                to: Area::Sandship_Deck,
                disambiguation: None,
                display_name: "Sand Sea to Sandship",
                coupled_entrance: Some(Entrance::SandSea_From_Sandship),
                vanilla_entrance: Some(Entrance::Sandship_From_SandSea),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "F301",
                        room: 0u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "F301_1",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                ],
            },
            Exit::SandSea_To_Shipyard => &ExitDef {
                area: Area::SandSea_Main,
                to: Area::Shipyard_Main,
                disambiguation: None,
                display_name: "Sand Sea to Shipyard",
                coupled_entrance: Some(Entrance::SandSea_From_Shipyard),
                vanilla_entrance: Some(Entrance::Shipyard_From_SandSea),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::SandSea_To_SkippersRetreat => &ExitDef {
                area: Area::SandSea_Main,
                to: Area::SkippersRetreat_Start,
                disambiguation: None,
                display_name: "Sand Sea to Skipper's Retreat",
                coupled_entrance: Some(Entrance::SandSea_From_SkippersRetreat),
                vanilla_entrance: Some(Entrance::SkippersRetreat_From_SandSea),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::SandSeaDocks_To_SandSea => &ExitDef {
                area: Area::SandSeaDocks_Main,
                to: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Sand Sea Docks to Sand Sea",
                coupled_entrance: Some(Entrance::SandSeaDocks_From_SandSea),
                vanilla_entrance: Some(Entrance::SandSea_From_SandSeaDocks),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::SandSeaDocks_To_Sky_AncientHarbor => &ExitDef {
                area: Area::SandSeaDocks_Main,
                to: Area::Sky_Field,
                disambiguation: Some("Ancient Harbor"),
                display_name: "Sand Sea Docks to Sky (Ancient Harbor)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Sky_From_SandSeaDocks_AncientHarbor),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SandSeaDocks_To_LanayruCaves => &ExitDef {
                area: Area::SandSeaDocks_ToCaves,
                to: Area::LanayruCaves_ToSandSea,
                disambiguation: None,
                display_name: "Sand Sea Docks to Lanayru Caves",
                coupled_entrance: Some(Entrance::SandSeaDocks_From_LanayruCaves),
                vanilla_entrance: Some(Entrance::LanayruCaves_From_SandSeaDocks),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::Shipyard_To_ShipyardConstructionBay_Upper => &ExitDef {
                area: Area::Shipyard_AfterMinecartRide,
                to: Area::ShipyardConstructionBay_Upper,
                disambiguation: Some("Upper"),
                display_name: "Shipyard to Shipyard Construction Bay (Upper)",
                coupled_entrance: Some(Entrance::Shipyard_From_ShipyardConstructionBay_Upper),
                vanilla_entrance: Some(Entrance::ShipyardConstructionBay_From_Shipyard_Upper),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_4",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::Shipyard_To_SandSea => &ExitDef {
                area: Area::Shipyard_Main,
                to: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Shipyard to Sand Sea",
                coupled_entrance: Some(Entrance::Shipyard_From_SandSea),
                vanilla_entrance: Some(Entrance::SandSea_From_Shipyard),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_4",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::Shipyard_To_ShipyardConstructionBay_Lower => &ExitDef {
                area: Area::Shipyard_Main,
                to: Area::ShipyardConstructionBay_Lower,
                disambiguation: Some("Lower"),
                display_name: "Shipyard to Shipyard Construction Bay (Lower)",
                coupled_entrance: Some(Entrance::Shipyard_From_ShipyardConstructionBay_Lower),
                vanilla_entrance: Some(Entrance::ShipyardConstructionBay_From_Shipyard_Lower),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_4",
                    room: 0u8,
                    exit_idx: 4u8,
                }],
            },
            Exit::ShipyardConstructionBay_To_Shipyard_Lower => &ExitDef {
                area: Area::ShipyardConstructionBay_Lower,
                to: Area::Shipyard_Main,
                disambiguation: Some("Lower"),
                display_name: "Shipyard Construction Bay to Shipyard (Lower)",
                coupled_entrance: Some(Entrance::ShipyardConstructionBay_From_Shipyard_Lower),
                vanilla_entrance: Some(Entrance::Shipyard_From_ShipyardConstructionBay_Lower),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_7",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::ShipyardConstructionBay_To_Shipyard_Upper => &ExitDef {
                area: Area::ShipyardConstructionBay_Upper,
                to: Area::Shipyard_AfterMinecartRide,
                disambiguation: Some("Upper"),
                display_name: "Shipyard Construction Bay to Shipyard (Upper)",
                coupled_entrance: Some(Entrance::ShipyardConstructionBay_From_Shipyard_Upper),
                vanilla_entrance: Some(Entrance::Shipyard_From_ShipyardConstructionBay_Upper),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_7",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::SkippersRetreat_To_SkippersShack => &ExitDef {
                area: Area::SkippersRetreat_NextToShack,
                to: Area::SkippersShack_Main,
                disambiguation: None,
                display_name: "Skipper's Retreat to Skipper's Shack",
                coupled_entrance: Some(Entrance::SkippersRetreat_From_SkippersShack),
                vanilla_entrance: Some(Entrance::SkippersShack_From_SkippersRetreat),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_3",
                    room: 0u8,
                    exit_idx: 3u8,
                }],
            },
            Exit::SkippersRetreat_To_SandSea => &ExitDef {
                area: Area::SkippersRetreat_Start,
                to: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Skipper's Retreat to Sand Sea",
                coupled_entrance: Some(Entrance::SkippersRetreat_From_SandSea),
                vanilla_entrance: Some(Entrance::SandSea_From_SkippersRetreat),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_3",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::SkippersShack_To_SkippersRetreat => &ExitDef {
                area: Area::SkippersShack_Main,
                to: Area::SkippersRetreat_NextToShack,
                disambiguation: None,
                display_name: "Skipper's Shack to Skipper's Retreat",
                coupled_entrance: Some(Entrance::SkippersShack_From_SkippersRetreat),
                vanilla_entrance: Some(Entrance::SkippersRetreat_From_SkippersShack),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F301_5",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LanayruSilentRealm_To_LanayruDesert => &ExitDef {
                area: Area::LanayruSilentRealm_Trial,
                to: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Lanayru Silent Realm to Lanayru Desert",
                coupled_entrance: Some(Entrance::LanayruSilentRealm_From_LanayruDesert),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_LanayruSilentRealm),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::MogmaTurf_To_EldinVolcano_EndVent => &ExitDef {
                area: Area::MogmaTurf_Main,
                to: Area::EldinVolcano_PastMogmaTurf,
                disambiguation: Some("End Vent"),
                display_name: "Mogma Turf to Eldin Volcano (End Vent)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::EldinVolcano_From_MogmaTurf_EndVent),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F210",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::MogmaTurf_To_EldinVolcano_StartVent => &ExitDef {
                area: Area::MogmaTurf_Main,
                to: Area::EldinVolcano_PreMogmaTurf,
                disambiguation: Some("Start Vent"),
                display_name: "Mogma Turf to Eldin Volcano (Start Vent)",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::EldinVolcano_From_MogmaTurf_StartVent),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F210",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::Sandship_To_SandSea => &ExitDef {
                area: Area::Sandship_Deck,
                to: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Sandship to Sand Sea",
                coupled_entrance: Some(Entrance::Sandship_From_SandSea),
                vanilla_entrance: Some(Entrance::SandSea_From_Sandship),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "D301",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D301",
                        room: 1u8,
                        exit_idx: 2u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D301",
                        room: 6u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D301",
                        room: 9u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D301",
                        room: 13u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "B301",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "B301",
                        room: 0u8,
                        exit_idx: 4u8,
                    },
                ],
            },
            Exit::Sandship_To_SandshipBoss => &ExitDef {
                area: Area::Sandship_PastSpume,
                to: Area::SandshipBoss_Main,
                disambiguation: None,
                display_name: "Sandship to Sandship Boss",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::SandshipBoss_From_Sandship),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::BehindTheTemple_To_FaronWoods => &ExitDef {
                area: Area::BehindTheTemple_Main,
                to: Area::FaronWoods_Entry,
                disambiguation: None,
                display_name: "Behind the Temple to Faron Woods",
                coupled_entrance: Some(Entrance::BehindTheTemple_From_FaronWoods),
                vanilla_entrance: Some(Entrance::FaronWoods_From_BehindTheTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F400",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::BehindTheTemple_To_SealedGroundsSpiral => &ExitDef {
                area: Area::BehindTheTemple_Main,
                to: Area::SealedGroundsSpiral_Upper,
                disambiguation: None,
                display_name: "Behind the Temple to Sealed Grounds Spiral",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::SealedGroundsSpiral_From_BehindTheTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F400",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::BehindTheTemple_To_SealedTemple => &ExitDef {
                area: Area::BehindTheTemple_Main,
                to: Area::SealedTemple_Main,
                disambiguation: None,
                display_name: "Behind the Temple to Sealed Temple",
                coupled_entrance: Some(Entrance::BehindTheTemple_From_SealedTemple),
                vanilla_entrance: Some(Entrance::SealedTemple_From_BehindTheTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F400",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::BehindTheTemple_To_Sky_BehindTheTempleStatue => &ExitDef {
                area: Area::BehindTheTemple_Main,
                to: Area::Sky_Field,
                disambiguation: Some("Behind the Temple Statue"),
                display_name: "Behind the Temple to Sky (Behind the Temple Statue)",
                coupled_entrance: Some(Entrance::BehindTheTemple_From_Sky_BehindTheTempleStatue),
                vanilla_entrance: Some(Entrance::Sky_From_BehindTheTemple_BehindTheTempleStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SealedGroundsSpiral_To_SealedTemple => &ExitDef {
                area: Area::SealedGroundsSpiral_Lower,
                to: Area::SealedTemple_Main,
                disambiguation: None,
                display_name: "Sealed Grounds Spiral to Sealed Temple",
                coupled_entrance: Some(Entrance::SealedGroundsSpiral_From_SealedTemple),
                vanilla_entrance: Some(Entrance::SealedTemple_From_SealedGroundsSpiral),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F401",
                    room: 1u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::SealedGroundsSpiral_To_Sky_SealedGroundsStatue => &ExitDef {
                area: Area::SealedGroundsSpiral_Upper,
                to: Area::Sky_Field,
                disambiguation: Some("Sealed Grounds Statue"),
                display_name: "Sealed Grounds Spiral to Sky (Sealed Grounds Statue)",
                coupled_entrance: Some(Entrance::SealedGroundsSpiral_From_Sky_SealedGroundsStatue),
                vanilla_entrance: Some(Entrance::Sky_From_SealedGroundsSpiral_SealedGroundsStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SealedTemple_To_BehindTheTemple => &ExitDef {
                area: Area::SealedTemple_Main,
                to: Area::BehindTheTemple_Main,
                disambiguation: None,
                display_name: "Sealed Temple to Behind the Temple",
                coupled_entrance: Some(Entrance::SealedTemple_From_BehindTheTemple),
                vanilla_entrance: Some(Entrance::BehindTheTemple_From_SealedTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F402",
                    room: 2u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::SealedTemple_To_HyliasTemple => &ExitDef {
                area: Area::SealedTemple_Main,
                to: Area::HyliasTemple_Main,
                disambiguation: None,
                display_name: "Sealed Temple to Hylia's Temple",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::HyliasTemple_From_SealedTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SealedTemple_To_SealedGroundsSpiral => &ExitDef {
                area: Area::SealedTemple_Main,
                to: Area::SealedGroundsSpiral_Lower,
                disambiguation: None,
                display_name: "Sealed Temple to Sealed Grounds Spiral",
                coupled_entrance: Some(Entrance::SealedTemple_From_SealedGroundsSpiral),
                vanilla_entrance: Some(Entrance::SealedGroundsSpiral_From_SealedTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F402",
                    room: 2u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::InsideBambooIsland_To_Sky => &ExitDef {
                area: Area::InsideBambooIsland_Main,
                to: Area::Sky_Field,
                disambiguation: None,
                display_name: "Inside Bamboo Island to Sky",
                coupled_entrance: Some(Entrance::InsideBambooIsland_From_Sky),
                vanilla_entrance: Some(Entrance::Sky_From_InsideBambooIsland),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F019r",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::LumpyPumpkin_To_Sky_North => &ExitDef {
                area: Area::LumpyPumpkin_Main,
                to: Area::Sky_OutsideLumpyPumpkin,
                disambiguation: Some("North"),
                display_name: "Lumpy Pumpkin to Sky (North)",
                coupled_entrance: Some(Entrance::LumpyPumpkin_From_Sky_North),
                vanilla_entrance: Some(Entrance::Sky_From_LumpyPumpkin_North),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F011r",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::LumpyPumpkin_To_Sky_South_Right => &ExitDef {
                area: Area::LumpyPumpkin_Main,
                to: Area::Sky_OutsideLumpyPumpkin,
                disambiguation: Some("South"),
                display_name: "Lumpy Pumpkin to Sky (South Right Door)",
                coupled_entrance: Some(Entrance::LumpyPumpkin_From_Sky_South_Left),
                vanilla_entrance: Some(Entrance::Sky_From_LumpyPumpkin_South_Right),
                door_connection: DoorConnection::Left(Exit::LumpyPumpkin_To_Sky_South_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F011r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::LumpyPumpkin_To_Sky_South_Left => &ExitDef {
                area: Area::LumpyPumpkin_Main,
                to: Area::Sky_OutsideLumpyPumpkin,
                disambiguation: Some("South"),
                display_name: "Lumpy Pumpkin to Sky (South Left Door)",
                coupled_entrance: Some(Entrance::LumpyPumpkin_From_Sky_South_Right),
                vanilla_entrance: Some(Entrance::Sky_From_LumpyPumpkin_South_Left),
                door_connection: DoorConnection::Right(Exit::LumpyPumpkin_To_Sky_South_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F011r",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::Sky_To_BeedlesShop_Night => &ExitDef {
                area: Area::Sky_BeedlesSkyHome,
                to: Area::BeedlesShop_Main,
                disambiguation: Some("Night"),
                display_name: "Sky to Beedle's Shop (Night)",
                coupled_entrance: Some(Entrance::Sky_From_BeedlesShop_Night),
                vanilla_entrance: Some(Entrance::BeedlesShop_From_Sky_Night),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_BehindTheTemple_BehindTheTempleStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::BehindTheTemple_Main,
                disambiguation: Some("Behind the Temple Statue"),
                display_name: "Sky to Behind the Temple (Behind the Temple Statue)",
                coupled_entrance: Some(Entrance::Sky_From_BehindTheTemple_BehindTheTempleStatue),
                vanilla_entrance: Some(Entrance::BehindTheTemple_From_Sky_BehindTheTempleStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_DeepWoods_DeepWoodsStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::DeepWoods_PastBeehive,
                disambiguation: Some("Deep Woods Statue"),
                display_name: "Sky to Deep Woods (Deep Woods Statue)",
                coupled_entrance: Some(Entrance::Sky_From_DeepWoods_DeepWoodsStatue),
                vanilla_entrance: Some(Entrance::DeepWoods_From_Sky_DeepWoodsStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_DeepWoods_ForestTempleStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::DeepWoods_PastBeehive,
                disambiguation: Some("Forest Temple Statue"),
                display_name: "Sky to Deep Woods (Forest Temple Statue)",
                coupled_entrance: Some(Entrance::Sky_From_DeepWoods_ForestTempleStatue),
                vanilla_entrance: Some(Entrance::DeepWoods_From_Sky_ForestTempleStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_EldinVolcano_EldinEntranceStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::EldinVolcano_FirstRoom,
                disambiguation: Some("Eldin Entrance Statue"),
                display_name: "Sky to Eldin Volcano (Eldin Entrance Statue)",
                coupled_entrance: Some(Entrance::Sky_From_EldinVolcano_EldinEntranceStatue),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_Sky_EldinEntranceStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_EldinVolcano_TempleEntranceStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::EldinVolcano_OutsideEt,
                disambiguation: Some("Temple Entrance Statue"),
                display_name: "Sky to Eldin Volcano (Temple Entrance Statue)",
                coupled_entrance: Some(Entrance::Sky_From_EldinVolcano_TempleEntranceStatue),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_Sky_TempleEntranceStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_EldinVolcano_VolcanoEastStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::EldinVolcano_PreMogmaTurf,
                disambiguation: Some("Volcano East Statue"),
                display_name: "Sky to Eldin Volcano (Volcano East Statue)",
                coupled_entrance: Some(Entrance::Sky_From_EldinVolcano_VolcanoEastStatue),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_Sky_VolcanoEastStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_EldinVolcano_VolcanoAscentStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::EldinVolcano_VolcanoAscent,
                disambiguation: Some("Volcano Ascent Statue"),
                display_name: "Sky to Eldin Volcano (Volcano Ascent Statue)",
                coupled_entrance: Some(Entrance::Sky_From_EldinVolcano_VolcanoAscentStatue),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_Sky_VolcanoAscentStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_FaronWoods_FaronWoodsEntryStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::FaronWoods_Entry,
                disambiguation: Some("Faron Woods Entry Statue"),
                display_name: "Sky to Faron Woods (Faron Woods Entry Statue)",
                coupled_entrance: Some(Entrance::Sky_From_FaronWoods_FaronWoodsEntryStatue),
                vanilla_entrance: Some(Entrance::FaronWoods_From_Sky_FaronWoodsEntryStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_FaronWoods_GreatTreeStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::FaronWoods_GreatTreeTop,
                disambiguation: Some("Great Tree Statue"),
                display_name: "Sky to Faron Woods (Great Tree Statue)",
                coupled_entrance: Some(Entrance::Sky_From_FaronWoods_GreatTreeStatue),
                vanilla_entrance: Some(Entrance::FaronWoods_From_Sky_GreatTreeStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_FaronWoods_InTheWoodsStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::FaronWoods_Main,
                disambiguation: Some("In the Woods Statue"),
                display_name: "Sky to Faron Woods (In the Woods Statue)",
                coupled_entrance: Some(Entrance::Sky_From_FaronWoods_InTheWoodsStatue),
                vanilla_entrance: Some(Entrance::FaronWoods_From_Sky_InTheWoodsStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_FaronWoods_ViewingPlatformStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::FaronWoods_Main,
                disambiguation: Some("Viewing Platform Statue"),
                display_name: "Sky to Faron Woods (Viewing Platform Statue)",
                coupled_entrance: Some(Entrance::Sky_From_FaronWoods_ViewingPlatformStatue),
                vanilla_entrance: Some(Entrance::FaronWoods_From_Sky_ViewingPlatformStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_FloriaWaterfall_FloriaWaterfallStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::FloriaWaterfall_Main,
                disambiguation: Some("Floria Waterfall Statue"),
                display_name: "Sky to Floria Waterfall (Floria Waterfall Statue)",
                coupled_entrance: Some(Entrance::Sky_From_FloriaWaterfall_FloriaWaterfallStatue),
                vanilla_entrance: Some(Entrance::FloriaWaterfall_From_Sky_FloriaWaterfallStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_InsideBambooIsland => &ExitDef {
                area: Area::Sky_Field,
                to: Area::InsideBambooIsland_Main,
                disambiguation: None,
                display_name: "Sky to Inside Bamboo Island",
                coupled_entrance: Some(Entrance::Sky_From_InsideBambooIsland),
                vanilla_entrance: Some(Entrance::InsideBambooIsland_From_Sky),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    exit_idx: 13u8,
                }],
            },
            Exit::Sky_To_InsideThunderhead => &ExitDef {
                area: Area::Sky_Field,
                to: Area::InsideThunderhead_Main,
                disambiguation: None,
                display_name: "Sky to Inside Thunderhead",
                coupled_entrance: Some(Entrance::Sky_From_InsideThunderhead),
                vanilla_entrance: Some(Entrance::InsideThunderhead_From_Sky),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    exit_idx: 25u8,
                }],
            },
            Exit::Sky_To_LakeFloria_LakeFloriaStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::LakeFloria_StatueSpot,
                disambiguation: Some("Lake Floria Statue"),
                display_name: "Sky to Lake Floria (Lake Floria Statue)",
                coupled_entrance: Some(Entrance::Sky_From_LakeFloria_LakeFloriaStatue),
                vanilla_entrance: Some(Entrance::LakeFloria_From_Sky_LakeFloriaStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_LanayruDesert_DesertEntranceStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::LanayruDesert_HookBeetleArea,
                disambiguation: Some("Desert Entrance Statue"),
                display_name: "Sky to Lanayru Desert (Desert Entrance Statue)",
                coupled_entrance: Some(Entrance::Sky_From_LanayruDesert_DesertEntranceStatue),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_Sky_DesertEntranceStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_LanayruDesert_NorthDesertStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::LanayruDesert_PastToT,
                disambiguation: Some("North Desert Statue"),
                display_name: "Sky to Lanayru Desert (North Desert Statue)",
                coupled_entrance: Some(Entrance::Sky_From_LanayruDesert_NorthDesertStatue),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_Sky_NorthDesertStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_LanayruDesert_StoneCacheStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::LanayruDesert_PastToT,
                disambiguation: Some("Stone Cache Statue"),
                display_name: "Sky to Lanayru Desert (Stone Cache Statue)",
                coupled_entrance: Some(Entrance::Sky_From_LanayruDesert_StoneCacheStatue),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_Sky_StoneCacheStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_LanayruDesert_WestDesertStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::LanayruDesert_SandOasis,
                disambiguation: Some("West Desert Statue"),
                display_name: "Sky to Lanayru Desert (West Desert Statue)",
                coupled_entrance: Some(Entrance::Sky_From_LanayruDesert_WestDesertStatue),
                vanilla_entrance: Some(Entrance::LanayruDesert_From_Sky_WestDesertStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_LanayruMines_LanayruMineEntryStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::LanayruMines_FirstHalf,
                disambiguation: Some("Lanayru Mine Entry Statue"),
                display_name: "Sky to Lanayru Mines (Lanayru Mine Entry Statue)",
                coupled_entrance: Some(Entrance::Sky_From_LanayruMines_LanayruMineEntryStatue),
                vanilla_entrance: Some(Entrance::LanayruMines_From_Sky_LanayruMineEntryStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_OutsideFireSanctuary_InsideTheVolcanoStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::OutsideFireSanctuary_ToFireSanctuary,
                disambiguation: Some("Inside the Volcano Statue"),
                display_name: "Sky to Outside Fire Sanctuary (Inside the Volcano Statue)",
                coupled_entrance: Some(
                    Entrance::Sky_From_OutsideFireSanctuary_InsideTheVolcanoStatue,
                ),
                vanilla_entrance: Some(
                    Entrance::OutsideFireSanctuary_From_Sky_InsideTheVolcanoStatue,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_SealedGroundsSpiral_SealedGroundsStatue => &ExitDef {
                area: Area::Sky_Field,
                to: Area::SealedGroundsSpiral_Upper,
                disambiguation: Some("Sealed Grounds Statue"),
                display_name: "Sky to Sealed Grounds Spiral (Sealed Grounds Statue)",
                coupled_entrance: Some(Entrance::Sky_From_SealedGroundsSpiral_SealedGroundsStatue),
                vanilla_entrance: Some(Entrance::SealedGroundsSpiral_From_Sky_SealedGroundsStatue),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_Skyloft => &ExitDef {
                area: Area::Sky_Field,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Sky to Skyloft",
                coupled_entrance: Some(Entrance::Sky_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_Sky),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::Sky_To_LumpyPumpkin_North => &ExitDef {
                area: Area::Sky_OutsideLumpyPumpkin,
                to: Area::LumpyPumpkin_Main,
                disambiguation: Some("North"),
                display_name: "Sky to Lumpy Pumpkin (North)",
                coupled_entrance: Some(Entrance::Sky_From_LumpyPumpkin_North),
                vanilla_entrance: Some(Entrance::LumpyPumpkin_From_Sky_North),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    exit_idx: 20u8,
                }],
            },
            Exit::Sky_To_LumpyPumpkin_South_Right => &ExitDef {
                area: Area::Sky_OutsideLumpyPumpkin,
                to: Area::LumpyPumpkin_Main,
                disambiguation: Some("South"),
                display_name: "Sky to Lumpy Pumpkin (South Right Door)",
                coupled_entrance: Some(Entrance::Sky_From_LumpyPumpkin_South_Left),
                vanilla_entrance: Some(Entrance::LumpyPumpkin_From_Sky_South_Right),
                door_connection: DoorConnection::Left(Exit::Sky_To_LumpyPumpkin_South_Left),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    exit_idx: 18u8,
                }],
            },
            Exit::Sky_To_LumpyPumpkin_South_Left => &ExitDef {
                area: Area::Sky_OutsideLumpyPumpkin,
                to: Area::LumpyPumpkin_Main,
                disambiguation: Some("South"),
                display_name: "Sky to Lumpy Pumpkin (South Left Door)",
                coupled_entrance: Some(Entrance::Sky_From_LumpyPumpkin_South_Right),
                vanilla_entrance: Some(Entrance::LumpyPumpkin_From_Sky_South_Left),
                door_connection: DoorConnection::Right(Exit::Sky_To_LumpyPumpkin_South_Right),
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    exit_idx: 19u8,
                }],
            },
            Exit::SkyKeepEntry_To_Skyloft => &ExitDef {
                area: Area::SkyKeepEntry_Main,
                to: Area::Skyloft_ToSkyKeep,
                disambiguation: None,
                display_name: "Sky Keep Entry to Skyloft",
                coupled_entrance: Some(Entrance::SkyKeepEntry_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_SkyKeepEntry),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "D003_7",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D003_7",
                        room: 0u8,
                        exit_idx: 2u8,
                    },
                ],
            },
            Exit::SkyloftSilentRealm_To_Skyloft => &ExitDef {
                area: Area::SkyloftSilentRealm_Trial,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Skyloft Silent Realm to Skyloft",
                coupled_entrance: Some(Entrance::SkyloftSilentRealm_From_Skyloft),
                vanilla_entrance: Some(Entrance::Skyloft_From_SkyloftSilentRealm),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::BertiesHouse_To_Skyloft => &ExitDef {
                area: Area::BertiesHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Bertie's House to Skyloft",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Skyloft_From_BertiesHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F014r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::GondosHouse_To_Skyloft => &ExitDef {
                area: Area::GondosHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Gondo's House to Skyloft",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Skyloft_From_GondosHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F015r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::MallarasHouse_To_Skyloft => &ExitDef {
                area: Area::MallarasHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Mallara's House to Skyloft",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Skyloft_From_MallarasHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F016r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::RupinsHouse_To_Skyloft => &ExitDef {
                area: Area::RupinsHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Rupin's House to Skyloft",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Skyloft_From_RupinsHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F017r",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::Skyloft_To_BatreauxHouse => &ExitDef {
                area: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::BatreauxHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Batreaux' House",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::BatreauxHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 30u8,
                }],
            },
            Exit::Skyloft_To_BertiesHouse => &ExitDef {
                area: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::BertiesHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Bertie's House",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::BertiesHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 34u8,
                }],
            },
            Exit::Skyloft_To_GondosHouse => &ExitDef {
                area: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::GondosHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Gondo's House",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::GondosHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 35u8,
                }],
            },
            Exit::Skyloft_To_MallarasHouse => &ExitDef {
                area: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::MallarasHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Mallara's House",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::MallarasHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 36u8,
                }],
            },
            Exit::Skyloft_To_RupinsHouse => &ExitDef {
                area: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::RupinsHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Rupin's House",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::RupinsHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 37u8,
                }],
            },
            Exit::Skyloft_To_SparrotsHouse => &ExitDef {
                area: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::SparrotsHouse_Main,
                disambiguation: None,
                display_name: "Skyloft to Sparrot's House",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::SparrotsHouse_From_Skyloft),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    exit_idx: 33u8,
                }],
            },
            Exit::SparrotsHouse_To_Skyloft => &ExitDef {
                area: Area::SparrotsHouse_Main,
                to: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Sparrot's House to Skyloft",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::Skyloft_From_SparrotsHouse),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F013r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::SkyviewBoss_To_SkyviewSpring => &ExitDef {
                area: Area::SkyviewBoss_Main,
                to: Area::SkyviewSpring_Main,
                disambiguation: None,
                display_name: "Skyview Boss to Skyview Spring",
                coupled_entrance: Some(Entrance::SkyviewBoss_From_SkyviewSpring),
                vanilla_entrance: Some(Entrance::SkyviewSpring_From_SkyviewBoss),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SkyviewBoss_To_SkyviewTemple => &ExitDef {
                area: Area::SkyviewBoss_Main,
                to: Area::SkyviewTemple_BossDoorArea,
                disambiguation: None,
                display_name: "Skyview Boss to Skyview Temple",
                coupled_entrance: Some(Entrance::SkyviewBoss_From_SkyviewTemple),
                vanilla_entrance: Some(Entrance::SkyviewTemple_From_SkyviewBoss),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SkyviewSpring_To_DeepWoods => &ExitDef {
                area: Area::SkyviewSpring_Main,
                to: Area::DeepWoods_PastBeehive,
                disambiguation: None,
                display_name: "Skyview Spring to Deep Woods",
                coupled_entrance: None,
                vanilla_entrance: Some(Entrance::DeepWoods_From_SkyviewSpring),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SkyviewSpring_To_SkyviewBoss => &ExitDef {
                area: Area::SkyviewSpring_Main,
                to: Area::SkyviewBoss_Main,
                disambiguation: None,
                display_name: "Skyview Spring to Skyview Boss",
                coupled_entrance: Some(Entrance::SkyviewSpring_From_SkyviewBoss),
                vanilla_entrance: Some(Entrance::SkyviewBoss_From_SkyviewSpring),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SkyviewTemple_To_SkyviewBoss => &ExitDef {
                area: Area::SkyviewTemple_BossDoorArea,
                to: Area::SkyviewBoss_Main,
                disambiguation: None,
                display_name: "Skyview Temple to Skyview Boss",
                coupled_entrance: Some(Entrance::SkyviewTemple_From_SkyviewBoss),
                vanilla_entrance: Some(Entrance::SkyviewBoss_From_SkyviewTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::SkyviewTemple_To_DeepWoods => &ExitDef {
                area: Area::SkyviewTemple_Entry,
                to: Area::DeepWoods_PastBeehive,
                disambiguation: None,
                display_name: "Skyview Temple to Deep Woods",
                coupled_entrance: Some(Entrance::SkyviewTemple_From_DeepWoods),
                vanilla_entrance: Some(Entrance::DeepWoods_From_SkyviewTemple),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[
                    ExitPatchInfo {
                        stage_name: "B100_1",
                        room: 0u8,
                        exit_idx: 1u8,
                    },
                    ExitPatchInfo {
                        stage_name: "B100_1",
                        room: 0u8,
                        exit_idx: 4u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D100",
                        room: 0u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D100",
                        room: 0u8,
                        exit_idx: 2u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D100",
                        room: 2u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D100",
                        room: 5u8,
                        exit_idx: 0u8,
                    },
                    ExitPatchInfo {
                        stage_name: "D100",
                        room: 9u8,
                        exit_idx: 0u8,
                    },
                ],
            },
            Exit::InsideThunderhead_To_IsleOfSongs => &ExitDef {
                area: Area::InsideThunderhead_Main,
                to: Area::IsleOfSongs_Main,
                disambiguation: None,
                display_name: "Inside Thunderhead to Isle of Songs",
                coupled_entrance: Some(Entrance::InsideThunderhead_From_IsleOfSongs),
                vanilla_entrance: Some(Entrance::IsleOfSongs_From_InsideThunderhead),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F023",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::InsideThunderhead_To_Sky => &ExitDef {
                area: Area::InsideThunderhead_Main,
                to: Area::Sky_Field,
                disambiguation: None,
                display_name: "Inside Thunderhead to Sky",
                coupled_entrance: Some(Entrance::InsideThunderhead_From_Sky),
                vanilla_entrance: Some(Entrance::Sky_From_InsideThunderhead),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F023",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::IsleOfSongs_To_InsideThunderhead => &ExitDef {
                area: Area::IsleOfSongs_Main,
                to: Area::InsideThunderhead_Main,
                disambiguation: None,
                display_name: "Isle of Songs to Inside Thunderhead",
                coupled_entrance: Some(Entrance::IsleOfSongs_From_InsideThunderhead),
                vanilla_entrance: Some(Entrance::InsideThunderhead_From_IsleOfSongs),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F010r",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::InsideVolcanoSummit_To_EldinVolcano => &ExitDef {
                area: Area::InsideVolcanoSummit_Main,
                to: Area::EldinVolcano_HotCaveArea,
                disambiguation: None,
                display_name: "Inside Volcano Summit to Eldin Volcano",
                coupled_entrance: Some(Entrance::InsideVolcanoSummit_From_EldinVolcano),
                vanilla_entrance: Some(Entrance::EldinVolcano_From_InsideVolcanoSummit),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F201_1",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::InsideVolcanoSummit_To_OutsideFireSanctuary => &ExitDef {
                area: Area::InsideVolcanoSummit_Main,
                to: Area::OutsideFireSanctuary_ToInsideSummit,
                disambiguation: None,
                display_name: "Inside Volcano Summit to Outside Fire Sanctuary",
                coupled_entrance: Some(Entrance::InsideVolcanoSummit_From_OutsideFireSanctuary),
                vanilla_entrance: Some(Entrance::OutsideFireSanctuary_From_InsideVolcanoSummit),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F201_1",
                    room: 0u8,
                    exit_idx: 2u8,
                }],
            },
            Exit::InsideVolcanoSummit_To_VolcanoSummitWaterfall => &ExitDef {
                area: Area::InsideVolcanoSummit_Main,
                to: Area::VolcanoSummitWaterfall_Main,
                disambiguation: None,
                display_name: "Inside Volcano Summit to Volcano Summit Waterfall",
                coupled_entrance: Some(Entrance::InsideVolcanoSummit_From_VolcanoSummitWaterfall),
                vanilla_entrance: Some(Entrance::VolcanoSummitWaterfall_From_InsideVolcanoSummit),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F201_1",
                    room: 0u8,
                    exit_idx: 1u8,
                }],
            },
            Exit::OutsideFireSanctuary_To_FireSanctuaryA => &ExitDef {
                area: Area::OutsideFireSanctuary_ToFireSanctuary,
                to: Area::FireSanctuaryA_Entry,
                disambiguation: None,
                display_name: "Outside Fire Sanctuary to Fire Sanctuary A",
                coupled_entrance: Some(Entrance::OutsideFireSanctuary_From_FireSanctuaryA),
                vanilla_entrance: Some(Entrance::FireSanctuaryA_From_OutsideFireSanctuary),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::OutsideFireSanctuary_To_Sky_InsideTheVolcanoStatue => &ExitDef {
                area: Area::OutsideFireSanctuary_ToFireSanctuary,
                to: Area::Sky_Field,
                disambiguation: Some("Inside the Volcano Statue"),
                display_name: "Outside Fire Sanctuary to Sky (Inside the Volcano Statue)",
                coupled_entrance: Some(
                    Entrance::OutsideFireSanctuary_From_Sky_InsideTheVolcanoStatue,
                ),
                vanilla_entrance: Some(
                    Entrance::Sky_From_OutsideFireSanctuary_InsideTheVolcanoStatue,
                ),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Never,
                patch_info: &[],
            },
            Exit::OutsideFireSanctuary_To_InsideVolcanoSummit => &ExitDef {
                area: Area::OutsideFireSanctuary_ToInsideSummit,
                to: Area::InsideVolcanoSummit_Main,
                disambiguation: None,
                display_name: "Outside Fire Sanctuary to Inside Volcano Summit",
                coupled_entrance: Some(Entrance::OutsideFireSanctuary_From_InsideVolcanoSummit),
                vanilla_entrance: Some(Entrance::InsideVolcanoSummit_From_OutsideFireSanctuary),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F201_3",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
            Exit::VolcanoSummitWaterfall_To_InsideVolcanoSummit => &ExitDef {
                area: Area::VolcanoSummitWaterfall_Main,
                to: Area::InsideVolcanoSummit_Main,
                disambiguation: None,
                display_name: "Volcano Summit Waterfall to Inside Volcano Summit",
                coupled_entrance: Some(Entrance::VolcanoSummitWaterfall_From_InsideVolcanoSummit),
                vanilla_entrance: Some(Entrance::InsideVolcanoSummit_From_VolcanoSummitWaterfall),
                door_connection: DoorConnection::No,
                connection_shuffle_type: ConnectionShuffleType::Other,
                patch_info: &[ExitPatchInfo {
                    stage_name: "F201_4",
                    room: 0u8,
                    exit_idx: 0u8,
                }],
            },
        }
    }
}
pub struct EntrancePatchInfo {
    pub stage_name: &'static str,
    pub room: u8,
    pub layer: u8,
    pub entrance_id: u8,
}
pub struct EntranceDef {
    pub area: Area,
    pub from: Area,
    pub disambiguation: Option<&'static str>,
    pub display_name: &'static str,
    pub patch_info: Option<EntrancePatchInfo>,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Entrance {
    AncientCisternBoss_From_AncientCistern,
    FloriaWaterfall_From_AncientCistern,
    AncientCisternCandleRoom_From_AncientCisternBoss,
    Skyloft_From_BatreauxHouse,
    Sky_From_BeedlesShop_Night,
    Skyloft_From_BeedlesShop_Day,
    Skyloft_From_Bazaar_North,
    Skyloft_From_Bazaar_South,
    Skyloft_From_Bazaar_West,
    Skyloft_From_ParrowAndOriellesHouse,
    Skyloft_From_PeatricesHouse,
    Skyloft_From_PipersHouse,
    Bazaar_From_Skyloft_North,
    Bazaar_From_Skyloft_South,
    Bazaar_From_Skyloft_West,
    BeedlesShop_From_Skyloft_Day,
    ParrowAndOriellesHouse_From_Skyloft,
    PeatricesHouse_From_Skyloft,
    PipersHouse_From_Skyloft,
    Sky_From_Skyloft,
    SkyloftSilentRealm_From_Skyloft,
    WaterfallCave_From_Skyloft_Upper,
    WrynasHouse_From_Skyloft,
    Sky_From_Skyloft_PastWaterfallCave,
    WaterfallCave_From_Skyloft_Lower,
    SkyKeepEntry_From_Skyloft,
    Skyloft_From_WaterfallCave_Upper,
    Skyloft_From_WaterfallCave_Lower,
    Skyloft_From_WrynasHouse,
    EarthTempleBoss_From_EarthTemple,
    EldinVolcano_From_EarthTemple,
    EarthTempleSpring_From_EarthTempleBoss,
    EldinVolcano_From_EarthTempleSpring,
    EldinVolcano_From_EldinSilentRealm,
    Sky_From_EldinVolcano_EldinEntranceStatue,
    InsideVolcanoSummit_From_EldinVolcano,
    ThrillDiggerCave_From_EldinVolcano,
    EarthTemple_From_EldinVolcano,
    Sky_From_EldinVolcano_TempleEntranceStatue,
    MogmaTurf_From_EldinVolcano_Skydive,
    Sky_From_EldinVolcano_VolcanoEastStatue,
    EldinSilentRealm_From_EldinVolcano,
    Sky_From_EldinVolcano_VolcanoAscentStatue,
    EldinVolcano_From_ThrillDiggerCave,
    FaronWoods_From_FaronSilentRealm,
    FaronWoods_From_DeepWoods,
    Sky_From_DeepWoods_DeepWoodsStatue,
    Sky_From_DeepWoods_ForestTempleStatue,
    SkyviewTemple_From_DeepWoods,
    BehindTheTemple_From_FaronWoods,
    Sky_From_FaronWoods_FaronWoodsEntryStatue,
    GreatTree_From_FaronWoods_LowerPlatform,
    GreatTree_From_FaronWoods_UpperPlatform,
    GreatTree_From_FaronWoods_Top,
    Sky_From_FaronWoods_GreatTreeStatue,
    DeepWoods_From_FaronWoods,
    FaronSilentRealm_From_FaronWoods,
    GreatTree_From_FaronWoods_Tunnel,
    LakeFloria_From_FaronWoods,
    Sky_From_FaronWoods_InTheWoodsStatue,
    Sky_From_FaronWoods_ViewingPlatformStatue,
    FaronWoods_From_GreatTree_Tunnel,
    FaronWoods_From_GreatTree_LowerPlatform,
    FaronWoods_From_GreatTree_UpperPlatform,
    FaronWoods_From_GreatTree_Top,
    OutsideFireSanctuary_From_FireSanctuaryA,
    FireSanctuaryBoss_From_FireSanctuaryA,
    FireSanctuaryB_From_FireSanctuaryA,
    FireSanctuaryA_From_FireSanctuaryB,
    FireSanctuaryFlameRoom_From_FireSanctuaryBoss,
    Skyloft_From_InsideGoddessStatue,
    Skyloft_From_KnightAcademy_Lower_Right,
    Skyloft_From_KnightAcademy_Lower_Left,
    Skyloft_From_KnightAcademy_Upper_Right,
    Skyloft_From_KnightAcademy_Upper_Left,
    InsideGoddessStatue_From_Skyloft,
    KnightAcademy_From_Skyloft_Chimney,
    KnightAcademy_From_Skyloft_Lower_Right,
    KnightAcademy_From_Skyloft_Lower_Left,
    KnightAcademy_From_Skyloft_Upper_Right,
    KnightAcademy_From_Skyloft_Upper_Left,
    SparringHall_From_Skyloft_Right,
    SparringHall_From_Skyloft_Left,
    Skyloft_From_SparringHall_Right,
    Skyloft_From_SparringHall_Left,
    FloriaWaterfall_From_FaroresLair,
    LakeFloria_From_FaroresLair,
    AncientCistern_From_FloriaWaterfall,
    FaronWoods_From_FloriaWaterfall,
    FaroresLair_From_FloriaWaterfall,
    Sky_From_FloriaWaterfall_FloriaWaterfallStatue,
    Sky_From_LakeFloria_LakeFloriaStatue,
    FaroresLair_From_LakeFloria,
    LanayruDesert_From_LanayruCaves,
    LanayruMines_From_LanayruCaves,
    SandSeaDocks_From_LanayruCaves,
    LanayruDesert_From_FireNode,
    LanayruMines_From_LanayruDesert,
    Sky_From_LanayruDesert_DesertEntranceStatue,
    FireNode_From_LanayruDesert,
    LanayruMiningFacilityA_From_LanayruDesert,
    LanayruSilentRealm_From_LanayruDesert,
    LightningNode_From_LanayruDesert,
    Sky_From_LanayruDesert_NorthDesertStatue,
    Sky_From_LanayruDesert_StoneCacheStatue,
    TempleOfTime_From_LanayruDesert_End,
    LanayruCaves_From_LanayruDesert,
    Sky_From_LanayruDesert_WestDesertStatue,
    TempleOfTime_From_LanayruDesert_Start,
    LanayruDesert_From_LightningNode,
    LanayruDesert_From_TempleOfTime_End,
    LanayruDesert_From_TempleOfTime_Start,
    Sky_From_LanayruMines_LanayruMineEntryStatue,
    LanayruCaves_From_LanayruMines,
    LanayruDesert_From_LanayruMines,
    LanayruDesert_From_LanayruMiningFacilityA,
    LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub2,
    LanayruMiningFacilityB_From_LanayruMiningFacilityA_HubW,
    LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub,
    LanayruMiningFacilityBoss_From_LanayruMiningFacilityB,
    LanayruMiningFacilityToToT_From_LanayruMiningFacilityBoss,
    TempleOfTime_From_LanayruMiningFacilityToToT,
    OutsidePiratesStronghold_From_InsidePiratesStronghold_End,
    OutsidePiratesStronghold_From_InsidePiratesStronghold_Beginning,
    InsidePiratesStronghold_From_OutsidePiratesStronghold_End,
    InsidePiratesStronghold_From_OutsidePiratesStronghold_Beginning,
    SandSea_From_OutsidePiratesStronghold,
    OutsidePiratesStronghold_From_SandSea,
    SandSeaDocks_From_SandSea,
    Sandship_From_SandSea,
    Shipyard_From_SandSea,
    SkippersRetreat_From_SandSea,
    SandSea_From_SandSeaDocks,
    Sky_From_SandSeaDocks_AncientHarbor,
    LanayruCaves_From_SandSeaDocks,
    ShipyardConstructionBay_From_Shipyard_Upper,
    SandSea_From_Shipyard,
    ShipyardConstructionBay_From_Shipyard_Lower,
    Shipyard_From_ShipyardConstructionBay_Lower,
    Shipyard_From_ShipyardConstructionBay_Upper,
    SkippersShack_From_SkippersRetreat,
    SandSea_From_SkippersRetreat,
    SkippersRetreat_From_SkippersShack,
    LanayruDesert_From_LanayruSilentRealm,
    EldinVolcano_From_MogmaTurf_EndVent,
    EldinVolcano_From_MogmaTurf_StartVent,
    SandSea_From_Sandship,
    SandshipBoss_From_Sandship,
    FaronWoods_From_BehindTheTemple,
    SealedGroundsSpiral_From_BehindTheTemple,
    SealedTemple_From_BehindTheTemple,
    Sky_From_BehindTheTemple_BehindTheTempleStatue,
    SealedTemple_From_SealedGroundsSpiral,
    Sky_From_SealedGroundsSpiral_SealedGroundsStatue,
    BehindTheTemple_From_SealedTemple,
    HyliasTemple_From_SealedTemple,
    SealedGroundsSpiral_From_SealedTemple,
    Sky_From_InsideBambooIsland,
    Sky_From_LumpyPumpkin_North,
    Sky_From_LumpyPumpkin_South_Right,
    Sky_From_LumpyPumpkin_South_Left,
    BeedlesShop_From_Sky_Night,
    BehindTheTemple_From_Sky_BehindTheTempleStatue,
    DeepWoods_From_Sky_DeepWoodsStatue,
    DeepWoods_From_Sky_ForestTempleStatue,
    EldinVolcano_From_Sky_EldinEntranceStatue,
    EldinVolcano_From_Sky_TempleEntranceStatue,
    EldinVolcano_From_Sky_VolcanoEastStatue,
    EldinVolcano_From_Sky_VolcanoAscentStatue,
    FaronWoods_From_Sky_FaronWoodsEntryStatue,
    FaronWoods_From_Sky_GreatTreeStatue,
    FaronWoods_From_Sky_InTheWoodsStatue,
    FaronWoods_From_Sky_ViewingPlatformStatue,
    FloriaWaterfall_From_Sky_FloriaWaterfallStatue,
    InsideBambooIsland_From_Sky,
    InsideThunderhead_From_Sky,
    LakeFloria_From_Sky_LakeFloriaStatue,
    LanayruDesert_From_Sky_DesertEntranceStatue,
    LanayruDesert_From_Sky_NorthDesertStatue,
    LanayruDesert_From_Sky_StoneCacheStatue,
    LanayruDesert_From_Sky_WestDesertStatue,
    LanayruMines_From_Sky_LanayruMineEntryStatue,
    OutsideFireSanctuary_From_Sky_InsideTheVolcanoStatue,
    SealedGroundsSpiral_From_Sky_SealedGroundsStatue,
    Skyloft_From_Sky,
    LumpyPumpkin_From_Sky_North,
    LumpyPumpkin_From_Sky_South_Right,
    LumpyPumpkin_From_Sky_South_Left,
    Skyloft_From_SkyKeepEntry,
    Skyloft_From_SkyloftSilentRealm,
    Skyloft_From_BertiesHouse,
    Skyloft_From_GondosHouse,
    Skyloft_From_MallarasHouse,
    Skyloft_From_RupinsHouse,
    BatreauxHouse_From_Skyloft,
    BertiesHouse_From_Skyloft,
    GondosHouse_From_Skyloft,
    MallarasHouse_From_Skyloft,
    RupinsHouse_From_Skyloft,
    SparrotsHouse_From_Skyloft,
    Skyloft_From_SparrotsHouse,
    SkyviewSpring_From_SkyviewBoss,
    SkyviewTemple_From_SkyviewBoss,
    DeepWoods_From_SkyviewSpring,
    SkyviewBoss_From_SkyviewSpring,
    SkyviewBoss_From_SkyviewTemple,
    DeepWoods_From_SkyviewTemple,
    IsleOfSongs_From_InsideThunderhead,
    Sky_From_InsideThunderhead,
    InsideThunderhead_From_IsleOfSongs,
    EldinVolcano_From_InsideVolcanoSummit,
    OutsideFireSanctuary_From_InsideVolcanoSummit,
    VolcanoSummitWaterfall_From_InsideVolcanoSummit,
    FireSanctuaryA_From_OutsideFireSanctuary,
    Sky_From_OutsideFireSanctuary_InsideTheVolcanoStatue,
    InsideVolcanoSummit_From_OutsideFireSanctuary,
    InsideVolcanoSummit_From_VolcanoSummitWaterfall,
}
impl From<Entrance> for usize {
    fn from(val: Entrance) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Entrance {
    const ALL: &'static [Entrance] = &[
        Entrance::AncientCisternBoss_From_AncientCistern,
        Entrance::FloriaWaterfall_From_AncientCistern,
        Entrance::AncientCisternCandleRoom_From_AncientCisternBoss,
        Entrance::Skyloft_From_BatreauxHouse,
        Entrance::Sky_From_BeedlesShop_Night,
        Entrance::Skyloft_From_BeedlesShop_Day,
        Entrance::Skyloft_From_Bazaar_North,
        Entrance::Skyloft_From_Bazaar_South,
        Entrance::Skyloft_From_Bazaar_West,
        Entrance::Skyloft_From_ParrowAndOriellesHouse,
        Entrance::Skyloft_From_PeatricesHouse,
        Entrance::Skyloft_From_PipersHouse,
        Entrance::Bazaar_From_Skyloft_North,
        Entrance::Bazaar_From_Skyloft_South,
        Entrance::Bazaar_From_Skyloft_West,
        Entrance::BeedlesShop_From_Skyloft_Day,
        Entrance::ParrowAndOriellesHouse_From_Skyloft,
        Entrance::PeatricesHouse_From_Skyloft,
        Entrance::PipersHouse_From_Skyloft,
        Entrance::Sky_From_Skyloft,
        Entrance::SkyloftSilentRealm_From_Skyloft,
        Entrance::WaterfallCave_From_Skyloft_Upper,
        Entrance::WrynasHouse_From_Skyloft,
        Entrance::Sky_From_Skyloft_PastWaterfallCave,
        Entrance::WaterfallCave_From_Skyloft_Lower,
        Entrance::SkyKeepEntry_From_Skyloft,
        Entrance::Skyloft_From_WaterfallCave_Upper,
        Entrance::Skyloft_From_WaterfallCave_Lower,
        Entrance::Skyloft_From_WrynasHouse,
        Entrance::EarthTempleBoss_From_EarthTemple,
        Entrance::EldinVolcano_From_EarthTemple,
        Entrance::EarthTempleSpring_From_EarthTempleBoss,
        Entrance::EldinVolcano_From_EarthTempleSpring,
        Entrance::EldinVolcano_From_EldinSilentRealm,
        Entrance::Sky_From_EldinVolcano_EldinEntranceStatue,
        Entrance::InsideVolcanoSummit_From_EldinVolcano,
        Entrance::ThrillDiggerCave_From_EldinVolcano,
        Entrance::EarthTemple_From_EldinVolcano,
        Entrance::Sky_From_EldinVolcano_TempleEntranceStatue,
        Entrance::MogmaTurf_From_EldinVolcano_Skydive,
        Entrance::Sky_From_EldinVolcano_VolcanoEastStatue,
        Entrance::EldinSilentRealm_From_EldinVolcano,
        Entrance::Sky_From_EldinVolcano_VolcanoAscentStatue,
        Entrance::EldinVolcano_From_ThrillDiggerCave,
        Entrance::FaronWoods_From_FaronSilentRealm,
        Entrance::FaronWoods_From_DeepWoods,
        Entrance::Sky_From_DeepWoods_DeepWoodsStatue,
        Entrance::Sky_From_DeepWoods_ForestTempleStatue,
        Entrance::SkyviewTemple_From_DeepWoods,
        Entrance::BehindTheTemple_From_FaronWoods,
        Entrance::Sky_From_FaronWoods_FaronWoodsEntryStatue,
        Entrance::GreatTree_From_FaronWoods_LowerPlatform,
        Entrance::GreatTree_From_FaronWoods_UpperPlatform,
        Entrance::GreatTree_From_FaronWoods_Top,
        Entrance::Sky_From_FaronWoods_GreatTreeStatue,
        Entrance::DeepWoods_From_FaronWoods,
        Entrance::FaronSilentRealm_From_FaronWoods,
        Entrance::GreatTree_From_FaronWoods_Tunnel,
        Entrance::LakeFloria_From_FaronWoods,
        Entrance::Sky_From_FaronWoods_InTheWoodsStatue,
        Entrance::Sky_From_FaronWoods_ViewingPlatformStatue,
        Entrance::FaronWoods_From_GreatTree_Tunnel,
        Entrance::FaronWoods_From_GreatTree_LowerPlatform,
        Entrance::FaronWoods_From_GreatTree_UpperPlatform,
        Entrance::FaronWoods_From_GreatTree_Top,
        Entrance::OutsideFireSanctuary_From_FireSanctuaryA,
        Entrance::FireSanctuaryBoss_From_FireSanctuaryA,
        Entrance::FireSanctuaryB_From_FireSanctuaryA,
        Entrance::FireSanctuaryA_From_FireSanctuaryB,
        Entrance::FireSanctuaryFlameRoom_From_FireSanctuaryBoss,
        Entrance::Skyloft_From_InsideGoddessStatue,
        Entrance::Skyloft_From_KnightAcademy_Lower_Right,
        Entrance::Skyloft_From_KnightAcademy_Lower_Left,
        Entrance::Skyloft_From_KnightAcademy_Upper_Right,
        Entrance::Skyloft_From_KnightAcademy_Upper_Left,
        Entrance::InsideGoddessStatue_From_Skyloft,
        Entrance::KnightAcademy_From_Skyloft_Chimney,
        Entrance::KnightAcademy_From_Skyloft_Lower_Right,
        Entrance::KnightAcademy_From_Skyloft_Lower_Left,
        Entrance::KnightAcademy_From_Skyloft_Upper_Right,
        Entrance::KnightAcademy_From_Skyloft_Upper_Left,
        Entrance::SparringHall_From_Skyloft_Right,
        Entrance::SparringHall_From_Skyloft_Left,
        Entrance::Skyloft_From_SparringHall_Right,
        Entrance::Skyloft_From_SparringHall_Left,
        Entrance::FloriaWaterfall_From_FaroresLair,
        Entrance::LakeFloria_From_FaroresLair,
        Entrance::AncientCistern_From_FloriaWaterfall,
        Entrance::FaronWoods_From_FloriaWaterfall,
        Entrance::FaroresLair_From_FloriaWaterfall,
        Entrance::Sky_From_FloriaWaterfall_FloriaWaterfallStatue,
        Entrance::Sky_From_LakeFloria_LakeFloriaStatue,
        Entrance::FaroresLair_From_LakeFloria,
        Entrance::LanayruDesert_From_LanayruCaves,
        Entrance::LanayruMines_From_LanayruCaves,
        Entrance::SandSeaDocks_From_LanayruCaves,
        Entrance::LanayruDesert_From_FireNode,
        Entrance::LanayruMines_From_LanayruDesert,
        Entrance::Sky_From_LanayruDesert_DesertEntranceStatue,
        Entrance::FireNode_From_LanayruDesert,
        Entrance::LanayruMiningFacilityA_From_LanayruDesert,
        Entrance::LanayruSilentRealm_From_LanayruDesert,
        Entrance::LightningNode_From_LanayruDesert,
        Entrance::Sky_From_LanayruDesert_NorthDesertStatue,
        Entrance::Sky_From_LanayruDesert_StoneCacheStatue,
        Entrance::TempleOfTime_From_LanayruDesert_End,
        Entrance::LanayruCaves_From_LanayruDesert,
        Entrance::Sky_From_LanayruDesert_WestDesertStatue,
        Entrance::TempleOfTime_From_LanayruDesert_Start,
        Entrance::LanayruDesert_From_LightningNode,
        Entrance::LanayruDesert_From_TempleOfTime_End,
        Entrance::LanayruDesert_From_TempleOfTime_Start,
        Entrance::Sky_From_LanayruMines_LanayruMineEntryStatue,
        Entrance::LanayruCaves_From_LanayruMines,
        Entrance::LanayruDesert_From_LanayruMines,
        Entrance::LanayruDesert_From_LanayruMiningFacilityA,
        Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub2,
        Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_HubW,
        Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub,
        Entrance::LanayruMiningFacilityBoss_From_LanayruMiningFacilityB,
        Entrance::LanayruMiningFacilityToToT_From_LanayruMiningFacilityBoss,
        Entrance::TempleOfTime_From_LanayruMiningFacilityToToT,
        Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_End,
        Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_Beginning,
        Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_End,
        Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_Beginning,
        Entrance::SandSea_From_OutsidePiratesStronghold,
        Entrance::OutsidePiratesStronghold_From_SandSea,
        Entrance::SandSeaDocks_From_SandSea,
        Entrance::Sandship_From_SandSea,
        Entrance::Shipyard_From_SandSea,
        Entrance::SkippersRetreat_From_SandSea,
        Entrance::SandSea_From_SandSeaDocks,
        Entrance::Sky_From_SandSeaDocks_AncientHarbor,
        Entrance::LanayruCaves_From_SandSeaDocks,
        Entrance::ShipyardConstructionBay_From_Shipyard_Upper,
        Entrance::SandSea_From_Shipyard,
        Entrance::ShipyardConstructionBay_From_Shipyard_Lower,
        Entrance::Shipyard_From_ShipyardConstructionBay_Lower,
        Entrance::Shipyard_From_ShipyardConstructionBay_Upper,
        Entrance::SkippersShack_From_SkippersRetreat,
        Entrance::SandSea_From_SkippersRetreat,
        Entrance::SkippersRetreat_From_SkippersShack,
        Entrance::LanayruDesert_From_LanayruSilentRealm,
        Entrance::EldinVolcano_From_MogmaTurf_EndVent,
        Entrance::EldinVolcano_From_MogmaTurf_StartVent,
        Entrance::SandSea_From_Sandship,
        Entrance::SandshipBoss_From_Sandship,
        Entrance::FaronWoods_From_BehindTheTemple,
        Entrance::SealedGroundsSpiral_From_BehindTheTemple,
        Entrance::SealedTemple_From_BehindTheTemple,
        Entrance::Sky_From_BehindTheTemple_BehindTheTempleStatue,
        Entrance::SealedTemple_From_SealedGroundsSpiral,
        Entrance::Sky_From_SealedGroundsSpiral_SealedGroundsStatue,
        Entrance::BehindTheTemple_From_SealedTemple,
        Entrance::HyliasTemple_From_SealedTemple,
        Entrance::SealedGroundsSpiral_From_SealedTemple,
        Entrance::Sky_From_InsideBambooIsland,
        Entrance::Sky_From_LumpyPumpkin_North,
        Entrance::Sky_From_LumpyPumpkin_South_Right,
        Entrance::Sky_From_LumpyPumpkin_South_Left,
        Entrance::BeedlesShop_From_Sky_Night,
        Entrance::BehindTheTemple_From_Sky_BehindTheTempleStatue,
        Entrance::DeepWoods_From_Sky_DeepWoodsStatue,
        Entrance::DeepWoods_From_Sky_ForestTempleStatue,
        Entrance::EldinVolcano_From_Sky_EldinEntranceStatue,
        Entrance::EldinVolcano_From_Sky_TempleEntranceStatue,
        Entrance::EldinVolcano_From_Sky_VolcanoEastStatue,
        Entrance::EldinVolcano_From_Sky_VolcanoAscentStatue,
        Entrance::FaronWoods_From_Sky_FaronWoodsEntryStatue,
        Entrance::FaronWoods_From_Sky_GreatTreeStatue,
        Entrance::FaronWoods_From_Sky_InTheWoodsStatue,
        Entrance::FaronWoods_From_Sky_ViewingPlatformStatue,
        Entrance::FloriaWaterfall_From_Sky_FloriaWaterfallStatue,
        Entrance::InsideBambooIsland_From_Sky,
        Entrance::InsideThunderhead_From_Sky,
        Entrance::LakeFloria_From_Sky_LakeFloriaStatue,
        Entrance::LanayruDesert_From_Sky_DesertEntranceStatue,
        Entrance::LanayruDesert_From_Sky_NorthDesertStatue,
        Entrance::LanayruDesert_From_Sky_StoneCacheStatue,
        Entrance::LanayruDesert_From_Sky_WestDesertStatue,
        Entrance::LanayruMines_From_Sky_LanayruMineEntryStatue,
        Entrance::OutsideFireSanctuary_From_Sky_InsideTheVolcanoStatue,
        Entrance::SealedGroundsSpiral_From_Sky_SealedGroundsStatue,
        Entrance::Skyloft_From_Sky,
        Entrance::LumpyPumpkin_From_Sky_North,
        Entrance::LumpyPumpkin_From_Sky_South_Right,
        Entrance::LumpyPumpkin_From_Sky_South_Left,
        Entrance::Skyloft_From_SkyKeepEntry,
        Entrance::Skyloft_From_SkyloftSilentRealm,
        Entrance::Skyloft_From_BertiesHouse,
        Entrance::Skyloft_From_GondosHouse,
        Entrance::Skyloft_From_MallarasHouse,
        Entrance::Skyloft_From_RupinsHouse,
        Entrance::BatreauxHouse_From_Skyloft,
        Entrance::BertiesHouse_From_Skyloft,
        Entrance::GondosHouse_From_Skyloft,
        Entrance::MallarasHouse_From_Skyloft,
        Entrance::RupinsHouse_From_Skyloft,
        Entrance::SparrotsHouse_From_Skyloft,
        Entrance::Skyloft_From_SparrotsHouse,
        Entrance::SkyviewSpring_From_SkyviewBoss,
        Entrance::SkyviewTemple_From_SkyviewBoss,
        Entrance::DeepWoods_From_SkyviewSpring,
        Entrance::SkyviewBoss_From_SkyviewSpring,
        Entrance::SkyviewBoss_From_SkyviewTemple,
        Entrance::DeepWoods_From_SkyviewTemple,
        Entrance::IsleOfSongs_From_InsideThunderhead,
        Entrance::Sky_From_InsideThunderhead,
        Entrance::InsideThunderhead_From_IsleOfSongs,
        Entrance::EldinVolcano_From_InsideVolcanoSummit,
        Entrance::OutsideFireSanctuary_From_InsideVolcanoSummit,
        Entrance::VolcanoSummitWaterfall_From_InsideVolcanoSummit,
        Entrance::FireSanctuaryA_From_OutsideFireSanctuary,
        Entrance::Sky_From_OutsideFireSanctuary_InsideTheVolcanoStatue,
        Entrance::InsideVolcanoSummit_From_OutsideFireSanctuary,
        Entrance::InsideVolcanoSummit_From_VolcanoSummitWaterfall,
    ];
}
impl Entrance {
    pub fn get(&self) -> &'static EntranceDef {
        match self {
            Entrance::AncientCisternBoss_From_AncientCistern => &EntranceDef {
                area: Area::AncientCisternBoss_Main,
                from: Area::AncientCistern_BeforeBossDoor,
                disambiguation: None,
                display_name: "Ancient Cistern Boss from Ancient Cistern",
                patch_info: None,
            },
            Entrance::FloriaWaterfall_From_AncientCistern => &EntranceDef {
                area: Area::FloriaWaterfall_Main,
                from: Area::AncientCistern_MainHub,
                disambiguation: None,
                display_name: "Floria Waterfall from Ancient Cistern",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F102_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::AncientCisternCandleRoom_From_AncientCisternBoss => &EntranceDef {
                area: Area::AncientCisternCandleRoom_Main,
                from: Area::AncientCisternBoss_Main,
                disambiguation: None,
                display_name: "Ancient Cistern Candle Room from Ancient Cistern Boss",
                patch_info: None,
            },
            Entrance::Skyloft_From_BatreauxHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::BatreauxHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Batreaux' House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 29u8,
                }),
            },
            Entrance::Sky_From_BeedlesShop_Night => &EntranceDef {
                area: Area::Sky_BeedlesSkyHome,
                from: Area::BeedlesShop_Main,
                disambiguation: Some("Night"),
                display_name: "Sky from Beedle's Shop (Night)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    layer: 4u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Skyloft_From_BeedlesShop_Day => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::BeedlesShop_Main,
                disambiguation: Some("Day"),
                display_name: "Skyloft from Beedle's Shop (Day)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Skyloft_From_Bazaar_North => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::Bazaar_Main,
                disambiguation: Some("North"),
                display_name: "Skyloft from Bazaar (North)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::Skyloft_From_Bazaar_South => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::Bazaar_Main,
                disambiguation: Some("South"),
                display_name: "Skyloft from Bazaar (South)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::Skyloft_From_Bazaar_West => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::Bazaar_Main,
                disambiguation: Some("West"),
                display_name: "Skyloft from Bazaar (West)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 20u8,
                }),
            },
            Entrance::Skyloft_From_ParrowAndOriellesHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::ParrowAndOriellesHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Parrow and Orielle's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 30u8,
                }),
            },
            Entrance::Skyloft_From_PeatricesHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::PeatricesHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Peatrice's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 38u8,
                }),
            },
            Entrance::Skyloft_From_PipersHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::PipersHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Piper's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 32u8,
                }),
            },
            Entrance::Bazaar_From_Skyloft_North => &EntranceDef {
                area: Area::Bazaar_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: Some("North"),
                display_name: "Bazaar from Skyloft (North)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F004r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Bazaar_From_Skyloft_South => &EntranceDef {
                area: Area::Bazaar_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: Some("South"),
                display_name: "Bazaar from Skyloft (South)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F004r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Bazaar_From_Skyloft_West => &EntranceDef {
                area: Area::Bazaar_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: Some("West"),
                display_name: "Bazaar from Skyloft (West)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F004r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::BeedlesShop_From_Skyloft_Day => &EntranceDef {
                area: Area::BeedlesShop_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: Some("Day"),
                display_name: "Beedle's Shop from Skyloft (Day)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F002r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::ParrowAndOriellesHouse_From_Skyloft => &EntranceDef {
                area: Area::ParrowAndOriellesHouse_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Parrow and Orielle's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F005r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::PeatricesHouse_From_Skyloft => &EntranceDef {
                area: Area::PeatricesHouse_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Peatrice's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F018r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::PipersHouse_From_Skyloft => &EntranceDef {
                area: Area::PipersHouse_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Piper's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F007r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sky_From_Skyloft => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Sky from Skyloft",
                patch_info: None,
            },
            Entrance::SkyloftSilentRealm_From_Skyloft => &EntranceDef {
                area: Area::SkyloftSilentRealm_Trial,
                from: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Skyloft Silent Realm from Skyloft",
                patch_info: None,
            },
            Entrance::WaterfallCave_From_Skyloft_Upper => &EntranceDef {
                area: Area::WaterfallCave_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: Some("Upper"),
                display_name: "Waterfall Cave from Skyloft (Upper)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::WrynasHouse_From_Skyloft => &EntranceDef {
                area: Area::WrynasHouse_Main,
                from: Area::Skyloft_CentralOutside,
                disambiguation: None,
                display_name: "Wryna's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F006r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sky_From_Skyloft_PastWaterfallCave => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::Skyloft_PastWaterfallCave,
                disambiguation: Some("Past Waterfall Cave"),
                display_name: "Sky from Skyloft (Past Waterfall Cave)",
                patch_info: None,
            },
            Entrance::WaterfallCave_From_Skyloft_Lower => &EntranceDef {
                area: Area::WaterfallCave_Main,
                from: Area::Skyloft_PastWaterfallCave,
                disambiguation: Some("Lower"),
                display_name: "Waterfall Cave from Skyloft (Lower)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::SkyKeepEntry_From_Skyloft => &EntranceDef {
                area: Area::SkyKeepEntry_Main,
                from: Area::Skyloft_ToSkyKeep,
                disambiguation: None,
                display_name: "Sky Keep Entry from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D003_7",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::Skyloft_From_WaterfallCave_Upper => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::WaterfallCave_Main,
                disambiguation: Some("Upper"),
                display_name: "Skyloft from Waterfall Cave (Upper)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 7u8,
                }),
            },
            Entrance::Skyloft_From_WaterfallCave_Lower => &EntranceDef {
                area: Area::Skyloft_PastWaterfallCave,
                from: Area::WaterfallCave_Main,
                disambiguation: Some("Lower"),
                display_name: "Skyloft from Waterfall Cave (Lower)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 8u8,
                }),
            },
            Entrance::Skyloft_From_WrynasHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::WrynasHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Wryna's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 31u8,
                }),
            },
            Entrance::EarthTempleBoss_From_EarthTemple => &EntranceDef {
                area: Area::EarthTempleBoss_Main,
                from: Area::EarthTemple_BossDoorArea,
                disambiguation: None,
                display_name: "Earth Temple Boss from Earth Temple",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_EarthTemple => &EntranceDef {
                area: Area::EldinVolcano_OutsideEt,
                from: Area::EarthTemple_Entrance,
                disambiguation: None,
                display_name: "Eldin Volcano from Earth Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F200",
                    room: 4u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::EarthTempleSpring_From_EarthTempleBoss => &EntranceDef {
                area: Area::EarthTempleSpring_Main,
                from: Area::EarthTempleBoss_Main,
                disambiguation: None,
                display_name: "Earth Temple Spring from Earth Temple Boss",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_EarthTempleSpring => &EntranceDef {
                area: Area::EldinVolcano_OutsideEt,
                from: Area::EarthTempleSpring_Main,
                disambiguation: None,
                display_name: "Eldin Volcano from Earth Temple Spring",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_EldinSilentRealm => &EntranceDef {
                area: Area::EldinVolcano_VolcanoAscent,
                from: Area::EldinSilentRealm_Trial,
                disambiguation: None,
                display_name: "Eldin Volcano from Eldin Silent Realm",
                patch_info: None,
            },
            Entrance::Sky_From_EldinVolcano_EldinEntranceStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::EldinVolcano_FirstRoom,
                disambiguation: Some("Eldin Entrance Statue"),
                display_name: "Sky from Eldin Volcano (Eldin Entrance Statue)",
                patch_info: None,
            },
            Entrance::InsideVolcanoSummit_From_EldinVolcano => &EntranceDef {
                area: Area::InsideVolcanoSummit_Main,
                from: Area::EldinVolcano_HotCaveArea,
                disambiguation: None,
                display_name: "Inside Volcano Summit from Eldin Volcano",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F201_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::ThrillDiggerCave_From_EldinVolcano => &EntranceDef {
                area: Area::ThrillDiggerCave_Main,
                from: Area::EldinVolcano_NearThrillDigger,
                disambiguation: None,
                display_name: "Thrill Digger Cave from Eldin Volcano",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F211",
                    room: 0u8,
                    layer: 1u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::EarthTemple_From_EldinVolcano => &EntranceDef {
                area: Area::EarthTemple_Entrance,
                from: Area::EldinVolcano_OutsideEt,
                disambiguation: None,
                display_name: "Earth Temple from Eldin Volcano",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D200",
                    room: 1u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_EldinVolcano_TempleEntranceStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::EldinVolcano_OutsideEt,
                disambiguation: Some("Temple Entrance Statue"),
                display_name: "Sky from Eldin Volcano (Temple Entrance Statue)",
                patch_info: None,
            },
            Entrance::MogmaTurf_From_EldinVolcano_Skydive => &EntranceDef {
                area: Area::MogmaTurf_Main,
                from: Area::EldinVolcano_PreMogmaTurf,
                disambiguation: Some("Skydive"),
                display_name: "Mogma Turf from Eldin Volcano (Skydive)",
                patch_info: None,
            },
            Entrance::Sky_From_EldinVolcano_VolcanoEastStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::EldinVolcano_PreMogmaTurf,
                disambiguation: Some("Volcano East Statue"),
                display_name: "Sky from Eldin Volcano (Volcano East Statue)",
                patch_info: None,
            },
            Entrance::EldinSilentRealm_From_EldinVolcano => &EntranceDef {
                area: Area::EldinSilentRealm_Trial,
                from: Area::EldinVolcano_VolcanoAscent,
                disambiguation: None,
                display_name: "Eldin Silent Realm from Eldin Volcano",
                patch_info: None,
            },
            Entrance::Sky_From_EldinVolcano_VolcanoAscentStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::EldinVolcano_VolcanoAscent,
                disambiguation: Some("Volcano Ascent Statue"),
                display_name: "Sky from Eldin Volcano (Volcano Ascent Statue)",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_ThrillDiggerCave => &EntranceDef {
                area: Area::EldinVolcano_NearThrillDigger,
                from: Area::ThrillDiggerCave_Main,
                disambiguation: None,
                display_name: "Eldin Volcano from Thrill Digger Cave",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F200",
                    room: 4u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::FaronWoods_From_FaronSilentRealm => &EntranceDef {
                area: Area::FaronWoods_Main,
                from: Area::FaronSilentRealm_Trial,
                disambiguation: None,
                display_name: "Faron Woods from Faron Silent Realm",
                patch_info: None,
            },
            Entrance::FaronWoods_From_DeepWoods => &EntranceDef {
                area: Area::FaronWoods_Main,
                from: Area::DeepWoods_Entry,
                disambiguation: None,
                display_name: "Faron Woods from Deep Woods",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 45u8,
                }),
            },
            Entrance::Sky_From_DeepWoods_DeepWoodsStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::DeepWoods_PastBeehive,
                disambiguation: Some("Deep Woods Statue"),
                display_name: "Sky from Deep Woods (Deep Woods Statue)",
                patch_info: None,
            },
            Entrance::Sky_From_DeepWoods_ForestTempleStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::DeepWoods_PastBeehive,
                disambiguation: Some("Forest Temple Statue"),
                display_name: "Sky from Deep Woods (Forest Temple Statue)",
                patch_info: None,
            },
            Entrance::SkyviewTemple_From_DeepWoods => &EntranceDef {
                area: Area::SkyviewTemple_Entry,
                from: Area::DeepWoods_PastBeehive,
                disambiguation: None,
                display_name: "Skyview Temple from Deep Woods",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::BehindTheTemple_From_FaronWoods => &EntranceDef {
                area: Area::BehindTheTemple_Main,
                from: Area::FaronWoods_Entry,
                disambiguation: None,
                display_name: "Behind the Temple from Faron Woods",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F400",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::Sky_From_FaronWoods_FaronWoodsEntryStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::FaronWoods_Entry,
                disambiguation: Some("Faron Woods Entry Statue"),
                display_name: "Sky from Faron Woods (Faron Woods Entry Statue)",
                patch_info: None,
            },
            Entrance::GreatTree_From_FaronWoods_LowerPlatform => &EntranceDef {
                area: Area::GreatTree_Lower,
                from: Area::FaronWoods_GreatTreePlatforms,
                disambiguation: Some("Lower Platform"),
                display_name: "Great Tree from Faron Woods (Lower Platform)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::GreatTree_From_FaronWoods_UpperPlatform => &EntranceDef {
                area: Area::GreatTree_Upper,
                from: Area::FaronWoods_GreatTreePlatforms,
                disambiguation: Some("Upper Platform"),
                display_name: "Great Tree from Faron Woods (Upper Platform)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::GreatTree_From_FaronWoods_Top => &EntranceDef {
                area: Area::GreatTree_Upper,
                from: Area::FaronWoods_GreatTreeTop,
                disambiguation: Some("Top"),
                display_name: "Great Tree from Faron Woods (Top)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::Sky_From_FaronWoods_GreatTreeStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::FaronWoods_GreatTreeTop,
                disambiguation: Some("Great Tree Statue"),
                display_name: "Sky from Faron Woods (Great Tree Statue)",
                patch_info: None,
            },
            Entrance::DeepWoods_From_FaronWoods => &EntranceDef {
                area: Area::DeepWoods_Entry,
                from: Area::FaronWoods_Main,
                disambiguation: None,
                display_name: "Deep Woods from Faron Woods",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F101",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::FaronSilentRealm_From_FaronWoods => &EntranceDef {
                area: Area::FaronSilentRealm_Trial,
                from: Area::FaronWoods_Main,
                disambiguation: None,
                display_name: "Faron Silent Realm from Faron Woods",
                patch_info: None,
            },
            Entrance::GreatTree_From_FaronWoods_Tunnel => &EntranceDef {
                area: Area::GreatTree_Entry,
                from: Area::FaronWoods_Main,
                disambiguation: Some("Tunnel"),
                display_name: "Great Tree from Faron Woods (Tunnel)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::LakeFloria_From_FaronWoods => &EntranceDef {
                area: Area::LakeFloria_Entry,
                from: Area::FaronWoods_Main,
                disambiguation: None,
                display_name: "Lake Floria from Faron Woods",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F102",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_FaronWoods_InTheWoodsStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::FaronWoods_Main,
                disambiguation: Some("In the Woods Statue"),
                display_name: "Sky from Faron Woods (In the Woods Statue)",
                patch_info: None,
            },
            Entrance::Sky_From_FaronWoods_ViewingPlatformStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::FaronWoods_Main,
                disambiguation: Some("Viewing Platform Statue"),
                display_name: "Sky from Faron Woods (Viewing Platform Statue)",
                patch_info: None,
            },
            Entrance::FaronWoods_From_GreatTree_Tunnel => &EntranceDef {
                area: Area::FaronWoods_Main,
                from: Area::GreatTree_Entry,
                disambiguation: Some("Tunnel"),
                display_name: "Faron Woods from Great Tree (Tunnel)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 7u8,
                }),
            },
            Entrance::FaronWoods_From_GreatTree_LowerPlatform => &EntranceDef {
                area: Area::FaronWoods_GreatTreePlatforms,
                from: Area::GreatTree_PastPlatforms,
                disambiguation: Some("Lower Platform"),
                display_name: "Faron Woods from Great Tree (Lower Platform)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::FaronWoods_From_GreatTree_UpperPlatform => &EntranceDef {
                area: Area::FaronWoods_GreatTreePlatforms,
                from: Area::GreatTree_Upper,
                disambiguation: Some("Upper Platform"),
                display_name: "Faron Woods from Great Tree (Upper Platform)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 5u8,
                }),
            },
            Entrance::FaronWoods_From_GreatTree_Top => &EntranceDef {
                area: Area::FaronWoods_GreatTreeTop,
                from: Area::GreatTree_Upper,
                disambiguation: Some("Top"),
                display_name: "Faron Woods from Great Tree (Top)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 6u8,
                }),
            },
            Entrance::OutsideFireSanctuary_From_FireSanctuaryA => &EntranceDef {
                area: Area::OutsideFireSanctuary_ToFireSanctuary,
                from: Area::FireSanctuaryA_Entry,
                disambiguation: None,
                display_name: "Outside Fire Sanctuary from Fire Sanctuary A",
                patch_info: None,
            },
            Entrance::FireSanctuaryBoss_From_FireSanctuaryA => &EntranceDef {
                area: Area::FireSanctuaryBoss_Main,
                from: Area::FireSanctuaryA_InFrontOfBossDoor,
                disambiguation: None,
                display_name: "Fire Sanctuary Boss from Fire Sanctuary A",
                patch_info: None,
            },
            Entrance::FireSanctuaryB_From_FireSanctuaryA => &EntranceDef {
                area: Area::FireSanctuaryB_FirstOutsideSection,
                from: Area::FireSanctuaryA_PastFirstWaterPlant,
                disambiguation: None,
                display_name: "Fire Sanctuary B from Fire Sanctuary A",
                patch_info: None,
            },
            Entrance::FireSanctuaryA_From_FireSanctuaryB => &EntranceDef {
                area: Area::FireSanctuaryA_PrePlatsArea,
                from: Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                disambiguation: None,
                display_name: "Fire Sanctuary A from Fire Sanctuary B",
                patch_info: None,
            },
            Entrance::FireSanctuaryFlameRoom_From_FireSanctuaryBoss => &EntranceDef {
                area: Area::FireSanctuaryFlameRoom_Main,
                from: Area::FireSanctuaryBoss_Main,
                disambiguation: None,
                display_name: "Fire Sanctuary Flame Room from Fire Sanctuary Boss",
                patch_info: None,
            },
            Entrance::Skyloft_From_InsideGoddessStatue => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::InsideGoddessStatue_Main,
                disambiguation: None,
                display_name: "Skyloft from Inside Goddess Statue",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 6u8,
                }),
            },
            Entrance::Skyloft_From_KnightAcademy_Lower_Right => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::KnightAcademy_Main,
                disambiguation: Some("Lower"),
                display_name: "Skyloft from Knight Academy (Lower Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 5u8,
                }),
            },
            Entrance::Skyloft_From_KnightAcademy_Lower_Left => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::KnightAcademy_Main,
                disambiguation: Some("Lower"),
                display_name: "Skyloft from Knight Academy (Lower Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::Skyloft_From_KnightAcademy_Upper_Right => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::KnightAcademy_Main,
                disambiguation: Some("Upper"),
                display_name: "Skyloft from Knight Academy (Upper Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 23u8,
                }),
            },
            Entrance::Skyloft_From_KnightAcademy_Upper_Left => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::KnightAcademy_Main,
                disambiguation: Some("Upper"),
                display_name: "Skyloft from Knight Academy (Upper Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 24u8,
                }),
            },
            Entrance::InsideGoddessStatue_From_Skyloft => &EntranceDef {
                area: Area::InsideGoddessStatue_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: None,
                display_name: "Inside Goddess Statue from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F008r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::KnightAcademy_From_Skyloft_Chimney => &EntranceDef {
                area: Area::KnightAcademy_AboveZeldasRoom,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Chimney"),
                display_name: "Knight Academy from Skyloft (Chimney)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F001r",
                    room: 6u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::KnightAcademy_From_Skyloft_Lower_Right => &EntranceDef {
                area: Area::KnightAcademy_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Lower"),
                display_name: "Knight Academy from Skyloft (Lower Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::KnightAcademy_From_Skyloft_Lower_Left => &EntranceDef {
                area: Area::KnightAcademy_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Lower"),
                display_name: "Knight Academy from Skyloft (Lower Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::KnightAcademy_From_Skyloft_Upper_Right => &EntranceDef {
                area: Area::KnightAcademy_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Upper"),
                display_name: "Knight Academy from Skyloft (Upper Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::KnightAcademy_From_Skyloft_Upper_Left => &EntranceDef {
                area: Area::KnightAcademy_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: Some("Upper"),
                display_name: "Knight Academy from Skyloft (Upper Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F001r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::SparringHall_From_Skyloft_Right => &EntranceDef {
                area: Area::SparringHall_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: None,
                display_name: "Sparring Hall from Skyloft (Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F009r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::SparringHall_From_Skyloft_Left => &EntranceDef {
                area: Area::SparringHall_Main,
                from: Area::Skyloft_OutsideGoddessStatue,
                disambiguation: None,
                display_name: "Sparring Hall from Skyloft (Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F009r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Skyloft_From_SparringHall_Right => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::SparringHall_Main,
                disambiguation: None,
                display_name: "Skyloft from Sparring Hall (Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 21u8,
                }),
            },
            Entrance::Skyloft_From_SparringHall_Left => &EntranceDef {
                area: Area::Skyloft_OutsideGoddessStatue,
                from: Area::SparringHall_Main,
                disambiguation: None,
                display_name: "Skyloft from Sparring Hall (Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 26u8,
                }),
            },
            Entrance::FloriaWaterfall_From_FaroresLair => &EntranceDef {
                area: Area::FloriaWaterfall_Main,
                from: Area::FaroresLair_Main,
                disambiguation: None,
                display_name: "Floria Waterfall from Farore's Lair",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F102_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::LakeFloria_From_FaroresLair => &EntranceDef {
                area: Area::LakeFloria_ToFaroresLair,
                from: Area::FaroresLair_Main,
                disambiguation: None,
                display_name: "Lake Floria from Farore's Lair",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F102",
                    room: 4u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::AncientCistern_From_FloriaWaterfall => &EntranceDef {
                area: Area::AncientCistern_MainHub,
                from: Area::FloriaWaterfall_Main,
                disambiguation: None,
                display_name: "Ancient Cistern from Floria Waterfall",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D101",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::FaronWoods_From_FloriaWaterfall => &EntranceDef {
                area: Area::FaronWoods_Main,
                from: Area::FloriaWaterfall_Main,
                disambiguation: None,
                display_name: "Faron Woods from Floria Waterfall",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 17u8,
                }),
            },
            Entrance::FaroresLair_From_FloriaWaterfall => &EntranceDef {
                area: Area::FaroresLair_Main,
                from: Area::FloriaWaterfall_Main,
                disambiguation: None,
                display_name: "Farore's Lair from Floria Waterfall",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F102_2",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sky_From_FloriaWaterfall_FloriaWaterfallStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::FloriaWaterfall_Main,
                disambiguation: Some("Floria Waterfall Statue"),
                display_name: "Sky from Floria Waterfall (Floria Waterfall Statue)",
                patch_info: None,
            },
            Entrance::Sky_From_LakeFloria_LakeFloriaStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::LakeFloria_StatueSpot,
                disambiguation: Some("Lake Floria Statue"),
                display_name: "Sky from Lake Floria (Lake Floria Statue)",
                patch_info: None,
            },
            Entrance::FaroresLair_From_LakeFloria => &EntranceDef {
                area: Area::FaroresLair_Main,
                from: Area::LakeFloria_ToFaroresLair,
                disambiguation: None,
                display_name: "Farore's Lair from Lake Floria",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F102_2",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::LanayruDesert_From_LanayruCaves => &EntranceDef {
                area: Area::LanayruDesert_SandOasis,
                from: Area::LanayruCaves_Main,
                disambiguation: None,
                display_name: "Lanayru Desert from Lanayru Caves",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 6u8,
                }),
            },
            Entrance::LanayruMines_From_LanayruCaves => &EntranceDef {
                area: Area::LanayruMines_ToCaves,
                from: Area::LanayruCaves_Main,
                disambiguation: None,
                display_name: "Lanayru Mines from Lanayru Caves",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::SandSeaDocks_From_LanayruCaves => &EntranceDef {
                area: Area::SandSeaDocks_ToCaves,
                from: Area::LanayruCaves_ToSandSea,
                disambiguation: None,
                display_name: "Sand Sea Docks from Lanayru Caves",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::LanayruDesert_From_FireNode => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::FireNode_Main,
                disambiguation: None,
                display_name: "Lanayru Desert from Fire Node",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::LanayruMines_From_LanayruDesert => &EntranceDef {
                area: Area::LanayruMines_ToDesert,
                from: Area::LanayruDesert_HookBeetleArea,
                disambiguation: None,
                display_name: "Lanayru Mines from Lanayru Desert",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300_1",
                    room: 2u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sky_From_LanayruDesert_DesertEntranceStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::LanayruDesert_HookBeetleArea,
                disambiguation: Some("Desert Entrance Statue"),
                display_name: "Sky from Lanayru Desert (Desert Entrance Statue)",
                patch_info: None,
            },
            Entrance::FireNode_From_LanayruDesert => &EntranceDef {
                area: Area::FireNode_Main,
                from: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Fire Node from Lanayru Desert",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300_3",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::LanayruMiningFacilityA_From_LanayruDesert => &EntranceDef {
                area: Area::LanayruMiningFacilityA_Entry,
                from: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Lanayru Mining Facility A from Lanayru Desert",
                patch_info: None,
            },
            Entrance::LanayruSilentRealm_From_LanayruDesert => &EntranceDef {
                area: Area::LanayruSilentRealm_Trial,
                from: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Lanayru Silent Realm from Lanayru Desert",
                patch_info: None,
            },
            Entrance::LightningNode_From_LanayruDesert => &EntranceDef {
                area: Area::LightningNode_Main,
                from: Area::LanayruDesert_PastToT,
                disambiguation: None,
                display_name: "Lightning Node from Lanayru Desert",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300_2",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_LanayruDesert_NorthDesertStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::LanayruDesert_PastToT,
                disambiguation: Some("North Desert Statue"),
                display_name: "Sky from Lanayru Desert (North Desert Statue)",
                patch_info: None,
            },
            Entrance::Sky_From_LanayruDesert_StoneCacheStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::LanayruDesert_PastToT,
                disambiguation: Some("Stone Cache Statue"),
                display_name: "Sky from Lanayru Desert (Stone Cache Statue)",
                patch_info: None,
            },
            Entrance::TempleOfTime_From_LanayruDesert_End => &EntranceDef {
                area: Area::TempleOfTime_End,
                from: Area::LanayruDesert_PastToT,
                disambiguation: Some("End"),
                display_name: "Temple of Time from Lanayru Desert (End)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300_4",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::LanayruCaves_From_LanayruDesert => &EntranceDef {
                area: Area::LanayruCaves_Main,
                from: Area::LanayruDesert_SandOasis,
                disambiguation: None,
                display_name: "Lanayru Caves from Lanayru Desert",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F303",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sky_From_LanayruDesert_WestDesertStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::LanayruDesert_SandOasis,
                disambiguation: Some("West Desert Statue"),
                display_name: "Sky from Lanayru Desert (West Desert Statue)",
                patch_info: None,
            },
            Entrance::TempleOfTime_From_LanayruDesert_Start => &EntranceDef {
                area: Area::TempleOfTime_Start,
                from: Area::LanayruDesert_SandOasis,
                disambiguation: Some("Start"),
                display_name: "Temple of Time from Lanayru Desert (Start)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300_4",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::LanayruDesert_From_LightningNode => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::LightningNode_Main,
                disambiguation: None,
                display_name: "Lanayru Desert from Lightning Node",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 7u8,
                }),
            },
            Entrance::LanayruDesert_From_TempleOfTime_End => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::TempleOfTime_End,
                disambiguation: Some("End"),
                display_name: "Lanayru Desert from Temple of Time (End)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::LanayruDesert_From_TempleOfTime_Start => &EntranceDef {
                area: Area::LanayruDesert_SandOasis,
                from: Area::TempleOfTime_Start,
                disambiguation: Some("Start"),
                display_name: "Lanayru Desert from Temple of Time (Start)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_LanayruMines_LanayruMineEntryStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::LanayruMines_FirstHalf,
                disambiguation: Some("Lanayru Mine Entry Statue"),
                display_name: "Sky from Lanayru Mines (Lanayru Mine Entry Statue)",
                patch_info: None,
            },
            Entrance::LanayruCaves_From_LanayruMines => &EntranceDef {
                area: Area::LanayruCaves_Main,
                from: Area::LanayruMines_ToCaves,
                disambiguation: None,
                display_name: "Lanayru Caves from Lanayru Mines",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F303",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::LanayruDesert_From_LanayruMines => &EntranceDef {
                area: Area::LanayruDesert_HookBeetleArea,
                from: Area::LanayruMines_ToDesert,
                disambiguation: None,
                display_name: "Lanayru Desert from Lanayru Mines",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F300",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::LanayruDesert_From_LanayruMiningFacilityA => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::LanayruMiningFacilityA_Entry,
                disambiguation: None,
                display_name: "Lanayru Desert from Lanayru Mining Facility A",
                patch_info: None,
            },
            Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub2 => &EntranceDef {
                area: Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
                from: Area::LanayruMiningFacilityA_GustBellowsRoom,
                disambiguation: Some("Hub 2"),
                display_name: "Lanayru Mining Facility B from Lanayru Mining Facility A (Hub 2)",
                patch_info: None,
            },
            Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_HubW => &EntranceDef {
                area: Area::LanayruMiningFacilityB_WestHub,
                from: Area::LanayruMiningFacilityA_MapRoom,
                disambiguation: Some("Hub W"),
                display_name: "Lanayru Mining Facility B from Lanayru Mining Facility A (Hub W)",
                patch_info: None,
            },
            Entrance::LanayruMiningFacilityB_From_LanayruMiningFacilityA_Hub => &EntranceDef {
                area: Area::LanayruMiningFacilityB_HubRoom,
                from: Area::LanayruMiningFacilityA_SecondRoom,
                disambiguation: Some("Hub"),
                display_name: "Lanayru Mining Facility B from Lanayru Mining Facility A (Hub)",
                patch_info: None,
            },
            Entrance::LanayruMiningFacilityBoss_From_LanayruMiningFacilityB => &EntranceDef {
                area: Area::LanayruMiningFacilityBoss_Main,
                from: Area::LanayruMiningFacilityB_NearBossDoor,
                disambiguation: None,
                display_name: "Lanayru Mining Facility Boss from Lanayru Mining Facility B",
                patch_info: None,
            },
            Entrance::LanayruMiningFacilityToToT_From_LanayruMiningFacilityBoss => &EntranceDef {
                area: Area::LanayruMiningFacilityToToT_BossDoor,
                from: Area::LanayruMiningFacilityBoss_Main,
                disambiguation: None,
                display_name: "Lanayru Mining Facility to ToT from Lanayru Mining Facility Boss",
                patch_info: None,
            },
            Entrance::TempleOfTime_From_LanayruMiningFacilityToToT => &EntranceDef {
                area: Area::TempleOfTime_AfterLmf,
                from: Area::LanayruMiningFacilityToToT_ToTExit,
                disambiguation: None,
                display_name: "Temple of Time from Lanayru Mining Facility to ToT",
                patch_info: None,
            },
            Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_End => &EntranceDef {
                area: Area::OutsidePiratesStronghold_InsideSharkhead,
                from: Area::InsidePiratesStronghold_Main,
                disambiguation: Some("End"),
                display_name: "Outside Pirate's Stronghold from Inside Pirate's Stronghold (End)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_6",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::OutsidePiratesStronghold_From_InsidePiratesStronghold_Beginning => {
                &EntranceDef {
                    area: Area::OutsidePiratesStronghold_Main,
                    from: Area::InsidePiratesStronghold_Main,
                    disambiguation: Some("Beginning"),
                    display_name:
                        "Outside Pirate's Stronghold from Inside Pirate's Stronghold (Beginning)",
                    patch_info: Some(EntrancePatchInfo {
                        stage_name: "F301_6",
                        room: 0u8,
                        layer: 0u8,
                        entrance_id: 1u8,
                    }),
                }
            }
            Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_End => &EntranceDef {
                area: Area::InsidePiratesStronghold_Main,
                from: Area::OutsidePiratesStronghold_InsideSharkhead,
                disambiguation: Some("End"),
                display_name: "Inside Pirate's Stronghold from Outside Pirate's Stronghold (End)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_2",
                    room: 1u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::InsidePiratesStronghold_From_OutsidePiratesStronghold_Beginning => {
                &EntranceDef {
                    area: Area::InsidePiratesStronghold_Main,
                    from: Area::OutsidePiratesStronghold_Main,
                    disambiguation: Some("Beginning"),
                    display_name:
                        "Inside Pirate's Stronghold from Outside Pirate's Stronghold (Beginning)",
                    patch_info: Some(EntrancePatchInfo {
                        stage_name: "F301_2",
                        room: 1u8,
                        layer: 0u8,
                        entrance_id: 0u8,
                    }),
                }
            }
            Entrance::SandSea_From_OutsidePiratesStronghold => &EntranceDef {
                area: Area::SandSea_Main,
                from: Area::OutsidePiratesStronghold_Main,
                disambiguation: None,
                display_name: "Sand Sea from Outside Pirate's Stronghold",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::OutsidePiratesStronghold_From_SandSea => &EntranceDef {
                area: Area::OutsidePiratesStronghold_Main,
                from: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Outside Pirate's Stronghold from Sand Sea",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_6",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SandSeaDocks_From_SandSea => &EntranceDef {
                area: Area::SandSeaDocks_Main,
                from: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Sand Sea Docks from Sand Sea",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sandship_From_SandSea => &EntranceDef {
                area: Area::Sandship_Deck,
                from: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Sandship from Sand Sea",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "D301",
                    room: 0u8,
                    layer: 1u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Shipyard_From_SandSea => &EntranceDef {
                area: Area::Shipyard_Main,
                from: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Shipyard from Sand Sea",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_4",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SkippersRetreat_From_SandSea => &EntranceDef {
                area: Area::SkippersRetreat_Start,
                from: Area::SandSea_Main,
                disambiguation: None,
                display_name: "Skipper's Retreat from Sand Sea",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_3",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SandSea_From_SandSeaDocks => &EntranceDef {
                area: Area::SandSea_Main,
                from: Area::SandSeaDocks_Main,
                disambiguation: None,
                display_name: "Sand Sea from Sand Sea Docks",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_SandSeaDocks_AncientHarbor => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::SandSeaDocks_Main,
                disambiguation: Some("Ancient Harbor"),
                display_name: "Sky from Sand Sea Docks (Ancient Harbor)",
                patch_info: None,
            },
            Entrance::LanayruCaves_From_SandSeaDocks => &EntranceDef {
                area: Area::LanayruCaves_ToSandSea,
                from: Area::SandSeaDocks_ToCaves,
                disambiguation: None,
                display_name: "Lanayru Caves from Sand Sea Docks",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F303",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::ShipyardConstructionBay_From_Shipyard_Upper => &EntranceDef {
                area: Area::ShipyardConstructionBay_Upper,
                from: Area::Shipyard_AfterMinecartRide,
                disambiguation: Some("Upper"),
                display_name: "Shipyard Construction Bay from Shipyard (Upper)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_7",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SandSea_From_Shipyard => &EntranceDef {
                area: Area::SandSea_Main,
                from: Area::Shipyard_Main,
                disambiguation: None,
                display_name: "Sand Sea from Shipyard",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::ShipyardConstructionBay_From_Shipyard_Lower => &EntranceDef {
                area: Area::ShipyardConstructionBay_Lower,
                from: Area::Shipyard_Main,
                disambiguation: Some("Lower"),
                display_name: "Shipyard Construction Bay from Shipyard (Lower)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_7",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Shipyard_From_ShipyardConstructionBay_Lower => &EntranceDef {
                area: Area::Shipyard_Main,
                from: Area::ShipyardConstructionBay_Lower,
                disambiguation: Some("Lower"),
                display_name: "Shipyard from Shipyard Construction Bay (Lower)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_4",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Shipyard_From_ShipyardConstructionBay_Upper => &EntranceDef {
                area: Area::Shipyard_AfterMinecartRide,
                from: Area::ShipyardConstructionBay_Upper,
                disambiguation: Some("Upper"),
                display_name: "Shipyard from Shipyard Construction Bay (Upper)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_4",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::SkippersShack_From_SkippersRetreat => &EntranceDef {
                area: Area::SkippersShack_Main,
                from: Area::SkippersRetreat_NextToShack,
                disambiguation: None,
                display_name: "Skipper's Shack from Skipper's Retreat",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_5",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SandSea_From_SkippersRetreat => &EntranceDef {
                area: Area::SandSea_Main,
                from: Area::SkippersRetreat_Start,
                disambiguation: None,
                display_name: "Sand Sea from Skipper's Retreat",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::SkippersRetreat_From_SkippersShack => &EntranceDef {
                area: Area::SkippersRetreat_NextToShack,
                from: Area::SkippersShack_Main,
                disambiguation: None,
                display_name: "Skipper's Retreat from Skipper's Shack",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_3",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::LanayruDesert_From_LanayruSilentRealm => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::LanayruSilentRealm_Trial,
                disambiguation: None,
                display_name: "Lanayru Desert from Lanayru Silent Realm",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_MogmaTurf_EndVent => &EntranceDef {
                area: Area::EldinVolcano_PastMogmaTurf,
                from: Area::MogmaTurf_Main,
                disambiguation: Some("End Vent"),
                display_name: "Eldin Volcano from Mogma Turf (End Vent)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F200",
                    room: 2u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::EldinVolcano_From_MogmaTurf_StartVent => &EntranceDef {
                area: Area::EldinVolcano_PreMogmaTurf,
                from: Area::MogmaTurf_Main,
                disambiguation: Some("Start Vent"),
                display_name: "Eldin Volcano from Mogma Turf (Start Vent)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F200",
                    room: 2u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::SandSea_From_Sandship => &EntranceDef {
                area: Area::SandSea_Main,
                from: Area::Sandship_Deck,
                disambiguation: None,
                display_name: "Sand Sea from Sandship",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F301_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::SandshipBoss_From_Sandship => &EntranceDef {
                area: Area::SandshipBoss_Main,
                from: Area::Sandship_PastSpume,
                disambiguation: None,
                display_name: "Sandship Boss from Sandship",
                patch_info: None,
            },
            Entrance::FaronWoods_From_BehindTheTemple => &EntranceDef {
                area: Area::FaronWoods_Entry,
                from: Area::BehindTheTemple_Main,
                disambiguation: None,
                display_name: "Faron Woods from Behind the Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F100",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SealedGroundsSpiral_From_BehindTheTemple => &EntranceDef {
                area: Area::SealedGroundsSpiral_Upper,
                from: Area::BehindTheTemple_Main,
                disambiguation: None,
                display_name: "Sealed Grounds Spiral from Behind the Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F401",
                    room: 1u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::SealedTemple_From_BehindTheTemple => &EntranceDef {
                area: Area::SealedTemple_Main,
                from: Area::BehindTheTemple_Main,
                disambiguation: None,
                display_name: "Sealed Temple from Behind the Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F402",
                    room: 2u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Sky_From_BehindTheTemple_BehindTheTempleStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::BehindTheTemple_Main,
                disambiguation: Some("Behind the Temple Statue"),
                display_name: "Sky from Behind the Temple (Behind the Temple Statue)",
                patch_info: None,
            },
            Entrance::SealedTemple_From_SealedGroundsSpiral => &EntranceDef {
                area: Area::SealedTemple_Main,
                from: Area::SealedGroundsSpiral_Lower,
                disambiguation: None,
                display_name: "Sealed Temple from Sealed Grounds Spiral",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F402",
                    room: 2u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_SealedGroundsSpiral_SealedGroundsStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::SealedGroundsSpiral_Upper,
                disambiguation: Some("Sealed Grounds Statue"),
                display_name: "Sky from Sealed Grounds Spiral (Sealed Grounds Statue)",
                patch_info: None,
            },
            Entrance::BehindTheTemple_From_SealedTemple => &EntranceDef {
                area: Area::BehindTheTemple_Main,
                from: Area::SealedTemple_Main,
                disambiguation: None,
                display_name: "Behind the Temple from Sealed Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F400",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::HyliasTemple_From_SealedTemple => &EntranceDef {
                area: Area::HyliasTemple_Main,
                from: Area::SealedTemple_Main,
                disambiguation: None,
                display_name: "Hylia's Temple from Sealed Temple",
                patch_info: None,
            },
            Entrance::SealedGroundsSpiral_From_SealedTemple => &EntranceDef {
                area: Area::SealedGroundsSpiral_Lower,
                from: Area::SealedTemple_Main,
                disambiguation: None,
                display_name: "Sealed Grounds Spiral from Sealed Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F401",
                    room: 1u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::Sky_From_InsideBambooIsland => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::InsideBambooIsland_Main,
                disambiguation: None,
                display_name: "Sky from Inside Bamboo Island",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 11u8,
                }),
            },
            Entrance::Sky_From_LumpyPumpkin_North => &EntranceDef {
                area: Area::Sky_OutsideLumpyPumpkin,
                from: Area::LumpyPumpkin_Main,
                disambiguation: Some("North"),
                display_name: "Sky from Lumpy Pumpkin (North)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 24u8,
                }),
            },
            Entrance::Sky_From_LumpyPumpkin_South_Right => &EntranceDef {
                area: Area::Sky_OutsideLumpyPumpkin,
                from: Area::LumpyPumpkin_Main,
                disambiguation: Some("South"),
                display_name: "Sky from Lumpy Pumpkin (South Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 22u8,
                }),
            },
            Entrance::Sky_From_LumpyPumpkin_South_Left => &EntranceDef {
                area: Area::Sky_OutsideLumpyPumpkin,
                from: Area::LumpyPumpkin_Main,
                disambiguation: Some("South"),
                display_name: "Sky from Lumpy Pumpkin (South Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 23u8,
                }),
            },
            Entrance::BeedlesShop_From_Sky_Night => &EntranceDef {
                area: Area::BeedlesShop_Main,
                from: Area::Sky_BeedlesSkyHome,
                disambiguation: Some("Night"),
                display_name: "Beedle's Shop from Sky (Night)",
                patch_info: None,
            },
            Entrance::BehindTheTemple_From_Sky_BehindTheTempleStatue => &EntranceDef {
                area: Area::BehindTheTemple_Main,
                from: Area::Sky_Field,
                disambiguation: Some("Behind the Temple Statue"),
                display_name: "Behind the Temple from Sky (Behind the Temple Statue)",
                patch_info: None,
            },
            Entrance::DeepWoods_From_Sky_DeepWoodsStatue => &EntranceDef {
                area: Area::DeepWoods_PastBeehive,
                from: Area::Sky_Field,
                disambiguation: Some("Deep Woods Statue"),
                display_name: "Deep Woods from Sky (Deep Woods Statue)",
                patch_info: None,
            },
            Entrance::DeepWoods_From_Sky_ForestTempleStatue => &EntranceDef {
                area: Area::DeepWoods_PastBeehive,
                from: Area::Sky_Field,
                disambiguation: Some("Forest Temple Statue"),
                display_name: "Deep Woods from Sky (Forest Temple Statue)",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_Sky_EldinEntranceStatue => &EntranceDef {
                area: Area::EldinVolcano_FirstRoom,
                from: Area::Sky_Field,
                disambiguation: Some("Eldin Entrance Statue"),
                display_name: "Eldin Volcano from Sky (Eldin Entrance Statue)",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_Sky_TempleEntranceStatue => &EntranceDef {
                area: Area::EldinVolcano_OutsideEt,
                from: Area::Sky_Field,
                disambiguation: Some("Temple Entrance Statue"),
                display_name: "Eldin Volcano from Sky (Temple Entrance Statue)",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_Sky_VolcanoEastStatue => &EntranceDef {
                area: Area::EldinVolcano_PreMogmaTurf,
                from: Area::Sky_Field,
                disambiguation: Some("Volcano East Statue"),
                display_name: "Eldin Volcano from Sky (Volcano East Statue)",
                patch_info: None,
            },
            Entrance::EldinVolcano_From_Sky_VolcanoAscentStatue => &EntranceDef {
                area: Area::EldinVolcano_VolcanoAscent,
                from: Area::Sky_Field,
                disambiguation: Some("Volcano Ascent Statue"),
                display_name: "Eldin Volcano from Sky (Volcano Ascent Statue)",
                patch_info: None,
            },
            Entrance::FaronWoods_From_Sky_FaronWoodsEntryStatue => &EntranceDef {
                area: Area::FaronWoods_Entry,
                from: Area::Sky_Field,
                disambiguation: Some("Faron Woods Entry Statue"),
                display_name: "Faron Woods from Sky (Faron Woods Entry Statue)",
                patch_info: None,
            },
            Entrance::FaronWoods_From_Sky_GreatTreeStatue => &EntranceDef {
                area: Area::FaronWoods_GreatTreeTop,
                from: Area::Sky_Field,
                disambiguation: Some("Great Tree Statue"),
                display_name: "Faron Woods from Sky (Great Tree Statue)",
                patch_info: None,
            },
            Entrance::FaronWoods_From_Sky_InTheWoodsStatue => &EntranceDef {
                area: Area::FaronWoods_Main,
                from: Area::Sky_Field,
                disambiguation: Some("In the Woods Statue"),
                display_name: "Faron Woods from Sky (In the Woods Statue)",
                patch_info: None,
            },
            Entrance::FaronWoods_From_Sky_ViewingPlatformStatue => &EntranceDef {
                area: Area::FaronWoods_Main,
                from: Area::Sky_Field,
                disambiguation: Some("Viewing Platform Statue"),
                display_name: "Faron Woods from Sky (Viewing Platform Statue)",
                patch_info: None,
            },
            Entrance::FloriaWaterfall_From_Sky_FloriaWaterfallStatue => &EntranceDef {
                area: Area::FloriaWaterfall_Main,
                from: Area::Sky_Field,
                disambiguation: Some("Floria Waterfall Statue"),
                display_name: "Floria Waterfall from Sky (Floria Waterfall Statue)",
                patch_info: None,
            },
            Entrance::InsideBambooIsland_From_Sky => &EntranceDef {
                area: Area::InsideBambooIsland_Main,
                from: Area::Sky_Field,
                disambiguation: None,
                display_name: "Inside Bamboo Island from Sky",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F019r",
                    room: 0u8,
                    layer: 1u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::InsideThunderhead_From_Sky => &EntranceDef {
                area: Area::InsideThunderhead_Main,
                from: Area::Sky_Field,
                disambiguation: None,
                display_name: "Inside Thunderhead from Sky",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F023",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::LakeFloria_From_Sky_LakeFloriaStatue => &EntranceDef {
                area: Area::LakeFloria_StatueSpot,
                from: Area::Sky_Field,
                disambiguation: Some("Lake Floria Statue"),
                display_name: "Lake Floria from Sky (Lake Floria Statue)",
                patch_info: None,
            },
            Entrance::LanayruDesert_From_Sky_DesertEntranceStatue => &EntranceDef {
                area: Area::LanayruDesert_HookBeetleArea,
                from: Area::Sky_Field,
                disambiguation: Some("Desert Entrance Statue"),
                display_name: "Lanayru Desert from Sky (Desert Entrance Statue)",
                patch_info: None,
            },
            Entrance::LanayruDesert_From_Sky_NorthDesertStatue => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::Sky_Field,
                disambiguation: Some("North Desert Statue"),
                display_name: "Lanayru Desert from Sky (North Desert Statue)",
                patch_info: None,
            },
            Entrance::LanayruDesert_From_Sky_StoneCacheStatue => &EntranceDef {
                area: Area::LanayruDesert_PastToT,
                from: Area::Sky_Field,
                disambiguation: Some("Stone Cache Statue"),
                display_name: "Lanayru Desert from Sky (Stone Cache Statue)",
                patch_info: None,
            },
            Entrance::LanayruDesert_From_Sky_WestDesertStatue => &EntranceDef {
                area: Area::LanayruDesert_SandOasis,
                from: Area::Sky_Field,
                disambiguation: Some("West Desert Statue"),
                display_name: "Lanayru Desert from Sky (West Desert Statue)",
                patch_info: None,
            },
            Entrance::LanayruMines_From_Sky_LanayruMineEntryStatue => &EntranceDef {
                area: Area::LanayruMines_FirstHalf,
                from: Area::Sky_Field,
                disambiguation: Some("Lanayru Mine Entry Statue"),
                display_name: "Lanayru Mines from Sky (Lanayru Mine Entry Statue)",
                patch_info: None,
            },
            Entrance::OutsideFireSanctuary_From_Sky_InsideTheVolcanoStatue => &EntranceDef {
                area: Area::OutsideFireSanctuary_ToFireSanctuary,
                from: Area::Sky_Field,
                disambiguation: Some("Inside the Volcano Statue"),
                display_name: "Outside Fire Sanctuary from Sky (Inside the Volcano Statue)",
                patch_info: None,
            },
            Entrance::SealedGroundsSpiral_From_Sky_SealedGroundsStatue => &EntranceDef {
                area: Area::SealedGroundsSpiral_Upper,
                from: Area::Sky_Field,
                disambiguation: Some("Sealed Grounds Statue"),
                display_name: "Sealed Grounds Spiral from Sky (Sealed Grounds Statue)",
                patch_info: None,
            },
            Entrance::Skyloft_From_Sky => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::Sky_Field,
                disambiguation: None,
                display_name: "Skyloft from Sky",
                patch_info: None,
            },
            Entrance::LumpyPumpkin_From_Sky_North => &EntranceDef {
                area: Area::LumpyPumpkin_Main,
                from: Area::Sky_OutsideLumpyPumpkin,
                disambiguation: Some("North"),
                display_name: "Lumpy Pumpkin from Sky (North)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F011r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 3u8,
                }),
            },
            Entrance::LumpyPumpkin_From_Sky_South_Right => &EntranceDef {
                area: Area::LumpyPumpkin_Main,
                from: Area::Sky_OutsideLumpyPumpkin,
                disambiguation: Some("South"),
                display_name: "Lumpy Pumpkin from Sky (South Right Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F011r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::LumpyPumpkin_From_Sky_South_Left => &EntranceDef {
                area: Area::LumpyPumpkin_Main,
                from: Area::Sky_OutsideLumpyPumpkin,
                disambiguation: Some("South"),
                display_name: "Lumpy Pumpkin from Sky (South Left Door)",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F011r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Skyloft_From_SkyKeepEntry => &EntranceDef {
                area: Area::Skyloft_ToSkyKeep,
                from: Area::SkyKeepEntry_Main,
                disambiguation: None,
                display_name: "Skyloft from Sky Keep Entry",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 53u8,
                }),
            },
            Entrance::Skyloft_From_SkyloftSilentRealm => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::SkyloftSilentRealm_Trial,
                disambiguation: None,
                display_name: "Skyloft from Skyloft Silent Realm",
                patch_info: None,
            },
            Entrance::Skyloft_From_BertiesHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::BertiesHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Bertie's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 34u8,
                }),
            },
            Entrance::Skyloft_From_GondosHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::GondosHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Gondo's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 35u8,
                }),
            },
            Entrance::Skyloft_From_MallarasHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::MallarasHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Mallara's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 36u8,
                }),
            },
            Entrance::Skyloft_From_RupinsHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::RupinsHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Rupin's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 37u8,
                }),
            },
            Entrance::BatreauxHouse_From_Skyloft => &EntranceDef {
                area: Area::BatreauxHouse_Main,
                from: Area::Skyloft_OutsideSkyloftVillage,
                disambiguation: None,
                display_name: "Batreaux' House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F012r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::BertiesHouse_From_Skyloft => &EntranceDef {
                area: Area::BertiesHouse_Main,
                from: Area::Skyloft_OutsideSkyloftVillage,
                disambiguation: None,
                display_name: "Bertie's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F014r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::GondosHouse_From_Skyloft => &EntranceDef {
                area: Area::GondosHouse_Main,
                from: Area::Skyloft_OutsideSkyloftVillage,
                disambiguation: None,
                display_name: "Gondo's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F015r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::MallarasHouse_From_Skyloft => &EntranceDef {
                area: Area::MallarasHouse_Main,
                from: Area::Skyloft_OutsideSkyloftVillage,
                disambiguation: None,
                display_name: "Mallara's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F016r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::RupinsHouse_From_Skyloft => &EntranceDef {
                area: Area::RupinsHouse_Main,
                from: Area::Skyloft_OutsideSkyloftVillage,
                disambiguation: None,
                display_name: "Rupin's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F017r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::SparrotsHouse_From_Skyloft => &EntranceDef {
                area: Area::SparrotsHouse_Main,
                from: Area::Skyloft_OutsideSkyloftVillage,
                disambiguation: None,
                display_name: "Sparrot's House from Skyloft",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F013r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::Skyloft_From_SparrotsHouse => &EntranceDef {
                area: Area::Skyloft_CentralOutside,
                from: Area::SparrotsHouse_Main,
                disambiguation: None,
                display_name: "Skyloft from Sparrot's House",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F000",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 33u8,
                }),
            },
            Entrance::SkyviewSpring_From_SkyviewBoss => &EntranceDef {
                area: Area::SkyviewSpring_Main,
                from: Area::SkyviewBoss_Main,
                disambiguation: None,
                display_name: "Skyview Spring from Skyview Boss",
                patch_info: None,
            },
            Entrance::SkyviewTemple_From_SkyviewBoss => &EntranceDef {
                area: Area::SkyviewTemple_BossDoorArea,
                from: Area::SkyviewBoss_Main,
                disambiguation: None,
                display_name: "Skyview Temple from Skyview Boss",
                patch_info: None,
            },
            Entrance::DeepWoods_From_SkyviewSpring => &EntranceDef {
                area: Area::DeepWoods_PastBeehive,
                from: Area::SkyviewSpring_Main,
                disambiguation: None,
                display_name: "Deep Woods from Skyview Spring",
                patch_info: None,
            },
            Entrance::SkyviewBoss_From_SkyviewSpring => &EntranceDef {
                area: Area::SkyviewBoss_Main,
                from: Area::SkyviewSpring_Main,
                disambiguation: None,
                display_name: "Skyview Boss from Skyview Spring",
                patch_info: None,
            },
            Entrance::SkyviewBoss_From_SkyviewTemple => &EntranceDef {
                area: Area::SkyviewBoss_Main,
                from: Area::SkyviewTemple_BossDoorArea,
                disambiguation: None,
                display_name: "Skyview Boss from Skyview Temple",
                patch_info: None,
            },
            Entrance::DeepWoods_From_SkyviewTemple => &EntranceDef {
                area: Area::DeepWoods_PastBeehive,
                from: Area::SkyviewTemple_Entry,
                disambiguation: None,
                display_name: "Deep Woods from Skyview Temple",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F101",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::IsleOfSongs_From_InsideThunderhead => &EntranceDef {
                area: Area::IsleOfSongs_Main,
                from: Area::InsideThunderhead_Main,
                disambiguation: None,
                display_name: "Isle of Songs from Inside Thunderhead",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F010r",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::Sky_From_InsideThunderhead => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::InsideThunderhead_Main,
                disambiguation: None,
                display_name: "Sky from Inside Thunderhead",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F020",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 28u8,
                }),
            },
            Entrance::InsideThunderhead_From_IsleOfSongs => &EntranceDef {
                area: Area::InsideThunderhead_Main,
                from: Area::IsleOfSongs_Main,
                disambiguation: None,
                display_name: "Inside Thunderhead from Isle of Songs",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F023",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 4u8,
                }),
            },
            Entrance::EldinVolcano_From_InsideVolcanoSummit => &EntranceDef {
                area: Area::EldinVolcano_HotCaveArea,
                from: Area::InsideVolcanoSummit_Main,
                disambiguation: None,
                display_name: "Eldin Volcano from Inside Volcano Summit",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F200",
                    room: 5u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
            Entrance::OutsideFireSanctuary_From_InsideVolcanoSummit => &EntranceDef {
                area: Area::OutsideFireSanctuary_ToInsideSummit,
                from: Area::InsideVolcanoSummit_Main,
                disambiguation: None,
                display_name: "Outside Fire Sanctuary from Inside Volcano Summit",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F201_3",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::VolcanoSummitWaterfall_From_InsideVolcanoSummit => &EntranceDef {
                area: Area::VolcanoSummitWaterfall_Main,
                from: Area::InsideVolcanoSummit_Main,
                disambiguation: None,
                display_name: "Volcano Summit Waterfall from Inside Volcano Summit",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F201_4",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 0u8,
                }),
            },
            Entrance::FireSanctuaryA_From_OutsideFireSanctuary => &EntranceDef {
                area: Area::FireSanctuaryA_Entry,
                from: Area::OutsideFireSanctuary_ToFireSanctuary,
                disambiguation: None,
                display_name: "Fire Sanctuary A from Outside Fire Sanctuary",
                patch_info: None,
            },
            Entrance::Sky_From_OutsideFireSanctuary_InsideTheVolcanoStatue => &EntranceDef {
                area: Area::Sky_Field,
                from: Area::OutsideFireSanctuary_ToFireSanctuary,
                disambiguation: Some("Inside the Volcano Statue"),
                display_name: "Sky from Outside Fire Sanctuary (Inside the Volcano Statue)",
                patch_info: None,
            },
            Entrance::InsideVolcanoSummit_From_OutsideFireSanctuary => &EntranceDef {
                area: Area::InsideVolcanoSummit_Main,
                from: Area::OutsideFireSanctuary_ToInsideSummit,
                disambiguation: None,
                display_name: "Inside Volcano Summit from Outside Fire Sanctuary",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F201_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 1u8,
                }),
            },
            Entrance::InsideVolcanoSummit_From_VolcanoSummitWaterfall => &EntranceDef {
                area: Area::InsideVolcanoSummit_Main,
                from: Area::VolcanoSummitWaterfall_Main,
                disambiguation: None,
                display_name: "Inside Volcano Summit from Volcano Summit Waterfall",
                patch_info: Some(EntrancePatchInfo {
                    stage_name: "F201_1",
                    room: 0u8,
                    layer: 0u8,
                    entrance_id: 2u8,
                }),
            },
        }
    }
}
pub struct EventDef {
    pub name: &'static str,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Event {
    ActivateFireNode,
    ActivateLightningNode,
    ActivateSkyviewGoddessWall,
    ActivateWaterNode,
    BeatDemise,
    BeatRequiredDungeons,
    BehindTheTempleStatue,
    CanBeatAncientCistern,
    CanBeatEarthTemple,
    CanBeatFireSanctuary,
    CanBeatLanayruMiningFacility,
    CanBeatSandship,
    CanBeatSkyKeep,
    CanBeatSkyview,
    CanFreelyChangeSandshipTemporality,
    CanLowerAcStatue,
    CanPlayCleanCut,
    CanPlayThrillDigger,
    CanRetrievePartyWheel,
    CanSellTreasures,
    DeepWoodsStatue,
    DefeatImprisoned2,
    DefeatedShipyardMolderach,
    DeliveredHotSoup,
    DesertEntranceStatue,
    EldinEntranceStatue,
    EndurancePotion,
    FaronWoodsEntryStatue,
    FloriaWaterfallStatue,
    ForestTempleStatue,
    GoddessCubeEastOfEarthTempleEntrance,
    GoddessCubeWestOfEarthTempleEntrance,
    GoddessCubeAtEldinEntrance,
    GoddessCubeAtLanayruMinesEntrance,
    GoddessCubeAtRideNearTempleOfTime,
    GoddessCubeInAncientHarbour,
    GoddessCubeInDeepWoods,
    GoddessCubeInEldinSlide,
    GoddessCubeInFloriaWaterfall,
    GoddessCubeInLakeFloria,
    GoddessCubeInMogmaTurf,
    GoddessCubeInPirateStronghold,
    GoddessCubeInSandOasis,
    GoddessCubeInSecretPassagewayInDesert,
    GoddessCubeInSkippersRetreat,
    GoddessCubeInSkyviewSpring,
    GoddessCubeInSummitWaterfall,
    GoddessCubeInsideVolcanoSummit,
    GoddessCubeNearFsEntrance,
    GoddessCubeNearHookBeetleFight,
    GoddessCubeNearMogmaTurfEntrance,
    GoddessCubeOnEastGreatTreeWithClawshotsTarget,
    GoddessCubeOnEastGreatTreeWithRope,
    GoddessCubeOnWestGreatTreeNearExit,
    GoddessCubeOnTopOfSkyview,
    GreatTreeStatue,
    HighRupeeFarm,
    InTheWoodsStatue,
    InitialGoddessCube,
    InsideTheVolcanoStatue,
    LakeFloriaStatue,
    LanayruDesertDungeonBeaten,
    LanayruMineEntryStatue,
    LumpyPumpkinQuestStart,
    NorthDesertStatue,
    OpenSharkhead,
    OpenedShed,
    PickUpGuld,
    PickUpLeviasSoup,
    PumpkinCarrying,
    RaiseGoT,
    RaiseLanayruMiningFacility,
    RetrieveCrystalBall,
    RetrieveOolo,
    SaveOrielle,
    SealedGroundsStatue,
    StartImprisoned2,
    StoneCacheStatue,
    SwordRequirementMet,
    TalkToOrielle,
    TalkToPeatriceInBazaar,
    TalkToYerbal,
    TempleEntranceStatue,
    TriforcesCollected,
    UnlockedZeldasRoom,
    ViewingPlatformStatue,
    VolcanoAscentStatue,
    VolcanoEastStatue,
    WestDesertStatue,
}
impl From<Event> for usize {
    fn from(val: Event) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Event {
    const ALL: &'static [Event] = &[
        Event::ActivateFireNode,
        Event::ActivateLightningNode,
        Event::ActivateSkyviewGoddessWall,
        Event::ActivateWaterNode,
        Event::BeatDemise,
        Event::BeatRequiredDungeons,
        Event::BehindTheTempleStatue,
        Event::CanBeatAncientCistern,
        Event::CanBeatEarthTemple,
        Event::CanBeatFireSanctuary,
        Event::CanBeatLanayruMiningFacility,
        Event::CanBeatSandship,
        Event::CanBeatSkyKeep,
        Event::CanBeatSkyview,
        Event::CanFreelyChangeSandshipTemporality,
        Event::CanLowerAcStatue,
        Event::CanPlayCleanCut,
        Event::CanPlayThrillDigger,
        Event::CanRetrievePartyWheel,
        Event::CanSellTreasures,
        Event::DeepWoodsStatue,
        Event::DefeatImprisoned2,
        Event::DefeatedShipyardMolderach,
        Event::DeliveredHotSoup,
        Event::DesertEntranceStatue,
        Event::EldinEntranceStatue,
        Event::EndurancePotion,
        Event::FaronWoodsEntryStatue,
        Event::FloriaWaterfallStatue,
        Event::ForestTempleStatue,
        Event::GoddessCubeEastOfEarthTempleEntrance,
        Event::GoddessCubeWestOfEarthTempleEntrance,
        Event::GoddessCubeAtEldinEntrance,
        Event::GoddessCubeAtLanayruMinesEntrance,
        Event::GoddessCubeAtRideNearTempleOfTime,
        Event::GoddessCubeInAncientHarbour,
        Event::GoddessCubeInDeepWoods,
        Event::GoddessCubeInEldinSlide,
        Event::GoddessCubeInFloriaWaterfall,
        Event::GoddessCubeInLakeFloria,
        Event::GoddessCubeInMogmaTurf,
        Event::GoddessCubeInPirateStronghold,
        Event::GoddessCubeInSandOasis,
        Event::GoddessCubeInSecretPassagewayInDesert,
        Event::GoddessCubeInSkippersRetreat,
        Event::GoddessCubeInSkyviewSpring,
        Event::GoddessCubeInSummitWaterfall,
        Event::GoddessCubeInsideVolcanoSummit,
        Event::GoddessCubeNearFsEntrance,
        Event::GoddessCubeNearHookBeetleFight,
        Event::GoddessCubeNearMogmaTurfEntrance,
        Event::GoddessCubeOnEastGreatTreeWithClawshotsTarget,
        Event::GoddessCubeOnEastGreatTreeWithRope,
        Event::GoddessCubeOnWestGreatTreeNearExit,
        Event::GoddessCubeOnTopOfSkyview,
        Event::GreatTreeStatue,
        Event::HighRupeeFarm,
        Event::InTheWoodsStatue,
        Event::InitialGoddessCube,
        Event::InsideTheVolcanoStatue,
        Event::LakeFloriaStatue,
        Event::LanayruDesertDungeonBeaten,
        Event::LanayruMineEntryStatue,
        Event::LumpyPumpkinQuestStart,
        Event::NorthDesertStatue,
        Event::OpenSharkhead,
        Event::OpenedShed,
        Event::PickUpGuld,
        Event::PickUpLeviasSoup,
        Event::PumpkinCarrying,
        Event::RaiseGoT,
        Event::RaiseLanayruMiningFacility,
        Event::RetrieveCrystalBall,
        Event::RetrieveOolo,
        Event::SaveOrielle,
        Event::SealedGroundsStatue,
        Event::StartImprisoned2,
        Event::StoneCacheStatue,
        Event::SwordRequirementMet,
        Event::TalkToOrielle,
        Event::TalkToPeatriceInBazaar,
        Event::TalkToYerbal,
        Event::TempleEntranceStatue,
        Event::TriforcesCollected,
        Event::UnlockedZeldasRoom,
        Event::ViewingPlatformStatue,
        Event::VolcanoAscentStatue,
        Event::VolcanoEastStatue,
        Event::WestDesertStatue,
    ];
}
impl Event {
    pub fn get(&self) -> &'static EventDef {
        match self {
            Event::ActivateFireNode => &EventDef {
                name: "Activate Fire Node",
            },
            Event::ActivateLightningNode => &EventDef {
                name: "Activate Lightning Node",
            },
            Event::ActivateSkyviewGoddessWall => &EventDef {
                name: "Activate Skyview Goddess Wall",
            },
            Event::ActivateWaterNode => &EventDef {
                name: "Activate Water Node",
            },
            Event::BeatDemise => &EventDef {
                name: "Beat Demise",
            },
            Event::BeatRequiredDungeons => &EventDef {
                name: "Beat Required Dungeons",
            },
            Event::BehindTheTempleStatue => &EventDef {
                name: "Behind the Temple Statue",
            },
            Event::CanBeatAncientCistern => &EventDef {
                name: "Can Beat Ancient Cistern",
            },
            Event::CanBeatEarthTemple => &EventDef {
                name: "Can Beat Earth Temple",
            },
            Event::CanBeatFireSanctuary => &EventDef {
                name: "Can Beat Fire Sanctuary",
            },
            Event::CanBeatLanayruMiningFacility => &EventDef {
                name: "Can Beat Lanayru Mining Facility",
            },
            Event::CanBeatSandship => &EventDef {
                name: "Can Beat Sandship",
            },
            Event::CanBeatSkyKeep => &EventDef {
                name: "Can Beat Sky Keep",
            },
            Event::CanBeatSkyview => &EventDef {
                name: "Can Beat Skyview",
            },
            Event::CanFreelyChangeSandshipTemporality => &EventDef {
                name: "Can Freely Change Sandship Temporality",
            },
            Event::CanLowerAcStatue => &EventDef {
                name: "Can Lower AC Statue",
            },
            Event::CanPlayCleanCut => &EventDef {
                name: "Can Play Clean Cut",
            },
            Event::CanPlayThrillDigger => &EventDef {
                name: "Can Play Thrill Digger",
            },
            Event::CanRetrievePartyWheel => &EventDef {
                name: "Can Retrieve Party Wheel",
            },
            Event::CanSellTreasures => &EventDef {
                name: "Can Sell Treasures",
            },
            Event::DeepWoodsStatue => &EventDef {
                name: "Deep Woods Statue",
            },
            Event::DefeatImprisoned2 => &EventDef {
                name: "Defeat Imprisoned 2",
            },
            Event::DefeatedShipyardMolderach => &EventDef {
                name: "Defeated Shipyard Molderach",
            },
            Event::DeliveredHotSoup => &EventDef {
                name: "Delivered Hot Soup",
            },
            Event::DesertEntranceStatue => &EventDef {
                name: "Desert Entrance Statue",
            },
            Event::EldinEntranceStatue => &EventDef {
                name: "Eldin Entrance Statue",
            },
            Event::EndurancePotion => &EventDef {
                name: "Endurance Potion",
            },
            Event::FaronWoodsEntryStatue => &EventDef {
                name: "Faron Woods Entry Statue",
            },
            Event::FloriaWaterfallStatue => &EventDef {
                name: "Floria Waterfall Statue",
            },
            Event::ForestTempleStatue => &EventDef {
                name: "Forest Temple Statue",
            },
            Event::GoddessCubeEastOfEarthTempleEntrance => &EventDef {
                name: "Goddess Cube East of Earth Temple Entrance",
            },
            Event::GoddessCubeWestOfEarthTempleEntrance => &EventDef {
                name: "Goddess Cube West of Earth Temple Entrance",
            },
            Event::GoddessCubeAtEldinEntrance => &EventDef {
                name: "Goddess Cube at Eldin Entrance",
            },
            Event::GoddessCubeAtLanayruMinesEntrance => &EventDef {
                name: "Goddess Cube at Lanayru Mines Entrance",
            },
            Event::GoddessCubeAtRideNearTempleOfTime => &EventDef {
                name: "Goddess Cube at Ride near Temple of Time",
            },
            Event::GoddessCubeInAncientHarbour => &EventDef {
                name: "Goddess Cube in Ancient Harbour",
            },
            Event::GoddessCubeInDeepWoods => &EventDef {
                name: "Goddess Cube in Deep Woods",
            },
            Event::GoddessCubeInEldinSlide => &EventDef {
                name: "Goddess Cube in Eldin Slide",
            },
            Event::GoddessCubeInFloriaWaterfall => &EventDef {
                name: "Goddess Cube in Floria Waterfall",
            },
            Event::GoddessCubeInLakeFloria => &EventDef {
                name: "Goddess Cube in Lake Floria",
            },
            Event::GoddessCubeInMogmaTurf => &EventDef {
                name: "Goddess Cube in Mogma Turf",
            },
            Event::GoddessCubeInPirateStronghold => &EventDef {
                name: "Goddess Cube in Pirate Stronghold",
            },
            Event::GoddessCubeInSandOasis => &EventDef {
                name: "Goddess Cube in Sand Oasis",
            },
            Event::GoddessCubeInSecretPassagewayInDesert => &EventDef {
                name: "Goddess Cube in Secret Passageway in Desert",
            },
            Event::GoddessCubeInSkippersRetreat => &EventDef {
                name: "Goddess Cube in Skipper's Retreat",
            },
            Event::GoddessCubeInSkyviewSpring => &EventDef {
                name: "Goddess Cube in Skyview Spring",
            },
            Event::GoddessCubeInSummitWaterfall => &EventDef {
                name: "Goddess Cube in Summit Waterfall",
            },
            Event::GoddessCubeInsideVolcanoSummit => &EventDef {
                name: "Goddess Cube inside Volcano Summit",
            },
            Event::GoddessCubeNearFsEntrance => &EventDef {
                name: "Goddess Cube near FS Entrance",
            },
            Event::GoddessCubeNearHookBeetleFight => &EventDef {
                name: "Goddess Cube near Hook Beetle Fight",
            },
            Event::GoddessCubeNearMogmaTurfEntrance => &EventDef {
                name: "Goddess Cube near Mogma Turf Entrance",
            },
            Event::GoddessCubeOnEastGreatTreeWithClawshotsTarget => &EventDef {
                name: "Goddess Cube on East Great Tree with Clawshots Target",
            },
            Event::GoddessCubeOnEastGreatTreeWithRope => &EventDef {
                name: "Goddess Cube on East Great Tree with Rope",
            },
            Event::GoddessCubeOnWestGreatTreeNearExit => &EventDef {
                name: "Goddess Cube on West Great Tree near Exit",
            },
            Event::GoddessCubeOnTopOfSkyview => &EventDef {
                name: "Goddess Cube on top of Skyview",
            },
            Event::GreatTreeStatue => &EventDef {
                name: "Great Tree Statue",
            },
            Event::HighRupeeFarm => &EventDef {
                name: "High Rupee Farm",
            },
            Event::InTheWoodsStatue => &EventDef {
                name: "In the Woods Statue",
            },
            Event::InitialGoddessCube => &EventDef {
                name: "Initial Goddess Cube",
            },
            Event::InsideTheVolcanoStatue => &EventDef {
                name: "Inside the Volcano Statue",
            },
            Event::LakeFloriaStatue => &EventDef {
                name: "Lake Floria Statue",
            },
            Event::LanayruDesertDungeonBeaten => &EventDef {
                name: "Lanayru Desert Dungeon Beaten",
            },
            Event::LanayruMineEntryStatue => &EventDef {
                name: "Lanayru Mine Entry Statue",
            },
            Event::LumpyPumpkinQuestStart => &EventDef {
                name: "Lumpy Pumpkin Quest Start",
            },
            Event::NorthDesertStatue => &EventDef {
                name: "North Desert Statue",
            },
            Event::OpenSharkhead => &EventDef {
                name: "Open Sharkhead",
            },
            Event::OpenedShed => &EventDef {
                name: "Opened Shed",
            },
            Event::PickUpGuld => &EventDef {
                name: "Pick up Guld",
            },
            Event::PickUpLeviasSoup => &EventDef {
                name: "Pick up Levia's Soup",
            },
            Event::PumpkinCarrying => &EventDef {
                name: "Pumpkin Carrying",
            },
            Event::RaiseGoT => &EventDef { name: "Raise GoT" },
            Event::RaiseLanayruMiningFacility => &EventDef {
                name: "Raise Lanayru Mining Facility",
            },
            Event::RetrieveCrystalBall => &EventDef {
                name: "Retrieve Crystal Ball",
            },
            Event::RetrieveOolo => &EventDef {
                name: "Retrieve Oolo",
            },
            Event::SaveOrielle => &EventDef {
                name: "Save Orielle",
            },
            Event::SealedGroundsStatue => &EventDef {
                name: "Sealed Grounds Statue",
            },
            Event::StartImprisoned2 => &EventDef {
                name: "Start Imprisoned 2",
            },
            Event::StoneCacheStatue => &EventDef {
                name: "Stone Cache Statue",
            },
            Event::SwordRequirementMet => &EventDef {
                name: "Sword Requirement Met",
            },
            Event::TalkToOrielle => &EventDef {
                name: "Talk to Orielle",
            },
            Event::TalkToPeatriceInBazaar => &EventDef {
                name: "Talk to Peatrice in Bazaar",
            },
            Event::TalkToYerbal => &EventDef {
                name: "Talk to Yerbal",
            },
            Event::TempleEntranceStatue => &EventDef {
                name: "Temple Entrance Statue",
            },
            Event::TriforcesCollected => &EventDef {
                name: "Triforces Collected",
            },
            Event::UnlockedZeldasRoom => &EventDef {
                name: "Unlocked Zelda's Room",
            },
            Event::ViewingPlatformStatue => &EventDef {
                name: "Viewing Platform Statue",
            },
            Event::VolcanoAscentStatue => &EventDef {
                name: "Volcano Ascent Statue",
            },
            Event::VolcanoEastStatue => &EventDef {
                name: "Volcano East Statue",
            },
            Event::WestDesertStatue => &EventDef {
                name: "West Desert Statue",
            },
        }
    }
}
pub struct ItemDef {
    pub name: &'static str,
    pub item_id: u16,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Item {
    GreenRupee,
    BlueRupee,
    RedRupee,
    ProgressiveSword,
    GoddessHarp,
    ProgressiveBow,
    Clawshots,
    SpiralCharge,
    AncientCisternBossKey,
    FireSanctuaryBossKey,
    SandshipBossKey,
    KeyPiece,
    SkyviewBossKey,
    EarthTempleBossKey,
    LanayruMiningFacilityBossKey,
    SilverRupee,
    GoldRupee,
    Rupoor,
    GratitudeCrystalPack,
    X5Bombs,
    X10Bombs,
    GratitudeCrystal,
    GustBellows,
    ProgressiveSlingshot,
    ProgressiveBeetle,
    ProgressiveMitts,
    DekuSeeds10,
    SemiRareTreasure,
    RareTreasure,
    WaterScale,
    BugMedal,
    ProgressiveBugNet,
    BombBag,
    HeartContainer,
    HeartPiece,
    TriforceOfCourage,
    TriforceOfPower,
    TriforceOfWisdom,
    SeaChart,
    HeartMedal,
    RupeeMedal,
    TreasureMedal,
    PotionMedal,
    CursedMedal,
    ProgressiveWallet,
    ProgressivePouch,
    LifeMedal,
    WoodenShield,
    HylianShield,
    SmallSeedSatchel,
    SmallQuiver,
    SmallBombBag,
    Whip,
    FireshieldEarrings,
    EmptyBottle,
    CawlinsLetter,
    HornedColossusBeetle,
    BabyRattle,
    Tumbleweed,
    EldinOre,
    DuskRelic,
    MonsterHorn,
    EvilCrystal,
    GoldenSkull,
    GoddessPlume,
    EmeraldTablet,
    RubyTablet,
    AmberTablet,
    StoneOfTrials,
    BalladOfTheGoddess,
    FaroresCourage,
    NayrusWisdom,
    DinsPower,
    FaronSongOfTheHeroPart,
    EldinSongOfTheHeroPart,
    LanayruSongOfTheHeroPart,
    LifeTreeSeedling,
    LifeTreeFruit,
    ExtraWallet,
    SkyviewSmallKey,
    LanayruMiningFacilitySmallKey,
    AncientCisternSmallKey,
    FireSanctuarySmallKey,
    SandshipSmallKey,
    SkyKeepSmallKey,
    LanayruCavesSmallKey,
    SkyviewMap,
    EarthTempleMap,
    LanayruMiningFacilityMap,
    AncientCisternMap,
    FireSanctuaryMap,
    SandshipMap,
    SkyKeepMap,
}
impl From<Item> for usize {
    fn from(val: Item) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Item {
    const ALL: &'static [Item] = &[
        Item::GreenRupee,
        Item::BlueRupee,
        Item::RedRupee,
        Item::ProgressiveSword,
        Item::GoddessHarp,
        Item::ProgressiveBow,
        Item::Clawshots,
        Item::SpiralCharge,
        Item::AncientCisternBossKey,
        Item::FireSanctuaryBossKey,
        Item::SandshipBossKey,
        Item::KeyPiece,
        Item::SkyviewBossKey,
        Item::EarthTempleBossKey,
        Item::LanayruMiningFacilityBossKey,
        Item::SilverRupee,
        Item::GoldRupee,
        Item::Rupoor,
        Item::GratitudeCrystalPack,
        Item::X5Bombs,
        Item::X10Bombs,
        Item::GratitudeCrystal,
        Item::GustBellows,
        Item::ProgressiveSlingshot,
        Item::ProgressiveBeetle,
        Item::ProgressiveMitts,
        Item::DekuSeeds10,
        Item::SemiRareTreasure,
        Item::RareTreasure,
        Item::WaterScale,
        Item::BugMedal,
        Item::ProgressiveBugNet,
        Item::BombBag,
        Item::HeartContainer,
        Item::HeartPiece,
        Item::TriforceOfCourage,
        Item::TriforceOfPower,
        Item::TriforceOfWisdom,
        Item::SeaChart,
        Item::HeartMedal,
        Item::RupeeMedal,
        Item::TreasureMedal,
        Item::PotionMedal,
        Item::CursedMedal,
        Item::ProgressiveWallet,
        Item::ProgressivePouch,
        Item::LifeMedal,
        Item::WoodenShield,
        Item::HylianShield,
        Item::SmallSeedSatchel,
        Item::SmallQuiver,
        Item::SmallBombBag,
        Item::Whip,
        Item::FireshieldEarrings,
        Item::EmptyBottle,
        Item::CawlinsLetter,
        Item::HornedColossusBeetle,
        Item::BabyRattle,
        Item::Tumbleweed,
        Item::EldinOre,
        Item::DuskRelic,
        Item::MonsterHorn,
        Item::EvilCrystal,
        Item::GoldenSkull,
        Item::GoddessPlume,
        Item::EmeraldTablet,
        Item::RubyTablet,
        Item::AmberTablet,
        Item::StoneOfTrials,
        Item::BalladOfTheGoddess,
        Item::FaroresCourage,
        Item::NayrusWisdom,
        Item::DinsPower,
        Item::FaronSongOfTheHeroPart,
        Item::EldinSongOfTheHeroPart,
        Item::LanayruSongOfTheHeroPart,
        Item::LifeTreeSeedling,
        Item::LifeTreeFruit,
        Item::ExtraWallet,
        Item::SkyviewSmallKey,
        Item::LanayruMiningFacilitySmallKey,
        Item::AncientCisternSmallKey,
        Item::FireSanctuarySmallKey,
        Item::SandshipSmallKey,
        Item::SkyKeepSmallKey,
        Item::LanayruCavesSmallKey,
        Item::SkyviewMap,
        Item::EarthTempleMap,
        Item::LanayruMiningFacilityMap,
        Item::AncientCisternMap,
        Item::FireSanctuaryMap,
        Item::SandshipMap,
        Item::SkyKeepMap,
    ];
}
impl Item {
    pub fn get(&self) -> &'static ItemDef {
        match self {
            Item::GreenRupee => &ItemDef {
                item_id: 2u16,
                name: "Green Rupee",
            },
            Item::BlueRupee => &ItemDef {
                item_id: 3u16,
                name: "Blue Rupee",
            },
            Item::RedRupee => &ItemDef {
                item_id: 4u16,
                name: "Red Rupee",
            },
            Item::ProgressiveSword => &ItemDef {
                item_id: 10u16,
                name: "Progressive Sword",
            },
            Item::GoddessHarp => &ItemDef {
                item_id: 16u16,
                name: "Goddess Harp",
            },
            Item::ProgressiveBow => &ItemDef {
                item_id: 19u16,
                name: "Progressive Bow",
            },
            Item::Clawshots => &ItemDef {
                item_id: 20u16,
                name: "Clawshots",
            },
            Item::SpiralCharge => &ItemDef {
                item_id: 21u16,
                name: "Spiral Charge",
            },
            Item::AncientCisternBossKey => &ItemDef {
                item_id: 25u16,
                name: "Ancient Cistern Boss Key",
            },
            Item::FireSanctuaryBossKey => &ItemDef {
                item_id: 26u16,
                name: "Fire Sanctuary Boss Key",
            },
            Item::SandshipBossKey => &ItemDef {
                item_id: 27u16,
                name: "Sandship Boss Key",
            },
            Item::KeyPiece => &ItemDef {
                item_id: 28u16,
                name: "Key Piece",
            },
            Item::SkyviewBossKey => &ItemDef {
                item_id: 29u16,
                name: "Skyview Boss Key",
            },
            Item::EarthTempleBossKey => &ItemDef {
                item_id: 30u16,
                name: "Earth Temple Boss Key",
            },
            Item::LanayruMiningFacilityBossKey => &ItemDef {
                item_id: 31u16,
                name: "Lanayru Mining Facility Boss Key",
            },
            Item::SilverRupee => &ItemDef {
                item_id: 32u16,
                name: "Silver Rupee",
            },
            Item::GoldRupee => &ItemDef {
                item_id: 33u16,
                name: "Gold Rupee",
            },
            Item::Rupoor => &ItemDef {
                item_id: 34u16,
                name: "Rupoor",
            },
            Item::GratitudeCrystalPack => &ItemDef {
                item_id: 35u16,
                name: "Gratitude Crystal Pack",
            },
            Item::X5Bombs => &ItemDef {
                item_id: 40u16,
                name: "5 Bombs",
            },
            Item::X10Bombs => &ItemDef {
                item_id: 41u16,
                name: "10 Bombs",
            },
            Item::GratitudeCrystal => &ItemDef {
                item_id: 48u16,
                name: "Gratitude Crystal",
            },
            Item::GustBellows => &ItemDef {
                item_id: 49u16,
                name: "Gust Bellows",
            },
            Item::ProgressiveSlingshot => &ItemDef {
                item_id: 52u16,
                name: "Progressive Slingshot",
            },
            Item::ProgressiveBeetle => &ItemDef {
                item_id: 53u16,
                name: "Progressive Beetle",
            },
            Item::ProgressiveMitts => &ItemDef {
                item_id: 56u16,
                name: "Progressive Mitts",
            },
            Item::DekuSeeds10 => &ItemDef {
                item_id: 60u16,
                name: "Deku Seeds 10",
            },
            Item::SemiRareTreasure => &ItemDef {
                item_id: 63u16,
                name: "Semi Rare Treasure",
            },
            Item::RareTreasure => &ItemDef {
                item_id: 64u16,
                name: "Rare Treasure",
            },
            Item::WaterScale => &ItemDef {
                item_id: 68u16,
                name: "Water Scale",
            },
            Item::BugMedal => &ItemDef {
                item_id: 70u16,
                name: "Bug Medal",
            },
            Item::ProgressiveBugNet => &ItemDef {
                item_id: 71u16,
                name: "Progressive Bug Net",
            },
            Item::BombBag => &ItemDef {
                item_id: 92u16,
                name: "Bomb Bag",
            },
            Item::HeartContainer => &ItemDef {
                item_id: 93u16,
                name: "Heart Container",
            },
            Item::HeartPiece => &ItemDef {
                item_id: 94u16,
                name: "Heart Piece",
            },
            Item::TriforceOfCourage => &ItemDef {
                item_id: 95u16,
                name: "Triforce of Courage",
            },
            Item::TriforceOfPower => &ItemDef {
                item_id: 96u16,
                name: "Triforce of Power",
            },
            Item::TriforceOfWisdom => &ItemDef {
                item_id: 97u16,
                name: "Triforce of Wisdom",
            },
            Item::SeaChart => &ItemDef {
                item_id: 98u16,
                name: "Sea Chart",
            },
            Item::HeartMedal => &ItemDef {
                item_id: 100u16,
                name: "Heart Medal",
            },
            Item::RupeeMedal => &ItemDef {
                item_id: 101u16,
                name: "Rupee Medal",
            },
            Item::TreasureMedal => &ItemDef {
                item_id: 102u16,
                name: "Treasure Medal",
            },
            Item::PotionMedal => &ItemDef {
                item_id: 103u16,
                name: "Potion Medal",
            },
            Item::CursedMedal => &ItemDef {
                item_id: 104u16,
                name: "Cursed Medal",
            },
            Item::ProgressiveWallet => &ItemDef {
                item_id: 108u16,
                name: "Progressive Wallet",
            },
            Item::ProgressivePouch => &ItemDef {
                item_id: 112u16,
                name: "Progressive Pouch",
            },
            Item::LifeMedal => &ItemDef {
                item_id: 114u16,
                name: "Life Medal",
            },
            Item::WoodenShield => &ItemDef {
                item_id: 116u16,
                name: "Wooden Shield",
            },
            Item::HylianShield => &ItemDef {
                item_id: 125u16,
                name: "Hylian Shield",
            },
            Item::SmallSeedSatchel => &ItemDef {
                item_id: 128u16,
                name: "Small Seed Satchel",
            },
            Item::SmallQuiver => &ItemDef {
                item_id: 131u16,
                name: "Small Quiver",
            },
            Item::SmallBombBag => &ItemDef {
                item_id: 134u16,
                name: "Small Bomb Bag",
            },
            Item::Whip => &ItemDef {
                item_id: 137u16,
                name: "Whip",
            },
            Item::FireshieldEarrings => &ItemDef {
                item_id: 138u16,
                name: "Fireshield Earrings",
            },
            Item::EmptyBottle => &ItemDef {
                item_id: 153u16,
                name: "Empty Bottle",
            },
            Item::CawlinsLetter => &ItemDef {
                item_id: 158u16,
                name: "Cawlin's Letter",
            },
            Item::HornedColossusBeetle => &ItemDef {
                item_id: 159u16,
                name: "Horned Colossus Beetle",
            },
            Item::BabyRattle => &ItemDef {
                item_id: 160u16,
                name: "Baby Rattle",
            },
            Item::Tumbleweed => &ItemDef {
                item_id: 163u16,
                name: "Tumbleweed",
            },
            Item::EldinOre => &ItemDef {
                item_id: 165u16,
                name: "Eldin Ore",
            },
            Item::DuskRelic => &ItemDef {
                item_id: 168u16,
                name: "Dusk Relic",
            },
            Item::MonsterHorn => &ItemDef {
                item_id: 171u16,
                name: "Monster Horn",
            },
            Item::EvilCrystal => &ItemDef {
                item_id: 173u16,
                name: "Evil Crystal",
            },
            Item::GoldenSkull => &ItemDef {
                item_id: 175u16,
                name: "Golden Skull",
            },
            Item::GoddessPlume => &ItemDef {
                item_id: 176u16,
                name: "Goddess Plume",
            },
            Item::EmeraldTablet => &ItemDef {
                item_id: 177u16,
                name: "Emerald Tablet",
            },
            Item::RubyTablet => &ItemDef {
                item_id: 178u16,
                name: "Ruby Tablet",
            },
            Item::AmberTablet => &ItemDef {
                item_id: 179u16,
                name: "Amber Tablet",
            },
            Item::StoneOfTrials => &ItemDef {
                item_id: 180u16,
                name: "Stone of Trials",
            },
            Item::BalladOfTheGoddess => &ItemDef {
                item_id: 186u16,
                name: "Ballad of the Goddess",
            },
            Item::FaroresCourage => &ItemDef {
                item_id: 187u16,
                name: "Farore's Courage",
            },
            Item::NayrusWisdom => &ItemDef {
                item_id: 188u16,
                name: "Nayru's Wisdom",
            },
            Item::DinsPower => &ItemDef {
                item_id: 189u16,
                name: "Din's Power",
            },
            Item::FaronSongOfTheHeroPart => &ItemDef {
                item_id: 190u16,
                name: "Faron Song of the Hero Part",
            },
            Item::EldinSongOfTheHeroPart => &ItemDef {
                item_id: 191u16,
                name: "Eldin Song of the Hero Part",
            },
            Item::LanayruSongOfTheHeroPart => &ItemDef {
                item_id: 192u16,
                name: "Lanayru Song of the Hero Part",
            },
            Item::LifeTreeSeedling => &ItemDef {
                item_id: 197u16,
                name: "Life Tree Seedling",
            },
            Item::LifeTreeFruit => &ItemDef {
                item_id: 198u16,
                name: "Life Tree Fruit",
            },
            Item::ExtraWallet => &ItemDef {
                item_id: 199u16,
                name: "Extra Wallet",
            },
            Item::SkyviewSmallKey => &ItemDef {
                item_id: 200u16,
                name: "Skyview Small Key",
            },
            Item::LanayruMiningFacilitySmallKey => &ItemDef {
                item_id: 201u16,
                name: "Lanayru Mining Facility Small Key",
            },
            Item::AncientCisternSmallKey => &ItemDef {
                item_id: 202u16,
                name: "Ancient Cistern Small Key",
            },
            Item::FireSanctuarySmallKey => &ItemDef {
                item_id: 203u16,
                name: "Fire Sanctuary Small Key",
            },
            Item::SandshipSmallKey => &ItemDef {
                item_id: 204u16,
                name: "Sandship Small Key",
            },
            Item::SkyKeepSmallKey => &ItemDef {
                item_id: 205u16,
                name: "Sky Keep Small Key",
            },
            Item::LanayruCavesSmallKey => &ItemDef {
                item_id: 206u16,
                name: "LanayruCaves Small Key",
            },
            Item::SkyviewMap => &ItemDef {
                item_id: 207u16,
                name: "Skyview Map",
            },
            Item::EarthTempleMap => &ItemDef {
                item_id: 208u16,
                name: "Earth Temple Map",
            },
            Item::LanayruMiningFacilityMap => &ItemDef {
                item_id: 209u16,
                name: "Lanayru Mining Facility Map",
            },
            Item::AncientCisternMap => &ItemDef {
                item_id: 210u16,
                name: "Ancient Cistern Map",
            },
            Item::FireSanctuaryMap => &ItemDef {
                item_id: 211u16,
                name: "Fire Sanctuary Map",
            },
            Item::SandshipMap => &ItemDef {
                item_id: 212u16,
                name: "Sandship Map",
            },
            Item::SkyKeepMap => &ItemDef {
                item_id: 213u16,
                name: "Sky Keep Map",
            },
        }
    }
}
pub enum LocationKind {
    Check { vanilla_item: Item },
    GossipStone { text_path: &'static str },
}
pub struct LocationDef {
    pub name: &'static str,
    pub area: Area,
    pub display_name: &'static str,
    pub kind: LocationKind,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Location {
    AncientCisternChestAfterWhipHooks,
    AncientCisternBokoblin,
    AncientCisternChestBehindTheWaterfall,
    AncientCisternBossKeyChest,
    AncientCisternChestInEastPart,
    AncientCisternChestNearVines,
    AncientCisternWhip,
    AncientCisternKoloktosHeartContainer,
    AncientCisternFaroresFlame,
    Batreaux10Crystals,
    Batreaux30Crystals,
    Batreaux30CrystalsChest,
    Batreaux40Crystals,
    Batreaux5Crystals,
    Batreaux50Crystals,
    Batreaux70Crystals,
    Batreaux70CrystalsSecondReward,
    Batreaux80Crystals,
    Beedle1000RupeeItem,
    Beedle1200RupeeItem,
    Beedle1600RupeeItem,
    Beedle300RupeeItem,
    Beedle50RupeeItem,
    Beedle600RupeeItem,
    Beedle800RupeeItem,
    BeedleFirst100RupeeItem,
    BeedleSecond100RupeeItem,
    BeedleThird100RupeeItem,
    CentralSkyloftBazaarGoddessChest,
    CentralSkyloftPotionLadysGift,
    CentralSkyloftCrystalInOrielleAndParrowsHouse,
    CentralSkyloftPeaterPeatricesCrystals,
    CentralSkyloftCrystalBetweenWoodenPlanks,
    CentralSkyloftCrystalOnLightTower,
    CentralSkyloftCrystalOnWaterfallIsland,
    CentralSkyloftCrystalOnWestCliff,
    CentralSkyloftFloatingIslandGoddessChest,
    CentralSkyloftFloatingIslandGossipStone,
    CentralSkyloftItemInBirdNest,
    CentralSkyloftParrowsCrystals,
    CentralSkyloftParrowsGift,
    CentralSkyloftShedChest,
    CentralSkyloftShedGoddessChest,
    CentralSkyloftWaterfallGoddessChest,
    CentralSkyloftWestCliffGoddessChest,
    CentralSkyloftCrystalAfterWaterfallCave,
    CentralSkyloftCrystalInLoftwingPrison,
    CentralSkyloftWaterfallCaveFirstChest,
    CentralSkyloftWaterfallCaveSecondChest,
    CentralSkyloftWrynasCrystals,
    EarthTempleChestGuardedByLizalfos,
    EarthTempleBombBag,
    EarthTempleChestLeftOfMainRoomBridge,
    EarthTempleChestBehindBombableRock,
    EarthTempleChestInWestRoom,
    EarthTempleLeddsGift,
    EarthTempleBossKeyChest,
    EarthTempleVentChest,
    EarthTempleScalderaHeartContainer,
    EarthTempleAmberTablet,
    EldinSilentRealmFireshieldEarrings,
    EldinVolcanoChestBehindBombableWallInFirstRoom,
    EldinVolcanoDiggingSpotBehindBoulderOnSandySlope,
    EldinVolcanoDiggingSpotBelowTower,
    EldinVolcanoDiggingSpotInFrontOfEarthTemple,
    EldinVolcanoGossipStoneNextToEarthTemple,
    EldinVolcanoDiggingSpotAfterDrainingLava,
    EldinVolcanoChestAfterCrawlspace,
    EldinVolcanoChestBehindBombableWallNearCliff,
    EldinVolcanoItemOnCliff,
    EldinVolcanoDiggingSpotAfterVents,
    EldinVolcanoChestBehindBombableWallNearVolcanoAscent,
    EldinVolcanoGossipStoneInThrillDiggerCave,
    FaronSilentRealmWaterScale,
    FaronWoodsDeepWoodsChest,
    FaronWoodsChestBehindBombableRocksNearErla,
    FaronWoodsItemBehindBombableRock,
    FaronWoodsItemOnTree,
    FaronWoodsSlingshot,
    FaronWoodsChestInsideGreatTree,
    FireSanctuaryChestInFirstRoom,
    FireSanctuaryPlatsChest,
    FireSanctuaryBossKeyChest,
    FireSanctuaryChestInStaircaseRoom,
    FireSanctuaryMogmaMitts,
    FireSanctuaryChestInSecondRoom,
    FireSanctuaryChestOnBalcony,
    FireSanctuaryChestAfterBombableWall,
    FireSanctuaryChestAfterSecondTrappedMogma,
    FireSanctuaryChestNearFirstTrappedMogma,
    FireSanctuaryFirstChestInWaterFruitRoom,
    FireSanctuarySecondChestInWaterFruitRoom,
    FireSanctuaryGhirahimHeartContainer,
    FireSanctuaryDinsFlame,
    KnightAcademyChestInGoddessStatue,
    KnightAcademyCawlinsLetter,
    KnightAcademyCrystalInKnightAcademyPlant,
    KnightAcademyCrystalInLinksRoom,
    KnightAcademyCrystalInZeldasRoom,
    KnightAcademyFledgesCrystals,
    KnightAcademyFledgesGift,
    KnightAcademyGhostPipitsCrystals,
    KnightAcademyInZeldasCloset,
    KnightAcademyOwlansCrystals,
    KnightAcademyChestNearGoddessStatue,
    KnightAcademyOwlansGift,
    KnightAcademyPumpkinArchery600Points,
    KnightAcademyCrystalInSparringHall,
    KnightAcademySparringHallChest,
    LakeFloriaDragonLairEastChest,
    LakeFloriaDragonLairSouthChest,
    LakeFloriaLakeFloriaChest,
    LanayruCavesChest,
    LanayruCavesGolosGift,
    LanayruCavesGossipStoneInCenter,
    LanayruDesertFireNodeLeftEndingChest,
    LanayruDesertFireNodeRightEndingChest,
    LanayruDesertFireNodeFirstSmallChest,
    LanayruDesertFireNodeSecondSmallChest,
    LanayruDesertFireNodeShortcutChest,
    LanayruDesertChestNearHookBeetleFight,
    LanayruDesertChestNearPartyWheel,
    LanayruDesertHookBeetleFight,
    LanayruDesertChestOnPlatformNearFireNode,
    LanayruDesertChestOnPlatformNearLightningNode,
    LanayruDesertChestOnTopOfLanayruMiningFacility,
    LanayruDesertSecretPassagewayChest,
    LanayruDesertChestNearSandOasis,
    LanayruDesertLightningNodeFirstChest,
    LanayruDesertLightningNodeRaisedChestNearGenerator,
    LanayruDesertLightningNodeSecondChest,
    LanayruDesertGossipStoneInTempleOfTimeArea,
    LanayruMinesChestAtTheEndOfMines,
    LanayruMinesChestBehindFirstLanding,
    LanayruMinesChestBehindStatue,
    LanayruMinesChestNearFirstTimeshiftStone,
    LanayruMiningFacilityChestBehindBars,
    LanayruMiningFacilityChestInKeyLockedRoom,
    LanayruMiningFacilityChestInFirstWestRoom,
    LanayruMiningFacilityChestInsideGustBellowsRoom,
    LanayruMiningFacilityGustBellows,
    LanayruMiningFacilityChestAfterArmosFight,
    LanayruMiningFacilityShortcutChestInMainHub,
    LanayruMiningFacilityBossKeyChest,
    LanayruMiningFacilityFirstChestInHubRoom,
    LanayruMiningFacilityChestBehindFirstCrawlspace,
    LanayruMiningFacilityChestInSpikeMaze,
    LanayruMiningFacilityMolderachHeartContainer,
    LanayruMiningFacilityGoddessHarp,
    LanayruSandSeaPirateStrongholdFirstChest,
    LanayruSandSeaPirateStrongholdSecondChest,
    LanayruSandSeaPirateStrongholdThirdChest,
    LanayruSandSeaGossipStoneInShipyard,
    LanayruSandSeaRicketyCoasterHeartStoppingTrackIn105,
    LanayruSandSeaSkippersRetreatSkydiveChest,
    LanayruSandSeaSkippersRetreatChestOnTopOfCactiPillar,
    LanayruSandSeaSkippersRetreatChestAfterMoblin,
    LanayruSandSeaSkippersRetreatChestInShack,
    LanayruSilentRealmClawshots,
    MogmaTurfChestBehindBombableWallAtEntrance,
    MogmaTurfChestBehindBombableWallInFireMaze,
    MogmaTurfDiggingMittsFight,
    MogmaTurfFreeFallChest,
    MogmaTurfSandSlideChest,
    SandshipBossKeyChest,
    SandshipBow,
    SandshipChestAtTheStern,
    SandshipChestBefore4DoorCorridor,
    SandshipChestBehindCombinationLock,
    SandshipRobotInBrigsReward,
    SandshipTreasureRoomFifthChest,
    SandshipTreasureRoomFirstChest,
    SandshipTreasureRoomFourthChest,
    SandshipTreasureRoomSecondChest,
    SandshipTreasureRoomThirdChest,
    SandshipNayrusFlame,
    SandshipTentalusHeartContainer,
    SealedGroundsGorkosGoddessWallReward,
    SealedGroundsZeldasBlessing,
    SealedGroundsChestInsideSealedTemple,
    SealedGroundsSongFromImpa,
    SkyGossipStoneInsideBambooIsland,
    SkyCrystalInsideLumpyPumpkin,
    SkyLumpyPumpkinChandelier,
    SkyLumpyPumpkinHarpMinigame,
    SkyBeedlesIslandCageGoddessChest,
    SkyBeedlesCrystals,
    SkyCrystalOnBeedlesShip,
    SkyBambooIslandGoddessChest,
    SkyBeedlesIslandGoddessChest,
    SkyChestInBreakableBoulderNearFunFunIsland,
    SkyChestInBreakableBoulderNearLumpyPumpkin,
    SkyDodohsCrystals,
    SkyFunFunIslandMinigame500Rupees,
    SkyGoddessChestInCaveOnIslandNextToBambooIsland,
    SkyGoddessChestInsideVolcanicIsland,
    SkyGoddessChestOnIslandClosestToFaronPillar,
    SkyGoddessChestOnIslandNextToBambooIsland,
    SkyGoddessChestOutsideVolcanicIsland,
    SkyGoddessChestUnderFunFunIsland,
    SkyGossipStoneInVolcanicIsland,
    SkyLumpyPumpkinGoddessChestOnTheRoof,
    SkyNortheastIslandCageGoddessChest,
    SkyNortheastIslandGoddessChestBehindBombableRocks,
    SkyOriellesCrystals,
    SkySouthwestTripleIslandCageGoddessChest,
    SkySouthwestTripleIslandLowerGoddessChest,
    SkySouthwestTripleIslandUpperGoddessChest,
    SkyCrystalOutsideLumpyPumpkin,
    SkyKinasCrystals,
    SkyLumpyPumpkinOutsideGoddessChest,
    SkyKeepChestAfterDreadfuse,
    SkyKeepFirstChest,
    SkyloftSilentRealmStoneOfTrials,
    SkyloftVillageBertiesCrystals,
    SkyloftVillageMallarasCrystals,
    SkyloftVillageCrystalNearPumpkinPatch,
    SkyloftVillageSparrotsCrystals,
    SkyviewGhirahimHeartContainer,
    SkyviewRubyTablet,
    SkyviewBossKeyChest,
    SkyviewChestNearBossDoor,
    SkyviewChestBehindTwoEyes,
    SkyviewChestOnTreeBranch,
    SkyviewDiggingSpotInCrawlspace,
    SkyviewBeetle,
    SkyviewChestBehindThreeEyes,
    SkyviewItemBehindBars,
    ThunderheadBugHeaven10BugsIn3Minutes,
    ThunderheadBugHeavenGoddessChest,
    ThunderheadEastIslandChest,
    ThunderheadEastIslandGoddessChest,
    ThunderheadFirstGoddessChestOnMogmaMittsIsland,
    ThunderheadGoddessChestOnTopOfIsleOfSongs,
    ThunderheadGoddessChestOutsideIsleOfSongs,
    ThunderheadSongFromLevias,
    ThunderheadIsleOfSongsDinsPower,
    ThunderheadIsleOfSongsFaroresCourage,
    ThunderheadIsleOfSongsNayrusWisdom,
    VolcanoSummitBokoBasePouchChest,
    VolcanoSummitSmallChestInVolcanoSummit,
    VolcanoSummitGossipStoneOutsideFireSanctuary,
    VolcanoSummitItemBehindDigging,
    VolcanoSummitChestBehindBombableWallInWaterfallArea,
    VolcanoSummitGossipStoneInWaterfallArea,
}
impl From<Location> for usize {
    fn from(val: Location) -> Self {
        val as usize
    }
}
impl BitSetCompatible for Location {
    const ALL: &'static [Location] = &[
        Location::AncientCisternChestAfterWhipHooks,
        Location::AncientCisternBokoblin,
        Location::AncientCisternChestBehindTheWaterfall,
        Location::AncientCisternBossKeyChest,
        Location::AncientCisternChestInEastPart,
        Location::AncientCisternChestNearVines,
        Location::AncientCisternWhip,
        Location::AncientCisternKoloktosHeartContainer,
        Location::AncientCisternFaroresFlame,
        Location::Batreaux10Crystals,
        Location::Batreaux30Crystals,
        Location::Batreaux30CrystalsChest,
        Location::Batreaux40Crystals,
        Location::Batreaux5Crystals,
        Location::Batreaux50Crystals,
        Location::Batreaux70Crystals,
        Location::Batreaux70CrystalsSecondReward,
        Location::Batreaux80Crystals,
        Location::Beedle1000RupeeItem,
        Location::Beedle1200RupeeItem,
        Location::Beedle1600RupeeItem,
        Location::Beedle300RupeeItem,
        Location::Beedle50RupeeItem,
        Location::Beedle600RupeeItem,
        Location::Beedle800RupeeItem,
        Location::BeedleFirst100RupeeItem,
        Location::BeedleSecond100RupeeItem,
        Location::BeedleThird100RupeeItem,
        Location::CentralSkyloftBazaarGoddessChest,
        Location::CentralSkyloftPotionLadysGift,
        Location::CentralSkyloftCrystalInOrielleAndParrowsHouse,
        Location::CentralSkyloftPeaterPeatricesCrystals,
        Location::CentralSkyloftCrystalBetweenWoodenPlanks,
        Location::CentralSkyloftCrystalOnLightTower,
        Location::CentralSkyloftCrystalOnWaterfallIsland,
        Location::CentralSkyloftCrystalOnWestCliff,
        Location::CentralSkyloftFloatingIslandGoddessChest,
        Location::CentralSkyloftFloatingIslandGossipStone,
        Location::CentralSkyloftItemInBirdNest,
        Location::CentralSkyloftParrowsCrystals,
        Location::CentralSkyloftParrowsGift,
        Location::CentralSkyloftShedChest,
        Location::CentralSkyloftShedGoddessChest,
        Location::CentralSkyloftWaterfallGoddessChest,
        Location::CentralSkyloftWestCliffGoddessChest,
        Location::CentralSkyloftCrystalAfterWaterfallCave,
        Location::CentralSkyloftCrystalInLoftwingPrison,
        Location::CentralSkyloftWaterfallCaveFirstChest,
        Location::CentralSkyloftWaterfallCaveSecondChest,
        Location::CentralSkyloftWrynasCrystals,
        Location::EarthTempleChestGuardedByLizalfos,
        Location::EarthTempleBombBag,
        Location::EarthTempleChestLeftOfMainRoomBridge,
        Location::EarthTempleChestBehindBombableRock,
        Location::EarthTempleChestInWestRoom,
        Location::EarthTempleLeddsGift,
        Location::EarthTempleBossKeyChest,
        Location::EarthTempleVentChest,
        Location::EarthTempleScalderaHeartContainer,
        Location::EarthTempleAmberTablet,
        Location::EldinSilentRealmFireshieldEarrings,
        Location::EldinVolcanoChestBehindBombableWallInFirstRoom,
        Location::EldinVolcanoDiggingSpotBehindBoulderOnSandySlope,
        Location::EldinVolcanoDiggingSpotBelowTower,
        Location::EldinVolcanoDiggingSpotInFrontOfEarthTemple,
        Location::EldinVolcanoGossipStoneNextToEarthTemple,
        Location::EldinVolcanoDiggingSpotAfterDrainingLava,
        Location::EldinVolcanoChestAfterCrawlspace,
        Location::EldinVolcanoChestBehindBombableWallNearCliff,
        Location::EldinVolcanoItemOnCliff,
        Location::EldinVolcanoDiggingSpotAfterVents,
        Location::EldinVolcanoChestBehindBombableWallNearVolcanoAscent,
        Location::EldinVolcanoGossipStoneInThrillDiggerCave,
        Location::FaronSilentRealmWaterScale,
        Location::FaronWoodsDeepWoodsChest,
        Location::FaronWoodsChestBehindBombableRocksNearErla,
        Location::FaronWoodsItemBehindBombableRock,
        Location::FaronWoodsItemOnTree,
        Location::FaronWoodsSlingshot,
        Location::FaronWoodsChestInsideGreatTree,
        Location::FireSanctuaryChestInFirstRoom,
        Location::FireSanctuaryPlatsChest,
        Location::FireSanctuaryBossKeyChest,
        Location::FireSanctuaryChestInStaircaseRoom,
        Location::FireSanctuaryMogmaMitts,
        Location::FireSanctuaryChestInSecondRoom,
        Location::FireSanctuaryChestOnBalcony,
        Location::FireSanctuaryChestAfterBombableWall,
        Location::FireSanctuaryChestAfterSecondTrappedMogma,
        Location::FireSanctuaryChestNearFirstTrappedMogma,
        Location::FireSanctuaryFirstChestInWaterFruitRoom,
        Location::FireSanctuarySecondChestInWaterFruitRoom,
        Location::FireSanctuaryGhirahimHeartContainer,
        Location::FireSanctuaryDinsFlame,
        Location::KnightAcademyChestInGoddessStatue,
        Location::KnightAcademyCawlinsLetter,
        Location::KnightAcademyCrystalInKnightAcademyPlant,
        Location::KnightAcademyCrystalInLinksRoom,
        Location::KnightAcademyCrystalInZeldasRoom,
        Location::KnightAcademyFledgesCrystals,
        Location::KnightAcademyFledgesGift,
        Location::KnightAcademyGhostPipitsCrystals,
        Location::KnightAcademyInZeldasCloset,
        Location::KnightAcademyOwlansCrystals,
        Location::KnightAcademyChestNearGoddessStatue,
        Location::KnightAcademyOwlansGift,
        Location::KnightAcademyPumpkinArchery600Points,
        Location::KnightAcademyCrystalInSparringHall,
        Location::KnightAcademySparringHallChest,
        Location::LakeFloriaDragonLairEastChest,
        Location::LakeFloriaDragonLairSouthChest,
        Location::LakeFloriaLakeFloriaChest,
        Location::LanayruCavesChest,
        Location::LanayruCavesGolosGift,
        Location::LanayruCavesGossipStoneInCenter,
        Location::LanayruDesertFireNodeLeftEndingChest,
        Location::LanayruDesertFireNodeRightEndingChest,
        Location::LanayruDesertFireNodeFirstSmallChest,
        Location::LanayruDesertFireNodeSecondSmallChest,
        Location::LanayruDesertFireNodeShortcutChest,
        Location::LanayruDesertChestNearHookBeetleFight,
        Location::LanayruDesertChestNearPartyWheel,
        Location::LanayruDesertHookBeetleFight,
        Location::LanayruDesertChestOnPlatformNearFireNode,
        Location::LanayruDesertChestOnPlatformNearLightningNode,
        Location::LanayruDesertChestOnTopOfLanayruMiningFacility,
        Location::LanayruDesertSecretPassagewayChest,
        Location::LanayruDesertChestNearSandOasis,
        Location::LanayruDesertLightningNodeFirstChest,
        Location::LanayruDesertLightningNodeRaisedChestNearGenerator,
        Location::LanayruDesertLightningNodeSecondChest,
        Location::LanayruDesertGossipStoneInTempleOfTimeArea,
        Location::LanayruMinesChestAtTheEndOfMines,
        Location::LanayruMinesChestBehindFirstLanding,
        Location::LanayruMinesChestBehindStatue,
        Location::LanayruMinesChestNearFirstTimeshiftStone,
        Location::LanayruMiningFacilityChestBehindBars,
        Location::LanayruMiningFacilityChestInKeyLockedRoom,
        Location::LanayruMiningFacilityChestInFirstWestRoom,
        Location::LanayruMiningFacilityChestInsideGustBellowsRoom,
        Location::LanayruMiningFacilityGustBellows,
        Location::LanayruMiningFacilityChestAfterArmosFight,
        Location::LanayruMiningFacilityShortcutChestInMainHub,
        Location::LanayruMiningFacilityBossKeyChest,
        Location::LanayruMiningFacilityFirstChestInHubRoom,
        Location::LanayruMiningFacilityChestBehindFirstCrawlspace,
        Location::LanayruMiningFacilityChestInSpikeMaze,
        Location::LanayruMiningFacilityMolderachHeartContainer,
        Location::LanayruMiningFacilityGoddessHarp,
        Location::LanayruSandSeaPirateStrongholdFirstChest,
        Location::LanayruSandSeaPirateStrongholdSecondChest,
        Location::LanayruSandSeaPirateStrongholdThirdChest,
        Location::LanayruSandSeaGossipStoneInShipyard,
        Location::LanayruSandSeaRicketyCoasterHeartStoppingTrackIn105,
        Location::LanayruSandSeaSkippersRetreatSkydiveChest,
        Location::LanayruSandSeaSkippersRetreatChestOnTopOfCactiPillar,
        Location::LanayruSandSeaSkippersRetreatChestAfterMoblin,
        Location::LanayruSandSeaSkippersRetreatChestInShack,
        Location::LanayruSilentRealmClawshots,
        Location::MogmaTurfChestBehindBombableWallAtEntrance,
        Location::MogmaTurfChestBehindBombableWallInFireMaze,
        Location::MogmaTurfDiggingMittsFight,
        Location::MogmaTurfFreeFallChest,
        Location::MogmaTurfSandSlideChest,
        Location::SandshipBossKeyChest,
        Location::SandshipBow,
        Location::SandshipChestAtTheStern,
        Location::SandshipChestBefore4DoorCorridor,
        Location::SandshipChestBehindCombinationLock,
        Location::SandshipRobotInBrigsReward,
        Location::SandshipTreasureRoomFifthChest,
        Location::SandshipTreasureRoomFirstChest,
        Location::SandshipTreasureRoomFourthChest,
        Location::SandshipTreasureRoomSecondChest,
        Location::SandshipTreasureRoomThirdChest,
        Location::SandshipNayrusFlame,
        Location::SandshipTentalusHeartContainer,
        Location::SealedGroundsGorkosGoddessWallReward,
        Location::SealedGroundsZeldasBlessing,
        Location::SealedGroundsChestInsideSealedTemple,
        Location::SealedGroundsSongFromImpa,
        Location::SkyGossipStoneInsideBambooIsland,
        Location::SkyCrystalInsideLumpyPumpkin,
        Location::SkyLumpyPumpkinChandelier,
        Location::SkyLumpyPumpkinHarpMinigame,
        Location::SkyBeedlesIslandCageGoddessChest,
        Location::SkyBeedlesCrystals,
        Location::SkyCrystalOnBeedlesShip,
        Location::SkyBambooIslandGoddessChest,
        Location::SkyBeedlesIslandGoddessChest,
        Location::SkyChestInBreakableBoulderNearFunFunIsland,
        Location::SkyChestInBreakableBoulderNearLumpyPumpkin,
        Location::SkyDodohsCrystals,
        Location::SkyFunFunIslandMinigame500Rupees,
        Location::SkyGoddessChestInCaveOnIslandNextToBambooIsland,
        Location::SkyGoddessChestInsideVolcanicIsland,
        Location::SkyGoddessChestOnIslandClosestToFaronPillar,
        Location::SkyGoddessChestOnIslandNextToBambooIsland,
        Location::SkyGoddessChestOutsideVolcanicIsland,
        Location::SkyGoddessChestUnderFunFunIsland,
        Location::SkyGossipStoneInVolcanicIsland,
        Location::SkyLumpyPumpkinGoddessChestOnTheRoof,
        Location::SkyNortheastIslandCageGoddessChest,
        Location::SkyNortheastIslandGoddessChestBehindBombableRocks,
        Location::SkyOriellesCrystals,
        Location::SkySouthwestTripleIslandCageGoddessChest,
        Location::SkySouthwestTripleIslandLowerGoddessChest,
        Location::SkySouthwestTripleIslandUpperGoddessChest,
        Location::SkyCrystalOutsideLumpyPumpkin,
        Location::SkyKinasCrystals,
        Location::SkyLumpyPumpkinOutsideGoddessChest,
        Location::SkyKeepChestAfterDreadfuse,
        Location::SkyKeepFirstChest,
        Location::SkyloftSilentRealmStoneOfTrials,
        Location::SkyloftVillageBertiesCrystals,
        Location::SkyloftVillageMallarasCrystals,
        Location::SkyloftVillageCrystalNearPumpkinPatch,
        Location::SkyloftVillageSparrotsCrystals,
        Location::SkyviewGhirahimHeartContainer,
        Location::SkyviewRubyTablet,
        Location::SkyviewBossKeyChest,
        Location::SkyviewChestNearBossDoor,
        Location::SkyviewChestBehindTwoEyes,
        Location::SkyviewChestOnTreeBranch,
        Location::SkyviewDiggingSpotInCrawlspace,
        Location::SkyviewBeetle,
        Location::SkyviewChestBehindThreeEyes,
        Location::SkyviewItemBehindBars,
        Location::ThunderheadBugHeaven10BugsIn3Minutes,
        Location::ThunderheadBugHeavenGoddessChest,
        Location::ThunderheadEastIslandChest,
        Location::ThunderheadEastIslandGoddessChest,
        Location::ThunderheadFirstGoddessChestOnMogmaMittsIsland,
        Location::ThunderheadGoddessChestOnTopOfIsleOfSongs,
        Location::ThunderheadGoddessChestOutsideIsleOfSongs,
        Location::ThunderheadSongFromLevias,
        Location::ThunderheadIsleOfSongsDinsPower,
        Location::ThunderheadIsleOfSongsFaroresCourage,
        Location::ThunderheadIsleOfSongsNayrusWisdom,
        Location::VolcanoSummitBokoBasePouchChest,
        Location::VolcanoSummitSmallChestInVolcanoSummit,
        Location::VolcanoSummitGossipStoneOutsideFireSanctuary,
        Location::VolcanoSummitItemBehindDigging,
        Location::VolcanoSummitChestBehindBombableWallInWaterfallArea,
        Location::VolcanoSummitGossipStoneInWaterfallArea,
    ];
}
impl Location {
    pub fn get(&self) -> &'static LocationDef {
        match self {
            Location::AncientCisternChestAfterWhipHooks => &LocationDef {
                name: "Chest after Whip Hooks",
                area: Area::AncientCistern_AfterWhipHooks,
                display_name: "Ancient Cistern - Chest after Whip Hooks",
                kind: LocationKind::Check {
                    vanilla_item: Item::AncientCisternMap,
                },
            },
            Location::AncientCisternBokoblin => &LocationDef {
                name: "Bokoblin",
                area: Area::AncientCistern_BeforeBokoKeyDoor,
                display_name: "Ancient Cistern - Bokoblin",
                kind: LocationKind::Check {
                    vanilla_item: Item::AncientCisternSmallKey,
                },
            },
            Location::AncientCisternChestBehindTheWaterfall => &LocationDef {
                name: "Chest behind the Waterfall",
                area: Area::AncientCistern_BehindWaterfall,
                display_name: "Ancient Cistern - Chest behind the Waterfall",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::AncientCisternBossKeyChest => &LocationDef {
                name: "Boss Key Chest",
                area: Area::AncientCistern_BossKeyChestArea,
                display_name: "Ancient Cistern - Boss Key Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::AncientCisternBossKey,
                },
            },
            Location::AncientCisternChestInEastPart => &LocationDef {
                name: "Chest in East Part",
                area: Area::AncientCistern_MainHub,
                display_name: "Ancient Cistern - Chest in East Part",
                kind: LocationKind::Check {
                    vanilla_item: Item::AncientCisternSmallKey,
                },
            },
            Location::AncientCisternChestNearVines => &LocationDef {
                name: "Chest near Vines",
                area: Area::AncientCistern_MainRoomVines,
                display_name: "Ancient Cistern - Chest near Vines",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::AncientCisternWhip => &LocationDef {
                name: "Whip",
                area: Area::AncientCistern_WhipChestRoom,
                display_name: "Ancient Cistern - Whip",
                kind: LocationKind::Check {
                    vanilla_item: Item::Whip,
                },
            },
            Location::AncientCisternKoloktosHeartContainer => &LocationDef {
                name: "Koloktos Heart Container",
                area: Area::AncientCisternBoss_Main,
                display_name: "Ancient Cistern - Koloktos Heart Container",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartContainer,
                },
            },
            Location::AncientCisternFaroresFlame => &LocationDef {
                name: "Farore's Flame",
                area: Area::AncientCisternCandleRoom_Main,
                display_name: "Ancient Cistern - Farore's Flame",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSword,
                },
            },
            Location::Batreaux10Crystals => &LocationDef {
                name: "10 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 10 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::Batreaux30Crystals => &LocationDef {
                name: "30 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 30 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveWallet,
                },
            },
            Location::Batreaux30CrystalsChest => &LocationDef {
                name: "30 Crystals Chest",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 30 Crystals Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::CursedMedal,
                },
            },
            Location::Batreaux40Crystals => &LocationDef {
                name: "40 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 40 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::Batreaux5Crystals => &LocationDef {
                name: "5 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 5 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveWallet,
                },
            },
            Location::Batreaux50Crystals => &LocationDef {
                name: "50 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 50 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveWallet,
                },
            },
            Location::Batreaux70Crystals => &LocationDef {
                name: "70 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 70 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::Batreaux70CrystalsSecondReward => &LocationDef {
                name: "70 Crystals Second Reward",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 70 Crystals Second Reward",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::Batreaux80Crystals => &LocationDef {
                name: "80 Crystals",
                area: Area::BatreauxHouse_Main,
                display_name: "Batreaux - 80 Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveWallet,
                },
            },
            Location::Beedle1000RupeeItem => &LocationDef {
                name: "1000 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 1000 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::BugMedal,
                },
            },
            Location::Beedle1200RupeeItem => &LocationDef {
                name: "1200 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 1200 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressivePouch,
                },
            },
            Location::Beedle1600RupeeItem => &LocationDef {
                name: "1600 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 1600 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::Beedle300RupeeItem => &LocationDef {
                name: "300 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 300 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressivePouch,
                },
            },
            Location::Beedle50RupeeItem => &LocationDef {
                name: "50 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 50 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveBugNet,
                },
            },
            Location::Beedle600RupeeItem => &LocationDef {
                name: "600 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 600 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressivePouch,
                },
            },
            Location::Beedle800RupeeItem => &LocationDef {
                name: "800 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - 800 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::LifeMedal,
                },
            },
            Location::BeedleFirst100RupeeItem => &LocationDef {
                name: "First 100 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - First 100 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ExtraWallet,
                },
            },
            Location::BeedleSecond100RupeeItem => &LocationDef {
                name: "Second 100 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - Second 100 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ExtraWallet,
                },
            },
            Location::BeedleThird100RupeeItem => &LocationDef {
                name: "Third 100 Rupee Item",
                area: Area::BeedlesShop_Main,
                display_name: "Beedle - Third 100 Rupee Item",
                kind: LocationKind::Check {
                    vanilla_item: Item::ExtraWallet,
                },
            },
            Location::CentralSkyloftBazaarGoddessChest => &LocationDef {
                name: "Bazaar Goddess Chest",
                area: Area::Bazaar_Main,
                display_name: "Central Skyloft - Bazaar Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::CentralSkyloftPotionLadysGift => &LocationDef {
                name: "Potion Lady's Gift",
                area: Area::Bazaar_Main,
                display_name: "Central Skyloft - Potion Lady's Gift",
                kind: LocationKind::Check {
                    vanilla_item: Item::EmptyBottle,
                },
            },
            Location::CentralSkyloftCrystalInOrielleAndParrowsHouse => &LocationDef {
                name: "Crystal in Orielle and Parrow's House",
                area: Area::ParrowAndOriellesHouse_Main,
                display_name: "Central Skyloft - Crystal in Orielle and Parrow's House",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftPeaterPeatricesCrystals => &LocationDef {
                name: "Peater/Peatrice's Crystals",
                area: Area::PeatricesHouse_Main,
                display_name: "Central Skyloft - Peater/Peatrice's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::CentralSkyloftCrystalBetweenWoodenPlanks => &LocationDef {
                name: "Crystal between Wooden Planks",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Crystal between Wooden Planks",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftCrystalOnLightTower => &LocationDef {
                name: "Crystal on Light Tower",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Crystal on Light Tower",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftCrystalOnWaterfallIsland => &LocationDef {
                name: "Crystal on Waterfall Island",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Crystal on Waterfall Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftCrystalOnWestCliff => &LocationDef {
                name: "Crystal on West Cliff",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Crystal on West Cliff",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftFloatingIslandGoddessChest => &LocationDef {
                name: "Floating Island Goddess Chest",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Floating Island Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::CentralSkyloftFloatingIslandGossipStone => &LocationDef {
                name: "Floating Island Gossip Stone",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Floating Island Gossip Stone",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::CentralSkyloftItemInBirdNest => &LocationDef {
                name: "Item in Bird Nest",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Item in Bird Nest",
                kind: LocationKind::Check {
                    vanilla_item: Item::BabyRattle,
                },
            },
            Location::CentralSkyloftParrowsCrystals => &LocationDef {
                name: "Parrow's Crystals",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Parrow's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::CentralSkyloftParrowsGift => &LocationDef {
                name: "Parrow's Gift",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Parrow's Gift",
                kind: LocationKind::Check {
                    vanilla_item: Item::EmptyBottle,
                },
            },
            Location::CentralSkyloftShedChest => &LocationDef {
                name: "Shed Chest",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Shed Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::CentralSkyloftShedGoddessChest => &LocationDef {
                name: "Shed Goddess Chest",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Shed Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::CentralSkyloftWaterfallGoddessChest => &LocationDef {
                name: "Waterfall Goddess Chest",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - Waterfall Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::CentralSkyloftWestCliffGoddessChest => &LocationDef {
                name: "West Cliff Goddess Chest",
                area: Area::Skyloft_CentralOutside,
                display_name: "Central Skyloft - West Cliff Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::CentralSkyloftCrystalAfterWaterfallCave => &LocationDef {
                name: "Crystal after Waterfall Cave",
                area: Area::Skyloft_WaterfallCaveCrystals,
                display_name: "Central Skyloft - Crystal after Waterfall Cave",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftCrystalInLoftwingPrison => &LocationDef {
                name: "Crystal in Loftwing Prison",
                area: Area::Skyloft_WaterfallCaveCrystals,
                display_name: "Central Skyloft - Crystal in Loftwing Prison",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::CentralSkyloftWaterfallCaveFirstChest => &LocationDef {
                name: "Waterfall Cave First Chest",
                area: Area::WaterfallCave_Main,
                display_name: "Central Skyloft - Waterfall Cave First Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::CentralSkyloftWaterfallCaveSecondChest => &LocationDef {
                name: "Waterfall Cave Second Chest",
                area: Area::WaterfallCave_Main,
                display_name: "Central Skyloft - Waterfall Cave Second Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::CentralSkyloftWrynasCrystals => &LocationDef {
                name: "Wryna's Crystals",
                area: Area::WrynasHouse_Main,
                display_name: "Central Skyloft - Wryna's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::EarthTempleChestGuardedByLizalfos => &LocationDef {
                name: "Chest Guarded by Lizalfos",
                area: Area::EarthTemple_AfterBallRolling,
                display_name: "Earth Temple - Chest Guarded by Lizalfos",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::EarthTempleBombBag => &LocationDef {
                name: "Bomb Bag",
                area: Area::EarthTemple_BallRolling,
                display_name: "Earth Temple - Bomb Bag",
                kind: LocationKind::Check {
                    vanilla_item: Item::BombBag,
                },
            },
            Location::EarthTempleChestLeftOfMainRoomBridge => &LocationDef {
                name: "Chest Left of Main Room Bridge",
                area: Area::EarthTemple_BallRolling,
                display_name: "Earth Temple - Chest Left of Main Room Bridge",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::EarthTempleChestBehindBombableRock => &LocationDef {
                name: "Chest behind Bombable Rock",
                area: Area::EarthTemple_BallRolling,
                display_name: "Earth Temple - Chest behind Bombable Rock",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::EarthTempleChestInWestRoom => &LocationDef {
                name: "Chest in West Room",
                area: Area::EarthTemple_BallRolling,
                display_name: "Earth Temple - Chest in West Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::EarthTempleMap,
                },
            },
            Location::EarthTempleLeddsGift => &LocationDef {
                name: "Ledd's Gift",
                area: Area::EarthTemple_BallRolling,
                display_name: "Earth Temple - Ledd's Gift",
                kind: LocationKind::Check {
                    vanilla_item: Item::X5Bombs,
                },
            },
            Location::EarthTempleBossKeyChest => &LocationDef {
                name: "Boss Key Chest",
                area: Area::EarthTemple_BossDoorArea,
                display_name: "Earth Temple - Boss Key Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::EarthTempleBossKey,
                },
            },
            Location::EarthTempleVentChest => &LocationDef {
                name: "Vent Chest",
                area: Area::EarthTemple_Entrance,
                display_name: "Earth Temple - Vent Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::EarthTempleScalderaHeartContainer => &LocationDef {
                name: "Scaldera Heart Container",
                area: Area::EarthTempleBoss_Main,
                display_name: "Earth Temple - Scaldera Heart Container",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartContainer,
                },
            },
            Location::EarthTempleAmberTablet => &LocationDef {
                name: "Amber Tablet",
                area: Area::EarthTempleSpring_Main,
                display_name: "Earth Temple - Amber Tablet",
                kind: LocationKind::Check {
                    vanilla_item: Item::AmberTablet,
                },
            },
            Location::EldinSilentRealmFireshieldEarrings => &LocationDef {
                name: "Fireshield Earrings",
                area: Area::EldinSilentRealm_Trial,
                display_name: "Eldin Silent Realm - Fireshield Earrings",
                kind: LocationKind::Check {
                    vanilla_item: Item::FireshieldEarrings,
                },
            },
            Location::EldinVolcanoChestBehindBombableWallInFirstRoom => &LocationDef {
                name: "Chest behind Bombable Wall in First Room",
                area: Area::EldinVolcano_FirstRoom,
                display_name: "Eldin Volcano - Chest behind Bombable Wall in First Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::EldinVolcanoDiggingSpotBehindBoulderOnSandySlope => &LocationDef {
                name: "Digging Spot behind Boulder on Sandy Slope",
                area: Area::EldinVolcano_OutsideEt,
                display_name: "Eldin Volcano - Digging Spot behind Boulder on Sandy Slope",
                kind: LocationKind::Check {
                    vanilla_item: Item::KeyPiece,
                },
            },
            Location::EldinVolcanoDiggingSpotBelowTower => &LocationDef {
                name: "Digging Spot below Tower",
                area: Area::EldinVolcano_OutsideEt,
                display_name: "Eldin Volcano - Digging Spot below Tower",
                kind: LocationKind::Check {
                    vanilla_item: Item::KeyPiece,
                },
            },
            Location::EldinVolcanoDiggingSpotInFrontOfEarthTemple => &LocationDef {
                name: "Digging Spot in front of Earth Temple",
                area: Area::EldinVolcano_OutsideEt,
                display_name: "Eldin Volcano - Digging Spot in front of Earth Temple",
                kind: LocationKind::Check {
                    vanilla_item: Item::KeyPiece,
                },
            },
            Location::EldinVolcanoGossipStoneNextToEarthTemple => &LocationDef {
                name: "Gossip Stone next to Earth Temple",
                area: Area::EldinVolcano_OutsideEt,
                display_name: "Eldin Volcano - Gossip Stone next to Earth Temple",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::EldinVolcanoDiggingSpotAfterDrainingLava => &LocationDef {
                name: "Digging Spot after Draining Lava",
                area: Area::EldinVolcano_PastSlide,
                display_name: "Eldin Volcano - Digging Spot after Draining Lava",
                kind: LocationKind::Check {
                    vanilla_item: Item::KeyPiece,
                },
            },
            Location::EldinVolcanoChestAfterCrawlspace => &LocationDef {
                name: "Chest after Crawlspace",
                area: Area::EldinVolcano_PreMogmaTurf,
                display_name: "Eldin Volcano - Chest after Crawlspace",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::EldinVolcanoChestBehindBombableWallNearCliff => &LocationDef {
                name: "Chest behind Bombable Wall near Cliff",
                area: Area::EldinVolcano_PreMogmaTurf,
                display_name: "Eldin Volcano - Chest behind Bombable Wall near Cliff",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::EldinVolcanoItemOnCliff => &LocationDef {
                name: "Item on Cliff",
                area: Area::EldinVolcano_PreMogmaTurf,
                display_name: "Eldin Volcano - Item on Cliff",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::EldinVolcanoDiggingSpotAfterVents => &LocationDef {
                name: "Digging Spot after Vents",
                area: Area::EldinVolcano_SandSlide,
                display_name: "Eldin Volcano - Digging Spot after Vents",
                kind: LocationKind::Check {
                    vanilla_item: Item::KeyPiece,
                },
            },
            Location::EldinVolcanoChestBehindBombableWallNearVolcanoAscent => &LocationDef {
                name: "Chest behind Bombable Wall near Volcano Ascent",
                area: Area::EldinVolcano_VolcanoAscent,
                display_name: "Eldin Volcano - Chest behind Bombable Wall near Volcano Ascent",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::EldinVolcanoGossipStoneInThrillDiggerCave => &LocationDef {
                name: "Gossip Stone in Thrill Digger Cave",
                area: Area::ThrillDiggerCave_Main,
                display_name: "Eldin Volcano - Gossip Stone in Thrill Digger Cave",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::FaronSilentRealmWaterScale => &LocationDef {
                name: "Water Scale",
                area: Area::FaronSilentRealm_Trial,
                display_name: "Faron Silent Realm - Water Scale",
                kind: LocationKind::Check {
                    vanilla_item: Item::WaterScale,
                },
            },
            Location::FaronWoodsDeepWoodsChest => &LocationDef {
                name: "Deep Woods Chest",
                area: Area::DeepWoods_PastBeehive,
                display_name: "Faron Woods - Deep Woods Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::FaronWoodsChestBehindBombableRocksNearErla => &LocationDef {
                name: "Chest behind Bombable Rocks near Erla",
                area: Area::FaronWoods_Main,
                display_name: "Faron Woods - Chest behind Bombable Rocks near Erla",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::FaronWoodsItemBehindBombableRock => &LocationDef {
                name: "Item behind Bombable Rock",
                area: Area::FaronWoods_Main,
                display_name: "Faron Woods - Item behind Bombable Rock",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::FaronWoodsItemOnTree => &LocationDef {
                name: "Item on Tree",
                area: Area::FaronWoods_Main,
                display_name: "Faron Woods - Item on Tree",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::FaronWoodsSlingshot => &LocationDef {
                name: "Slingshot",
                area: Area::FaronWoods_Main,
                display_name: "Faron Woods - Slingshot",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSlingshot,
                },
            },
            Location::FaronWoodsChestInsideGreatTree => &LocationDef {
                name: "Chest inside Great Tree",
                area: Area::GreatTree_Middle,
                display_name: "Faron Woods - Chest inside Great Tree",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::FireSanctuaryChestInFirstRoom => &LocationDef {
                name: "Chest in First Room",
                area: Area::FireSanctuaryA_PastFirstWaterPlant,
                display_name: "Fire Sanctuary - Chest in First Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::FireSanctuarySmallKey,
                },
            },
            Location::FireSanctuaryPlatsChest => &LocationDef {
                name: "Plats' Chest",
                area: Area::FireSanctuaryA_PrePlatsArea,
                display_name: "Fire Sanctuary - Plats' Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::FireSanctuaryBossKeyChest => &LocationDef {
                name: "Boss Key Chest",
                area: Area::FireSanctuaryA_UpperStaircaseRoom,
                display_name: "Fire Sanctuary - Boss Key Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::FireSanctuaryBossKey,
                },
            },
            Location::FireSanctuaryChestInStaircaseRoom => &LocationDef {
                name: "Chest in Staircase Room",
                area: Area::FireSanctuaryA_UpperStaircaseRoom,
                display_name: "Fire Sanctuary - Chest in Staircase Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::FireSanctuaryMogmaMitts => &LocationDef {
                name: "Mogma Mitts",
                area: Area::FireSanctuaryB_AfterDoubleMagmanosFight,
                display_name: "Fire Sanctuary - Mogma Mitts",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveMitts,
                },
            },
            Location::FireSanctuaryChestInSecondRoom => &LocationDef {
                name: "Chest in Second Room",
                area: Area::FireSanctuaryB_FirstOutsideSection,
                display_name: "Fire Sanctuary - Chest in Second Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::FireSanctuaryChestOnBalcony => &LocationDef {
                name: "Chest on Balcony",
                area: Area::FireSanctuaryB_FirstOutsideSection,
                display_name: "Fire Sanctuary - Chest on Balcony",
                kind: LocationKind::Check {
                    vanilla_item: Item::EmptyBottle,
                },
            },
            Location::FireSanctuaryChestAfterBombableWall => &LocationDef {
                name: "Chest after Bombable Wall",
                area: Area::FireSanctuaryB_LastTrappedMogmaArea,
                display_name: "Fire Sanctuary - Chest after Bombable Wall",
                kind: LocationKind::Check {
                    vanilla_item: Item::FireSanctuarySmallKey,
                },
            },
            Location::FireSanctuaryChestAfterSecondTrappedMogma => &LocationDef {
                name: "Chest after Second Trapped Mogma",
                area: Area::FireSanctuaryB_LastTrappedMogmaArea,
                display_name: "Fire Sanctuary - Chest after Second Trapped Mogma",
                kind: LocationKind::Check {
                    vanilla_item: Item::FireSanctuaryMap,
                },
            },
            Location::FireSanctuaryChestNearFirstTrappedMogma => &LocationDef {
                name: "Chest near First Trapped Mogma",
                area: Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
                display_name: "Fire Sanctuary - Chest near First Trapped Mogma",
                kind: LocationKind::Check {
                    vanilla_item: Item::FireSanctuarySmallKey,
                },
            },
            Location::FireSanctuaryFirstChestInWaterFruitRoom => &LocationDef {
                name: "First Chest in Water Fruit Room",
                area: Area::FireSanctuaryB_WaterFruitRoom,
                display_name: "Fire Sanctuary - First Chest in Water Fruit Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::FireSanctuarySecondChestInWaterFruitRoom => &LocationDef {
                name: "Second Chest in Water Fruit Room",
                area: Area::FireSanctuaryB_WaterFruitRoom,
                display_name: "Fire Sanctuary - Second Chest in Water Fruit Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::FireSanctuaryGhirahimHeartContainer => &LocationDef {
                name: "Ghirahim Heart Container",
                area: Area::FireSanctuaryBoss_Main,
                display_name: "Fire Sanctuary - Ghirahim Heart Container",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartContainer,
                },
            },
            Location::FireSanctuaryDinsFlame => &LocationDef {
                name: "Din's Flame",
                area: Area::FireSanctuaryFlameRoom_Main,
                display_name: "Fire Sanctuary - Din's Flame",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSword,
                },
            },
            Location::KnightAcademyChestInGoddessStatue => &LocationDef {
                name: "Chest in Goddess Statue",
                area: Area::InsideGoddessStatue_Main,
                display_name: "Knight Academy - Chest in Goddess Statue",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSword,
                },
            },
            Location::KnightAcademyCawlinsLetter => &LocationDef {
                name: "Cawlin's Letter",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Cawlin's Letter",
                kind: LocationKind::Check {
                    vanilla_item: Item::CawlinsLetter,
                },
            },
            Location::KnightAcademyCrystalInKnightAcademyPlant => &LocationDef {
                name: "Crystal in Knight Academy Plant",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Crystal in Knight Academy Plant",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::KnightAcademyCrystalInLinksRoom => &LocationDef {
                name: "Crystal in Link's Room",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Crystal in Link's Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::KnightAcademyCrystalInZeldasRoom => &LocationDef {
                name: "Crystal in Zelda's Room",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Crystal in Zelda's Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::KnightAcademyFledgesCrystals => &LocationDef {
                name: "Fledge's Crystals",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Fledge's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::KnightAcademyFledgesGift => &LocationDef {
                name: "Fledge's Gift",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Fledge's Gift",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressivePouch,
                },
            },
            Location::KnightAcademyGhostPipitsCrystals => &LocationDef {
                name: "Ghost/Pipit's Crystals",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Ghost/Pipit's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::KnightAcademyInZeldasCloset => &LocationDef {
                name: "In Zelda's Closet",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - In Zelda's Closet",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::KnightAcademyOwlansCrystals => &LocationDef {
                name: "Owlan's Crystals",
                area: Area::KnightAcademy_Main,
                display_name: "Knight Academy - Owlan's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::KnightAcademyChestNearGoddessStatue => &LocationDef {
                name: "Chest near Goddess Statue",
                area: Area::Skyloft_OutsideGoddessStatue,
                display_name: "Knight Academy - Chest near Goddess Statue",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::KnightAcademyOwlansGift => &LocationDef {
                name: "Owlan's Gift",
                area: Area::Skyloft_OutsideGoddessStatue,
                display_name: "Knight Academy - Owlan's Gift",
                kind: LocationKind::Check {
                    vanilla_item: Item::WoodenShield,
                },
            },
            Location::KnightAcademyPumpkinArchery600Points => &LocationDef {
                name: "Pumpkin Archery - 600 Points",
                area: Area::Skyloft_OutsideGoddessStatue,
                display_name: "Knight Academy - Pumpkin Archery - 600 Points",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::KnightAcademyCrystalInSparringHall => &LocationDef {
                name: "Crystal in Sparring Hall",
                area: Area::SparringHall_Main,
                display_name: "Knight Academy - Crystal in Sparring Hall",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::KnightAcademySparringHallChest => &LocationDef {
                name: "Sparring Hall Chest",
                area: Area::SparringHall_Main,
                display_name: "Knight Academy - Sparring Hall Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSword,
                },
            },
            Location::LakeFloriaDragonLairEastChest => &LocationDef {
                name: "Dragon Lair East Chest",
                area: Area::FaroresLair_Main,
                display_name: "Lake Floria - Dragon Lair East Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::LakeFloriaDragonLairSouthChest => &LocationDef {
                name: "Dragon Lair South Chest",
                area: Area::FaroresLair_Main,
                display_name: "Lake Floria - Dragon Lair South Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::LakeFloriaLakeFloriaChest => &LocationDef {
                name: "Lake Floria Chest",
                area: Area::LakeFloria_StatueSpot,
                display_name: "Lake Floria - Lake Floria Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoddessPlume,
                },
            },
            Location::LanayruCavesChest => &LocationDef {
                name: "Chest",
                area: Area::LanayruCaves_Main,
                display_name: "Lanayru Caves - Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::LanayruCavesGolosGift => &LocationDef {
                name: "Golo's Gift",
                area: Area::LanayruCaves_Main,
                display_name: "Lanayru Caves - Golo's Gift",
                kind: LocationKind::Check {
                    vanilla_item: Item::LanayruCavesSmallKey,
                },
            },
            Location::LanayruCavesGossipStoneInCenter => &LocationDef {
                name: "Gossip Stone in Center",
                area: Area::LanayruCaves_Main,
                display_name: "Lanayru Caves - Gossip Stone in Center",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::LanayruDesertFireNodeLeftEndingChest => &LocationDef {
                name: "Fire Node - Left Ending Chest",
                area: Area::FireNode_End,
                display_name: "Lanayru Desert - Fire Node - Left Ending Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::LanayruDesertFireNodeRightEndingChest => &LocationDef {
                name: "Fire Node - Right Ending Chest",
                area: Area::FireNode_End,
                display_name: "Lanayru Desert - Fire Node - Right Ending Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::BlueRupee,
                },
            },
            Location::LanayruDesertFireNodeFirstSmallChest => &LocationDef {
                name: "Fire Node - First Small Chest",
                area: Area::FireNode_Main,
                display_name: "Lanayru Desert - Fire Node - First Small Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::BlueRupee,
                },
            },
            Location::LanayruDesertFireNodeSecondSmallChest => &LocationDef {
                name: "Fire Node - Second Small Chest",
                area: Area::FireNode_Main,
                display_name: "Lanayru Desert - Fire Node - Second Small Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::BlueRupee,
                },
            },
            Location::LanayruDesertFireNodeShortcutChest => &LocationDef {
                name: "Fire Node - Shortcut Chest",
                area: Area::FireNode_Main,
                display_name: "Lanayru Desert - Fire Node - Shortcut Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RareTreasure,
                },
            },
            Location::LanayruDesertChestNearHookBeetleFight => &LocationDef {
                name: "Chest near Hook Beetle Fight",
                area: Area::LanayruDesert_HookBeetleArea,
                display_name: "Lanayru Desert - Chest near Hook Beetle Fight",
                kind: LocationKind::Check {
                    vanilla_item: Item::Tumbleweed,
                },
            },
            Location::LanayruDesertChestNearPartyWheel => &LocationDef {
                name: "Chest near Party Wheel",
                area: Area::LanayruDesert_HookBeetleArea,
                display_name: "Lanayru Desert - Chest near Party Wheel",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::LanayruDesertHookBeetleFight => &LocationDef {
                name: "Hook Beetle Fight",
                area: Area::LanayruDesert_HookBeetleArea,
                display_name: "Lanayru Desert - Hook Beetle Fight",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveBeetle,
                },
            },
            Location::LanayruDesertChestOnPlatformNearFireNode => &LocationDef {
                name: "Chest on Platform near Fire Node",
                area: Area::LanayruDesert_PastToT,
                display_name: "Lanayru Desert - Chest on Platform near Fire Node",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruDesertChestOnPlatformNearLightningNode => &LocationDef {
                name: "Chest on Platform near Lightning Node",
                area: Area::LanayruDesert_PastToT,
                display_name: "Lanayru Desert - Chest on Platform near Lightning Node",
                kind: LocationKind::Check {
                    vanilla_item: Item::DuskRelic,
                },
            },
            Location::LanayruDesertChestOnTopOfLanayruMiningFacility => &LocationDef {
                name: "Chest on top of Lanayru Mining Facility",
                area: Area::LanayruDesert_PastToT,
                display_name: "Lanayru Desert - Chest on top of Lanayru Mining Facility",
                kind: LocationKind::Check {
                    vanilla_item: Item::RareTreasure,
                },
            },
            Location::LanayruDesertSecretPassagewayChest => &LocationDef {
                name: "Secret Passageway Chest",
                area: Area::LanayruDesert_PastToT,
                display_name: "Lanayru Desert - Secret Passageway Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::LanayruDesertChestNearSandOasis => &LocationDef {
                name: "Chest near Sand Oasis",
                area: Area::LanayruDesert_SandOasis,
                display_name: "Lanayru Desert - Chest near Sand Oasis",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruDesertLightningNodeFirstChest => &LocationDef {
                name: "Lightning Node - First Chest",
                area: Area::LightningNode_Main,
                display_name: "Lanayru Desert - Lightning Node - First Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruDesertLightningNodeRaisedChestNearGenerator => &LocationDef {
                name: "Lightning Node - Raised Chest near Generator",
                area: Area::LightningNode_Main,
                display_name: "Lanayru Desert - Lightning Node - Raised Chest near Generator",
                kind: LocationKind::Check {
                    vanilla_item: Item::RareTreasure,
                },
            },
            Location::LanayruDesertLightningNodeSecondChest => &LocationDef {
                name: "Lightning Node - Second Chest",
                area: Area::LightningNode_Main,
                display_name: "Lanayru Desert - Lightning Node - Second Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::BlueRupee,
                },
            },
            Location::LanayruDesertGossipStoneInTempleOfTimeArea => &LocationDef {
                name: "Gossip Stone in Temple of Time Area",
                area: Area::TempleOfTime_NearGossipStone,
                display_name: "Lanayru Desert - Gossip Stone in Temple of Time Area",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::LanayruMinesChestAtTheEndOfMines => &LocationDef {
                name: "Chest at the End of Mines",
                area: Area::LanayruMines_FirstHalf,
                display_name: "Lanayru Mines - Chest at the End of Mines",
                kind: LocationKind::Check {
                    vanilla_item: Item::RareTreasure,
                },
            },
            Location::LanayruMinesChestBehindFirstLanding => &LocationDef {
                name: "Chest behind First Landing",
                area: Area::LanayruMines_FirstHalf,
                display_name: "Lanayru Mines - Chest behind First Landing",
                kind: LocationKind::Check {
                    vanilla_item: Item::EvilCrystal,
                },
            },
            Location::LanayruMinesChestBehindStatue => &LocationDef {
                name: "Chest behind Statue",
                area: Area::LanayruMines_FirstHalf,
                display_name: "Lanayru Mines - Chest behind Statue",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruMinesChestNearFirstTimeshiftStone => &LocationDef {
                name: "Chest near First Timeshift Stone",
                area: Area::LanayruMines_FirstHalf,
                display_name: "Lanayru Mines - Chest near First Timeshift Stone",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruMiningFacilityChestBehindBars => &LocationDef {
                name: "Chest behind Bars",
                area: Area::LanayruMiningFacilityA_Entry,
                display_name: "Lanayru Mining Facility - Chest behind Bars",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruMiningFacilityChestInKeyLockedRoom => &LocationDef {
                name: "Chest in Key Locked Room",
                area: Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                display_name: "Lanayru Mining Facility - Chest in Key Locked Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruMiningFacilityChestInFirstWestRoom => &LocationDef {
                name: "Chest in First West Room",
                area: Area::LanayruMiningFacilityA_FirstWestRoom,
                display_name: "Lanayru Mining Facility - Chest in First West Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::LanayruMiningFacilityChestInsideGustBellowsRoom => &LocationDef {
                name: "Chest inside Gust Bellows Room",
                area: Area::LanayruMiningFacilityA_GustBellowsRoom,
                display_name: "Lanayru Mining Facility - Chest inside Gust Bellows Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::LanayruMiningFacilityGustBellows => &LocationDef {
                name: "Gust Bellows",
                area: Area::LanayruMiningFacilityA_GustBellowsRoom,
                display_name: "Lanayru Mining Facility - Gust Bellows",
                kind: LocationKind::Check {
                    vanilla_item: Item::GustBellows,
                },
            },
            Location::LanayruMiningFacilityChestAfterArmosFight => &LocationDef {
                name: "Chest after Armos Fight",
                area: Area::LanayruMiningFacilityA_MapRoom,
                display_name: "Lanayru Mining Facility - Chest after Armos Fight",
                kind: LocationKind::Check {
                    vanilla_item: Item::LanayruMiningFacilityMap,
                },
            },
            Location::LanayruMiningFacilityShortcutChestInMainHub => &LocationDef {
                name: "Shortcut Chest in Main Hub",
                area: Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                display_name: "Lanayru Mining Facility - Shortcut Chest in Main Hub",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruMiningFacilityBossKeyChest => &LocationDef {
                name: "Boss Key Chest",
                area: Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                display_name: "Lanayru Mining Facility - Boss Key Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::LanayruMiningFacilityBossKey,
                },
            },
            Location::LanayruMiningFacilityFirstChestInHubRoom => &LocationDef {
                name: "First Chest in Hub Room",
                area: Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
                display_name: "Lanayru Mining Facility - First Chest in Hub Room",
                kind: LocationKind::Check {
                    vanilla_item: Item::LanayruMiningFacilitySmallKey,
                },
            },
            Location::LanayruMiningFacilityChestBehindFirstCrawlspace => &LocationDef {
                name: "Chest behind First Crawlspace",
                area: Area::LanayruMiningFacilityB_WestHub,
                display_name: "Lanayru Mining Facility - Chest behind First Crawlspace",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::LanayruMiningFacilityChestInSpikeMaze => &LocationDef {
                name: "Chest in Spike Maze",
                area: Area::LanayruMiningFacilityB_WestHub,
                display_name: "Lanayru Mining Facility - Chest in Spike Maze",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruMiningFacilityMolderachHeartContainer => &LocationDef {
                name: "Molderach Heart Container",
                area: Area::LanayruMiningFacilityBoss_Main,
                display_name: "Lanayru Mining Facility - Molderach Heart Container",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartContainer,
                },
            },
            Location::LanayruMiningFacilityGoddessHarp => &LocationDef {
                name: "Goddess Harp",
                area: Area::LanayruMiningFacilityToToT_ToTExit,
                display_name: "Lanayru Mining Facility - Goddess Harp",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoddessHarp,
                },
            },
            Location::LanayruSandSeaPirateStrongholdFirstChest => &LocationDef {
                name: "Pirate Stronghold - First Chest",
                area: Area::InsidePiratesStronghold_Main,
                display_name: "Lanayru Sand Sea - Pirate Stronghold - First Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::LanayruSandSeaPirateStrongholdSecondChest => &LocationDef {
                name: "Pirate Stronghold - Second Chest",
                area: Area::InsidePiratesStronghold_Main,
                display_name: "Lanayru Sand Sea - Pirate Stronghold - Second Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::LanayruSandSeaPirateStrongholdThirdChest => &LocationDef {
                name: "Pirate Stronghold - Third Chest",
                area: Area::InsidePiratesStronghold_Main,
                display_name: "Lanayru Sand Sea - Pirate Stronghold - Third Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::LanayruSandSeaGossipStoneInShipyard => &LocationDef {
                name: "Gossip Stone in Shipyard",
                area: Area::Shipyard_Main,
                display_name: "Lanayru Sand Sea - Gossip Stone in Shipyard",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::LanayruSandSeaRicketyCoasterHeartStoppingTrackIn105 => &LocationDef {
                name: "Rickety Coaster - Heart Stopping Track in 1'05",
                area: Area::Shipyard_Main,
                display_name: "Lanayru Sand Sea - Rickety Coaster - Heart Stopping Track in 1'05",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::LanayruSandSeaSkippersRetreatSkydiveChest => &LocationDef {
                name: "Skipper's Retreat - Skydive Chest",
                area: Area::SkippersRetreat_NextToShack,
                display_name: "Lanayru Sand Sea - Skipper's Retreat - Skydive Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::LanayruSandSeaSkippersRetreatChestOnTopOfCactiPillar => &LocationDef {
                name: "Skipper's Retreat - Chest on top of Cacti Pillar",
                area: Area::SkippersRetreat_PastDekuBaba,
                display_name: "Lanayru Sand Sea - Skipper's Retreat - Chest on top of Cacti Pillar",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::LanayruSandSeaSkippersRetreatChestAfterMoblin => &LocationDef {
                name: "Skipper's Retreat - Chest after Moblin",
                area: Area::SkippersRetreat_PastMoblin,
                display_name: "Lanayru Sand Sea - Skipper's Retreat - Chest after Moblin",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::LanayruSandSeaSkippersRetreatChestInShack => &LocationDef {
                name: "Skipper's Retreat - Chest in Shack",
                area: Area::SkippersShack_Main,
                display_name: "Lanayru Sand Sea - Skipper's Retreat - Chest in Shack",
                kind: LocationKind::Check {
                    vanilla_item: Item::SeaChart,
                },
            },
            Location::LanayruSilentRealmClawshots => &LocationDef {
                name: "Clawshots",
                area: Area::LanayruSilentRealm_Trial,
                display_name: "Lanayru Silent Realm - Clawshots",
                kind: LocationKind::Check {
                    vanilla_item: Item::Clawshots,
                },
            },
            Location::MogmaTurfChestBehindBombableWallAtEntrance => &LocationDef {
                name: "Chest behind Bombable Wall at Entrance",
                area: Area::MogmaTurf_Main,
                display_name: "Mogma Turf - Chest behind Bombable Wall at Entrance",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldenSkull,
                },
            },
            Location::MogmaTurfChestBehindBombableWallInFireMaze => &LocationDef {
                name: "Chest behind Bombable Wall in Fire Maze",
                area: Area::MogmaTurf_Main,
                display_name: "Mogma Turf - Chest behind Bombable Wall in Fire Maze",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::MogmaTurfDiggingMittsFight => &LocationDef {
                name: "Digging Mitts Fight",
                area: Area::MogmaTurf_Main,
                display_name: "Mogma Turf - Digging Mitts Fight",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveMitts,
                },
            },
            Location::MogmaTurfFreeFallChest => &LocationDef {
                name: "Free Fall Chest",
                area: Area::MogmaTurf_Main,
                display_name: "Mogma Turf - Free Fall Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::EldinOre,
                },
            },
            Location::MogmaTurfSandSlideChest => &LocationDef {
                name: "Sand Slide Chest",
                area: Area::MogmaTurf_Main,
                display_name: "Mogma Turf - Sand Slide Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::EldinOre,
                },
            },
            Location::SandshipBossKeyChest => &LocationDef {
                name: "Boss Key Chest",
                area: Area::Sandship_Deck,
                display_name: "Sandship - Boss Key Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SandshipBossKey,
                },
            },
            Location::SandshipBow => &LocationDef {
                name: "Bow",
                area: Area::Sandship_Deck,
                display_name: "Sandship - Bow",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveBow,
                },
            },
            Location::SandshipChestAtTheStern => &LocationDef {
                name: "Chest at the Stern",
                area: Area::Sandship_Deck,
                display_name: "Sandship - Chest at the Stern",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SandshipChestBefore4DoorCorridor => &LocationDef {
                name: "Chest before 4-Door Corridor",
                area: Area::Sandship_Deck,
                display_name: "Sandship - Chest before 4-Door Corridor",
                kind: LocationKind::Check {
                    vanilla_item: Item::SandshipMap,
                },
            },
            Location::SandshipChestBehindCombinationLock => &LocationDef {
                name: "Chest behind Combination Lock",
                area: Area::Sandship_PastSpume,
                display_name: "Sandship - Chest behind Combination Lock",
                kind: LocationKind::Check {
                    vanilla_item: Item::SandshipSmallKey,
                },
            },
            Location::SandshipRobotInBrigsReward => &LocationDef {
                name: "Robot in Brig's Reward",
                area: Area::Sandship_SandshipBrig,
                display_name: "Sandship - Robot in Brig's Reward",
                kind: LocationKind::Check {
                    vanilla_item: Item::SandshipSmallKey,
                },
            },
            Location::SandshipTreasureRoomFifthChest => &LocationDef {
                name: "Treasure Room Fifth Chest",
                area: Area::Sandship_SandshipBrig,
                display_name: "Sandship - Treasure Room Fifth Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::SandshipTreasureRoomFirstChest => &LocationDef {
                name: "Treasure Room First Chest",
                area: Area::Sandship_SandshipBrig,
                display_name: "Sandship - Treasure Room First Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::SandshipTreasureRoomFourthChest => &LocationDef {
                name: "Treasure Room Fourth Chest",
                area: Area::Sandship_SandshipBrig,
                display_name: "Sandship - Treasure Room Fourth Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::SandshipTreasureRoomSecondChest => &LocationDef {
                name: "Treasure Room Second Chest",
                area: Area::Sandship_SandshipBrig,
                display_name: "Sandship - Treasure Room Second Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::SandshipTreasureRoomThirdChest => &LocationDef {
                name: "Treasure Room Third Chest",
                area: Area::Sandship_SandshipBrig,
                display_name: "Sandship - Treasure Room Third Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SemiRareTreasure,
                },
            },
            Location::SandshipNayrusFlame => &LocationDef {
                name: "Nayru's Flame",
                area: Area::SandshipBoss_Main,
                display_name: "Sandship - Nayru's Flame",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSword,
                },
            },
            Location::SandshipTentalusHeartContainer => &LocationDef {
                name: "Tentalus Heart Container",
                area: Area::SandshipBoss_Main,
                display_name: "Sandship - Tentalus Heart Container",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartContainer,
                },
            },
            Location::SealedGroundsGorkosGoddessWallReward => &LocationDef {
                name: "Gorko's Goddess Wall Reward",
                area: Area::BehindTheTemple_Main,
                display_name: "Sealed Grounds - Gorko's Goddess Wall Reward",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SealedGroundsZeldasBlessing => &LocationDef {
                name: "Zelda's Blessing",
                area: Area::HyliasTemple_Main,
                display_name: "Sealed Grounds - Zelda's Blessing",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveSword,
                },
            },
            Location::SealedGroundsChestInsideSealedTemple => &LocationDef {
                name: "Chest inside Sealed Temple",
                area: Area::SealedTemple_Main,
                display_name: "Sealed Grounds - Chest inside Sealed Temple",
                kind: LocationKind::Check {
                    vanilla_item: Item::EmptyBottle,
                },
            },
            Location::SealedGroundsSongFromImpa => &LocationDef {
                name: "Song from Impa",
                area: Area::SealedTemple_Main,
                display_name: "Sealed Grounds - Song from Impa",
                kind: LocationKind::Check {
                    vanilla_item: Item::BalladOfTheGoddess,
                },
            },
            Location::SkyGossipStoneInsideBambooIsland => &LocationDef {
                name: "Gossip Stone inside Bamboo Island",
                area: Area::InsideBambooIsland_Main,
                display_name: "Sky - Gossip Stone inside Bamboo Island",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::SkyCrystalInsideLumpyPumpkin => &LocationDef {
                name: "Crystal inside Lumpy Pumpkin",
                area: Area::LumpyPumpkin_Main,
                display_name: "Sky - Crystal inside Lumpy Pumpkin",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::SkyLumpyPumpkinChandelier => &LocationDef {
                name: "Lumpy Pumpkin - Chandelier",
                area: Area::LumpyPumpkin_Main,
                display_name: "Sky - Lumpy Pumpkin - Chandelier",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SkyLumpyPumpkinHarpMinigame => &LocationDef {
                name: "Lumpy Pumpkin Harp Minigame",
                area: Area::LumpyPumpkin_Main,
                display_name: "Sky - Lumpy Pumpkin Harp Minigame",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SkyBeedlesIslandCageGoddessChest => &LocationDef {
                name: "Beedle's Island Cage Goddess Chest",
                area: Area::Sky_BeedleIslandCage,
                display_name: "Sky - Beedle's Island Cage Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RupeeMedal,
                },
            },
            Location::SkyBeedlesCrystals => &LocationDef {
                name: "Beedle's Crystals",
                area: Area::Sky_BeedlesSkyHome,
                display_name: "Sky - Beedle's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkyCrystalOnBeedlesShip => &LocationDef {
                name: "Crystal on Beedle's Ship",
                area: Area::Sky_BeedlesSkyHome,
                display_name: "Sky - Crystal on Beedle's Ship",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::SkyBambooIslandGoddessChest => &LocationDef {
                name: "Bamboo Island Goddess Chest",
                area: Area::Sky_Field,
                display_name: "Sky - Bamboo Island Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::SkyBeedlesIslandGoddessChest => &LocationDef {
                name: "Beedle's Island Goddess Chest",
                area: Area::Sky_Field,
                display_name: "Sky - Beedle's Island Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SkyChestInBreakableBoulderNearFunFunIsland => &LocationDef {
                name: "Chest in Breakable Boulder near Fun Fun Island",
                area: Area::Sky_Field,
                display_name: "Sky - Chest in Breakable Boulder near Fun Fun Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::SkyChestInBreakableBoulderNearLumpyPumpkin => &LocationDef {
                name: "Chest in Breakable Boulder near Lumpy Pumpkin",
                area: Area::Sky_Field,
                display_name: "Sky - Chest in Breakable Boulder near Lumpy Pumpkin",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::SkyDodohsCrystals => &LocationDef {
                name: "Dodoh's Crystals",
                area: Area::Sky_Field,
                display_name: "Sky - Dodoh's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkyFunFunIslandMinigame500Rupees => &LocationDef {
                name: "Fun Fun Island Minigame - 500 Rupees",
                area: Area::Sky_Field,
                display_name: "Sky - Fun Fun Island Minigame - 500 Rupees",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SkyGoddessChestInCaveOnIslandNextToBambooIsland => &LocationDef {
                name: "Goddess Chest in Cave on Island Next to Bamboo Island",
                area: Area::Sky_Field,
                display_name: "Sky - Goddess Chest in Cave on Island Next to Bamboo Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartMedal,
                },
            },
            Location::SkyGoddessChestInsideVolcanicIsland => &LocationDef {
                name: "Goddess Chest inside Volcanic Island",
                area: Area::Sky_Field,
                display_name: "Sky - Goddess Chest inside Volcanic Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SkyGoddessChestOnIslandClosestToFaronPillar => &LocationDef {
                name: "Goddess Chest on Island Closest to Faron Pillar",
                area: Area::Sky_Field,
                display_name: "Sky - Goddess Chest on Island Closest to Faron Pillar",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::SkyGoddessChestOnIslandNextToBambooIsland => &LocationDef {
                name: "Goddess Chest on Island next to Bamboo Island",
                area: Area::Sky_Field,
                display_name: "Sky - Goddess Chest on Island next to Bamboo Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::SkyGoddessChestOutsideVolcanicIsland => &LocationDef {
                name: "Goddess Chest outside Volcanic Island",
                area: Area::Sky_Field,
                display_name: "Sky - Goddess Chest outside Volcanic Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartMedal,
                },
            },
            Location::SkyGoddessChestUnderFunFunIsland => &LocationDef {
                name: "Goddess Chest under Fun Fun Island",
                area: Area::Sky_Field,
                display_name: "Sky - Goddess Chest under Fun Fun Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::SkyGossipStoneInVolcanicIsland => &LocationDef {
                name: "Gossip Stone in Volcanic Island",
                area: Area::Sky_Field,
                display_name: "Sky - Gossip Stone in Volcanic Island",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::SkyLumpyPumpkinGoddessChestOnTheRoof => &LocationDef {
                name: "Lumpy Pumpkin - Goddess Chest on the Roof",
                area: Area::Sky_Field,
                display_name: "Sky - Lumpy Pumpkin - Goddess Chest on the Roof",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::SkyNortheastIslandCageGoddessChest => &LocationDef {
                name: "Northeast Island Cage Goddess Chest",
                area: Area::Sky_Field,
                display_name: "Sky - Northeast Island Cage Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::TreasureMedal,
                },
            },
            Location::SkyNortheastIslandGoddessChestBehindBombableRocks => &LocationDef {
                name: "Northeast Island Goddess Chest behind Bombable Rocks",
                area: Area::Sky_Field,
                display_name: "Sky - Northeast Island Goddess Chest behind Bombable Rocks",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::SkyOriellesCrystals => &LocationDef {
                name: "Orielle's Crystals",
                area: Area::Sky_Field,
                display_name: "Sky - Orielle's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkySouthwestTripleIslandCageGoddessChest => &LocationDef {
                name: "Southwest Triple Island Cage Goddess Chest",
                area: Area::Sky_Field,
                display_name: "Sky - Southwest Triple Island Cage Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::PotionMedal,
                },
            },
            Location::SkySouthwestTripleIslandLowerGoddessChest => &LocationDef {
                name: "Southwest Triple Island Lower Goddess Chest",
                area: Area::Sky_Field,
                display_name: "Sky - Southwest Triple Island Lower Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::LifeMedal,
                },
            },
            Location::SkySouthwestTripleIslandUpperGoddessChest => &LocationDef {
                name: "Southwest Triple Island Upper Goddess Chest",
                area: Area::Sky_Field,
                display_name: "Sky - Southwest Triple Island Upper Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SmallSeedSatchel,
                },
            },
            Location::SkyCrystalOutsideLumpyPumpkin => &LocationDef {
                name: "Crystal outside Lumpy Pumpkin",
                area: Area::Sky_OutsideLumpyPumpkin,
                display_name: "Sky - Crystal outside Lumpy Pumpkin",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::SkyKinasCrystals => &LocationDef {
                name: "Kina's Crystals",
                area: Area::Sky_OutsideLumpyPumpkin,
                display_name: "Sky - Kina's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkyLumpyPumpkinOutsideGoddessChest => &LocationDef {
                name: "Lumpy Pumpkin - Outside Goddess Chest",
                area: Area::Sky_OutsideLumpyPumpkin,
                display_name: "Sky - Lumpy Pumpkin - Outside Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressivePouch,
                },
            },
            Location::SkyKeepChestAfterDreadfuse => &LocationDef {
                name: "Chest after Dreadfuse",
                area: Area::SkyKeepEntry_Main,
                display_name: "Sky Keep - Chest after Dreadfuse",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyKeepSmallKey,
                },
            },
            Location::SkyKeepFirstChest => &LocationDef {
                name: "First Chest",
                area: Area::SkyKeepEntry_Main,
                display_name: "Sky Keep - First Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyKeepMap,
                },
            },
            Location::SkyloftSilentRealmStoneOfTrials => &LocationDef {
                name: "Stone of Trials",
                area: Area::SkyloftSilentRealm_Trial,
                display_name: "Skyloft Silent Realm - Stone of Trials",
                kind: LocationKind::Check {
                    vanilla_item: Item::StoneOfTrials,
                },
            },
            Location::SkyloftVillageBertiesCrystals => &LocationDef {
                name: "Bertie's Crystals",
                area: Area::BertiesHouse_Main,
                display_name: "Skyloft Village - Bertie's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkyloftVillageMallarasCrystals => &LocationDef {
                name: "Mallara's Crystals",
                area: Area::MallarasHouse_Main,
                display_name: "Skyloft Village - Mallara's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkyloftVillageCrystalNearPumpkinPatch => &LocationDef {
                name: "Crystal near Pumpkin Patch",
                area: Area::Skyloft_OutsideSkyloftVillage,
                display_name: "Skyloft Village - Crystal near Pumpkin Patch",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystal,
                },
            },
            Location::SkyloftVillageSparrotsCrystals => &LocationDef {
                name: "Sparrot's Crystals",
                area: Area::SparrotsHouse_Main,
                display_name: "Skyloft Village - Sparrot's Crystals",
                kind: LocationKind::Check {
                    vanilla_item: Item::GratitudeCrystalPack,
                },
            },
            Location::SkyviewGhirahimHeartContainer => &LocationDef {
                name: "Ghirahim Heart Container",
                area: Area::SkyviewBoss_Main,
                display_name: "Skyview - Ghirahim Heart Container",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartContainer,
                },
            },
            Location::SkyviewRubyTablet => &LocationDef {
                name: "Ruby Tablet",
                area: Area::SkyviewSpring_Main,
                display_name: "Skyview - Ruby Tablet",
                kind: LocationKind::Check {
                    vanilla_item: Item::RubyTablet,
                },
            },
            Location::SkyviewBossKeyChest => &LocationDef {
                name: "Boss Key Chest",
                area: Area::SkyviewTemple_BossDoorArea,
                display_name: "Skyview - Boss Key Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyviewBossKey,
                },
            },
            Location::SkyviewChestNearBossDoor => &LocationDef {
                name: "Chest near Boss Door",
                area: Area::SkyviewTemple_BossDoorArea,
                display_name: "Skyview - Chest near Boss Door",
                kind: LocationKind::Check {
                    vanilla_item: Item::RedRupee,
                },
            },
            Location::SkyviewChestBehindTwoEyes => &LocationDef {
                name: "Chest behind Two Eyes",
                area: Area::SkyviewTemple_FirstHub,
                display_name: "Skyview - Chest behind Two Eyes",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyviewSmallKey,
                },
            },
            Location::SkyviewChestOnTreeBranch => &LocationDef {
                name: "Chest on Tree Branch",
                area: Area::SkyviewTemple_FirstHub,
                display_name: "Skyview - Chest on Tree Branch",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyviewMap,
                },
            },
            Location::SkyviewDiggingSpotInCrawlspace => &LocationDef {
                name: "Digging Spot in Crawlspace",
                area: Area::SkyviewTemple_FirstHub,
                display_name: "Skyview - Digging Spot in Crawlspace",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyviewSmallKey,
                },
            },
            Location::SkyviewBeetle => &LocationDef {
                name: "Beetle",
                area: Area::SkyviewTemple_MainHub,
                display_name: "Skyview - Beetle",
                kind: LocationKind::Check {
                    vanilla_item: Item::ProgressiveBeetle,
                },
            },
            Location::SkyviewChestBehindThreeEyes => &LocationDef {
                name: "Chest behind Three Eyes",
                area: Area::SkyviewTemple_MainHub,
                display_name: "Skyview - Chest behind Three Eyes",
                kind: LocationKind::Check {
                    vanilla_item: Item::SkyviewSmallKey,
                },
            },
            Location::SkyviewItemBehindBars => &LocationDef {
                name: "Item behind Bars",
                area: Area::SkyviewTemple_MainHub,
                display_name: "Skyview - Item behind Bars",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::ThunderheadBugHeaven10BugsIn3Minutes => &LocationDef {
                name: "Bug Heaven - 10 Bugs in 3 Minutes",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - Bug Heaven - 10 Bugs in 3 Minutes",
                kind: LocationKind::Check {
                    vanilla_item: Item::HornedColossusBeetle,
                },
            },
            Location::ThunderheadBugHeavenGoddessChest => &LocationDef {
                name: "Bug Heaven Goddess Chest",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - Bug Heaven Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::ThunderheadEastIslandChest => &LocationDef {
                name: "East Island Chest",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - East Island Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::EvilCrystal,
                },
            },
            Location::ThunderheadEastIslandGoddessChest => &LocationDef {
                name: "East Island Goddess Chest",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - East Island Goddess Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::RupeeMedal,
                },
            },
            Location::ThunderheadFirstGoddessChestOnMogmaMittsIsland => &LocationDef {
                name: "First Goddess Chest on Mogma Mitts Island",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - First Goddess Chest on Mogma Mitts Island",
                kind: LocationKind::Check {
                    vanilla_item: Item::EmptyBottle,
                },
            },
            Location::ThunderheadGoddessChestOnTopOfIsleOfSongs => &LocationDef {
                name: "Goddess Chest on top of Isle of Songs",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - Goddess Chest on top of Isle of Songs",
                kind: LocationKind::Check {
                    vanilla_item: Item::SmallBombBag,
                },
            },
            Location::ThunderheadGoddessChestOutsideIsleOfSongs => &LocationDef {
                name: "Goddess Chest outside Isle of Songs",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - Goddess Chest outside Isle of Songs",
                kind: LocationKind::Check {
                    vanilla_item: Item::GoldRupee,
                },
            },
            Location::ThunderheadSongFromLevias => &LocationDef {
                name: "Song from Levias",
                area: Area::InsideThunderhead_Main,
                display_name: "Thunderhead - Song from Levias",
                kind: LocationKind::Check {
                    vanilla_item: Item::Rupoor,
                },
            },
            Location::ThunderheadIsleOfSongsDinsPower => &LocationDef {
                name: "Isle of Songs - Din's Power",
                area: Area::IsleOfSongs_Main,
                display_name: "Thunderhead - Isle of Songs - Din's Power",
                kind: LocationKind::Check {
                    vanilla_item: Item::DinsPower,
                },
            },
            Location::ThunderheadIsleOfSongsFaroresCourage => &LocationDef {
                name: "Isle of Songs - Farore's Courage",
                area: Area::IsleOfSongs_Main,
                display_name: "Thunderhead - Isle of Songs - Farore's Courage",
                kind: LocationKind::Check {
                    vanilla_item: Item::FaroresCourage,
                },
            },
            Location::ThunderheadIsleOfSongsNayrusWisdom => &LocationDef {
                name: "Isle of Songs - Nayru's Wisdom",
                area: Area::IsleOfSongs_Main,
                display_name: "Thunderhead - Isle of Songs - Nayru's Wisdom",
                kind: LocationKind::Check {
                    vanilla_item: Item::NayrusWisdom,
                },
            },
            Location::VolcanoSummitBokoBasePouchChest => &LocationDef {
                name: "Boko Base Pouch Chest",
                area: Area::InsideVolcanoSummit_Main,
                display_name: "Volcano Summit - Boko Base Pouch Chest",
                kind: LocationKind::Check {
                    vanilla_item: Item::Rupoor,
                },
            },
            Location::VolcanoSummitSmallChestInVolcanoSummit => &LocationDef {
                name: "Small Chest in Volcano Summit",
                area: Area::InsideVolcanoSummit_Main,
                display_name: "Volcano Summit - Small Chest in Volcano Summit",
                kind: LocationKind::Check {
                    vanilla_item: Item::BlueRupee,
                },
            },
            Location::VolcanoSummitGossipStoneOutsideFireSanctuary => &LocationDef {
                name: "Gossip Stone outside Fire Sanctuary",
                area: Area::OutsideFireSanctuary_Middle,
                display_name: "Volcano Summit - Gossip Stone outside Fire Sanctuary",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
            Location::VolcanoSummitItemBehindDigging => &LocationDef {
                name: "Item behind Digging",
                area: Area::OutsideFireSanctuary_Middle,
                display_name: "Volcano Summit - Item behind Digging",
                kind: LocationKind::Check {
                    vanilla_item: Item::HeartPiece,
                },
            },
            Location::VolcanoSummitChestBehindBombableWallInWaterfallArea => &LocationDef {
                name: "Chest behind Bombable Wall in Waterfall Area",
                area: Area::VolcanoSummitWaterfall_Main,
                display_name: "Volcano Summit - Chest behind Bombable Wall in Waterfall Area",
                kind: LocationKind::Check {
                    vanilla_item: Item::SilverRupee,
                },
            },
            Location::VolcanoSummitGossipStoneInWaterfallArea => &LocationDef {
                name: "Gossip Stone in Waterfall Area",
                area: Area::VolcanoSummitWaterfall_Main,
                display_name: "Volcano Summit - Gossip Stone in Waterfall Area",
                kind: LocationKind::GossipStone { text_path: "TODO" },
            },
        }
    }
}
pub fn get_logic() -> Requirements<'static> {
    Requirements::new_from_map(HashMap::from([
        (
            RequirementKey::Exit(Exit::AncientCistern_To_AncientCisternBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AncientCisternBossKey, 1u8),
                RequirementExpression::Area(Area::AncientCistern_BeforeBossDoor, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::AncientCistern_To_FloriaWaterfall),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::AncientCisternBoss_To_AncientCisternCandleRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::AncientCisternBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BatreauxHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BeedlesShop_To_Sky_Night),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BeedlesShop_To_Skyloft_Day),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Day),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Bazaar_To_Skyloft_North),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Bazaar_To_Skyloft_South),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Bazaar_To_Skyloft_West),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::ParrowAndOriellesHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ParrowAndOriellesHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::PeatricesHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::PeatricesHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::PipersHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::PipersHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_Bazaar_North),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_Bazaar_South),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_Bazaar_West),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_BeedlesShop_Day),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Item(Item::BombBag, 1u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_ParrowAndOriellesHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_PeatricesHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_PipersHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_Sky),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_SkyloftSilentRealm),
            RequirementExpression::And(vec![
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::FaronSongOfTheHeroPart, 1u8),
                    RequirementExpression::Item(Item::EldinSongOfTheHeroPart, 1u8),
                    RequirementExpression::Item(Item::LanayruSongOfTheHeroPart, 1u8),
                ]),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_WaterfallCave_Upper),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_WrynasHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_Sky_PastWaterfallCave),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_PastWaterfallCave, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_PastWaterfallCave, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_WaterfallCave_Lower),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_PastWaterfallCave, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_SkyKeepEntry),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_ToSkyKeep, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::WaterfallCave_To_Skyloft_Upper),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::WaterfallCave_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::WaterfallCave_To_Skyloft_Lower),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::WaterfallCave_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::WrynasHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::WrynasHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EarthTemple_To_EarthTempleBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EarthTempleBossKey, 1u8),
                RequirementExpression::Area(Area::EarthTemple_BossDoorArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EarthTemple_To_EldinVolcano),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EarthTemple_Entrance, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EarthTempleBoss_To_EarthTempleSpring),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Or(vec![
                            RequirementExpression::And(vec![
                                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                                RequirementExpression::Option(|options| options.hero_mode),
                            ]),
                            RequirementExpression::And(vec![
                                RequirementExpression::Item(Item::ProgressiveSword, 3u8),
                                RequirementExpression::Option(|options| options.hero_mode),
                            ]),
                            RequirementExpression::Item(Item::ProgressiveSword, 5u8),
                        ]),
                    ]),
                ]),
                RequirementExpression::Area(Area::EarthTempleBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EarthTempleSpring_To_EldinVolcano),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::EarthTempleSpring_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinSilentRealm_To_EldinVolcano),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_Sky_EldinEntranceStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_FirstRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_InsideVolcanoSummit),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_HotCaveArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_ThrillDiggerCave),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_NearThrillDigger, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_EarthTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::KeyPiece, 5u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_Sky_TempleEntranceStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_MogmaTurf_Skydive),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_Sky_VolcanoEastStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_EldinSilentRealm),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::DinsPower, 1u8),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::EldinVolcano_To_Sky_VolcanoAscentStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::ThrillDiggerCave_To_EldinVolcano),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ThrillDiggerCave_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronSilentRealm_To_FaronWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::DeepWoods_To_FaronWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::DeepWoods_To_Sky_DeepWoodsStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::DeepWoods_To_Sky_ForestTempleStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::DeepWoods_To_SkyviewTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_BehindTheTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_Sky_FaronWoodsEntryStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_GreatTree_LowerPlatform),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreePlatforms, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_GreatTree_UpperPlatform),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreePlatforms, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_GreatTree_Top),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_Sky_GreatTreeStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_DeepWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_FaronSilentRealm),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FaroresCourage, 1u8),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_GreatTree_Tunnel),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_LakeFloria),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::TalkToYerbal),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_Sky_InTheWoodsStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaronWoods_To_Sky_ViewingPlatformStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::GreatTree_To_FaronWoods_Tunnel),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::GreatTree_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::GreatTree_To_FaronWoods_LowerPlatform),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_PastPlatforms, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::GreatTree_To_FaronWoods_UpperPlatform),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::GreatTree_To_FaronWoods_Top),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FireSanctuaryA_To_OutsideFireSanctuary),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FireSanctuaryA_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FireSanctuaryA_To_FireSanctuaryBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireSanctuaryBossKey, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_InFrontOfBossDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FireSanctuaryA_To_FireSanctuaryB),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireSanctuarySmallKey, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_PastFirstWaterPlant,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FireSanctuaryB_To_FireSanctuaryA),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FireSanctuaryBoss_To_FireSanctuaryFlameRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::FireSanctuaryBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideGoddessStatue_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsideGoddessStatue_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::KnightAcademy_To_Skyloft_Lower_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Day),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::KnightAcademy_To_Skyloft_Lower_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Day),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::KnightAcademy_To_Skyloft_Upper_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::KnightAcademy_To_Skyloft_Upper_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_InsideGoddessStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_KnightAcademy_Chimney),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_KnightAcademy_Lower_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_KnightAcademy_Lower_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_KnightAcademy_Upper_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_KnightAcademy_Upper_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_SparringHall_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_SparringHall_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SparringHall_To_Skyloft_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SparringHall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SparringHall_To_Skyloft_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SparringHall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaroresLair_To_FloriaWaterfall),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaroresLair_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FaroresLair_To_LakeFloria),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::FaroresLair_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FloriaWaterfall_To_AncientCistern),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::FloriaWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FloriaWaterfall_To_FaronWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FloriaWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FloriaWaterfall_To_FaroresLair),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FloriaWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FloriaWaterfall_To_Sky_FloriaWaterfallStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FloriaWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LakeFloria_To_Sky_LakeFloriaStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LakeFloria_StatueSpot, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LakeFloria_To_FaroresLair),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::LakeFloria_ToFaroresLair, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruCaves_To_LanayruDesert),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruCaves_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruCaves_To_LanayruMines),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruCaves_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruCaves_To_SandSeaDocks),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruCaves_ToSandSea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::FireNode_To_LanayruDesert),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FireNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_LanayruMines),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_Sky_DesertEntranceStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_FireNode),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_LanayruMiningFacilityA),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::RaiseLanayruMiningFacility),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_LanayruSilentRealm),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::NayrusWisdom, 1u8),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_LightningNode),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_Sky_NorthDesertStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_Sky_StoneCacheStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_TempleOfTime_End),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_LanayruCaves),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_Sky_WestDesertStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruDesert_To_TempleOfTime_Start),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LightningNode_To_LanayruDesert),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LightningNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::TempleOfTime_To_LanayruDesert_End),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::TempleOfTime_End, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::TempleOfTime_To_LanayruDesert_Start),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::TempleOfTime_Start, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMines_To_Sky_LanayruMineEntryStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMines_To_LanayruCaves),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruMines_ToCaves, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMines_To_LanayruDesert),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruMines_ToDesert, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityA_To_LanayruDesert),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruMiningFacilityA_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub2),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_GustBellowsRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_HubW),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                ]),
                RequirementExpression::Area(Area::LanayruMiningFacilityA_MapRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityA_To_LanayruMiningFacilityB_Hub),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_SecondRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityB_To_LanayruMiningFacilityBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::LanayruMiningFacilityBossKey, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_NearBossDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityBoss_To_LanayruMiningFacilityToToT),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::LanayruMiningFacilityBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruMiningFacilityToToT_To_TempleOfTime),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityToToT_ToTExit,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_End),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::OpenSharkhead),
                RequirementExpression::Area(Area::InsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(
                Exit::InsidePiratesStronghold_To_OutsidePiratesStronghold_Beginning,
            ),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_End),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::OutsidePiratesStronghold_InsideSharkhead,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(
                Exit::OutsidePiratesStronghold_To_InsidePiratesStronghold_Beginning,
            ),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::OutsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::OutsidePiratesStronghold_To_SandSea),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::OutsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSea_To_OutsidePiratesStronghold),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SandSea_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSea_To_SandSeaDocks),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SandSea_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSea_To_Sandship),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SeaChart, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SandSea_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSea_To_Shipyard),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SandSea_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSea_To_SkippersRetreat),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SandSea_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSeaDocks_To_SandSea),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::SandSeaDocks_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSeaDocks_To_Sky_AncientHarbor),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SandSeaDocks_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SandSeaDocks_To_LanayruCaves),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SandSeaDocks_ToCaves, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Shipyard_To_ShipyardConstructionBay_Upper),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Shipyard_AfterMinecartRide, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Shipyard_To_SandSea),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Shipyard_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Shipyard_To_ShipyardConstructionBay_Lower),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Shipyard_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::ShipyardConstructionBay_To_Shipyard_Lower),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ShipyardConstructionBay_Lower, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::ShipyardConstructionBay_To_Shipyard_Upper),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ShipyardConstructionBay_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkippersRetreat_To_SkippersShack),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkippersRetreat_NextToShack, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkippersRetreat_To_SandSea),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkippersRetreat_Start, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkippersShack_To_SkippersRetreat),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkippersShack_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LanayruSilentRealm_To_LanayruDesert),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::MogmaTurf_To_EldinVolcano_EndVent),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::MogmaTurf_To_EldinVolcano_StartVent),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sandship_To_SandSea),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sandship_To_SandshipBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::CanFreelyChangeSandshipTemporality),
                RequirementExpression::Item(Item::SandshipBossKey, 1u8),
                RequirementExpression::Area(Area::Sandship_PastSpume, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BehindTheTemple_To_FaronWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BehindTheTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BehindTheTemple_To_SealedGroundsSpiral),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BehindTheTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BehindTheTemple_To_SealedTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BehindTheTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BehindTheTemple_To_Sky_BehindTheTempleStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BehindTheTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SealedGroundsSpiral_To_SealedTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedGroundsSpiral_Lower, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SealedGroundsSpiral_To_Sky_SealedGroundsStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedGroundsSpiral_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SealedTemple_To_BehindTheTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SealedTemple_To_HyliasTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::DefeatImprisoned2),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SealedTemple_To_SealedGroundsSpiral),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideBambooIsland_To_Sky),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsideBambooIsland_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LumpyPumpkin_To_Sky_North),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LumpyPumpkin_To_Sky_South_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::LumpyPumpkin_To_Sky_South_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_BeedlesShop_Night),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_BeedlesSkyHome, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_BehindTheTemple_BehindTheTempleStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::BehindTheTempleStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_DeepWoods_DeepWoodsStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::DeepWoodsStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_DeepWoods_ForestTempleStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::ForestTempleStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_EldinVolcano_EldinEntranceStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::RubyTablet, 1u8),
                RequirementExpression::Event(Event::EldinEntranceStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_EldinVolcano_TempleEntranceStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::RubyTablet, 1u8),
                RequirementExpression::Event(Event::TempleEntranceStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_EldinVolcano_VolcanoEastStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::RubyTablet, 1u8),
                RequirementExpression::Event(Event::VolcanoEastStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_EldinVolcano_VolcanoAscentStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::RubyTablet, 1u8),
                RequirementExpression::Event(Event::VolcanoAscentStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_FaronWoods_FaronWoodsEntryStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::FaronWoodsEntryStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_FaronWoods_GreatTreeStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::GreatTreeStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_FaronWoods_InTheWoodsStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::InTheWoodsStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_FaronWoods_ViewingPlatformStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::ViewingPlatformStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_FloriaWaterfall_FloriaWaterfallStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::FloriaWaterfallStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_InsideBambooIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_InsideThunderhead),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BalladOfTheGoddess, 1u8),
                    RequirementExpression::Option(|options| {
                        options.open_thunderhead == OpenThunderhead::Open
                    }),
                ]),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LakeFloria_LakeFloriaStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::LakeFloriaStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LanayruDesert_DesertEntranceStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AmberTablet, 1u8),
                RequirementExpression::Event(Event::DesertEntranceStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LanayruDesert_NorthDesertStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AmberTablet, 1u8),
                RequirementExpression::Event(Event::NorthDesertStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LanayruDesert_StoneCacheStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AmberTablet, 1u8),
                RequirementExpression::Event(Event::StoneCacheStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LanayruDesert_WestDesertStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AmberTablet, 1u8),
                RequirementExpression::Event(Event::WestDesertStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LanayruMines_LanayruMineEntryStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AmberTablet, 1u8),
                RequirementExpression::Event(Event::LanayruMineEntryStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_OutsideFireSanctuary_InsideTheVolcanoStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::RubyTablet, 1u8),
                RequirementExpression::Event(Event::InsideTheVolcanoStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_SealedGroundsSpiral_SealedGroundsStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::EmeraldTablet, 1u8),
                RequirementExpression::Event(Event::SealedGroundsStatue),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LumpyPumpkin_North),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LumpyPumpkin_South_Right),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Sky_To_LumpyPumpkin_South_Left),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyKeepEntry_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyKeepEntry_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyloftSilentRealm_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyloftSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::BertiesHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BertiesHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::GondosHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GondosHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::MallarasHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::MallarasHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::RupinsHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::RupinsHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_BatreauxHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::OpenedShed),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_BertiesHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_GondosHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_MallarasHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_RupinsHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::Skyloft_To_SparrotsHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SparrotsHouse_To_Skyloft),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SparrotsHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyviewBoss_To_SkyviewSpring),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyviewBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyviewBoss_To_SkyviewTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyviewBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyviewSpring_To_DeepWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SkyviewSpring_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyviewSpring_To_SkyviewBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyviewSpring_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyviewTemple_To_SkyviewBoss),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SkyviewBossKey, 1u8),
                RequirementExpression::Area(Area::SkyviewTemple_BossDoorArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::SkyviewTemple_To_DeepWoods),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyviewTemple_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideThunderhead_To_IsleOfSongs),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideThunderhead_To_Sky),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::IsleOfSongs_To_InsideThunderhead),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::IsleOfSongs_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideVolcanoSummit_To_EldinVolcano),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Area(Area::InsideVolcanoSummit_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideVolcanoSummit_To_OutsideFireSanctuary),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Area(Area::InsideVolcanoSummit_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::InsideVolcanoSummit_To_VolcanoSummitWaterfall),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Area(Area::InsideVolcanoSummit_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::OutsideFireSanctuary_To_FireSanctuaryA),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::OutsideFireSanctuary_ToFireSanctuary,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::OutsideFireSanctuary_To_Sky_InsideTheVolcanoStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::OutsideFireSanctuary_ToFireSanctuary,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::OutsideFireSanctuary_To_InsideVolcanoSummit),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::OutsideFireSanctuary_ToInsideSummit,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Exit(Exit::VolcanoSummitWaterfall_To_InsideVolcanoSummit),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::VolcanoSummitWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_AfterAcGutters,
                to: Area::AncientCistern_AfterWhipHooks,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_AfterAcGutters, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_AfterAcGutters,
                to: Area::AncientCistern_MainRoomVines,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Area(Area::AncientCistern_AfterAcGutters, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_AfterWhipHooks,
                to: Area::AncientCistern_MainRoomVines,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::AncientCistern_AfterWhipHooks, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_BeforeBokoKeyDoor,
                to: Area::AncientCistern_AfterAcGutters,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AncientCisternSmallKey, 2u8),
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(
                    Area::AncientCistern_BeforeBokoKeyDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_BehindWaterfall,
                to: Area::AncientCistern_BeforeBokoKeyDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::WaterScale, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                ]),
                RequirementExpression::Area(Area::AncientCistern_BehindWaterfall, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainBasement,
                to: Area::AncientCistern_BeforeBossDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Area(Area::AncientCistern_MainBasement, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainBasement,
                to: Area::AncientCistern_BossKeyChestArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_MainBasement, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainBasement,
                to: Area::AncientCistern_SpiderThread,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::AncientCistern_MainBasement, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainHub,
                to: Area::AncientCistern_AfterWhipHooks,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainHub,
                to: Area::AncientCistern_BeforeBossDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AncientCisternSmallKey, 2u8),
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainHub,
                to: Area::AncientCistern_BehindWaterfall,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainHub,
                to: Area::AncientCistern_MainBasement,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::CanLowerAcStatue),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainHub,
                to: Area::AncientCistern_SpiderThread,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainHub,
                to: Area::AncientCistern_WhipChestRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::AncientCisternSmallKey, 2u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Event(Event::CanLowerAcStatue),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                ]),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_MainRoomVines,
                to: Area::AncientCistern_AfterWhipHooks,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_MainRoomVines, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_SpiderThread,
                to: Area::AncientCistern_BossKeyChestArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_SpiderThread, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::AncientCistern_SpiderThread,
                to: Area::AncientCistern_MainBasement,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_SpiderThread, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_CentralOutside,
                to: Area::Skyloft_ToSkyKeep,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::StoneOfTrials, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_CentralOutside,
                to: Area::Skyloft_WaterfallCaveCrystals,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_CentralOutside,
                to: Area::Skyloft_OutsideGoddessStatue,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_CentralOutside,
                to: Area::Skyloft_OutsideSkyloftVillage,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_PastWaterfallCave,
                to: Area::Skyloft_WaterfallCaveCrystals,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_PastWaterfallCave, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_ToSkyKeep,
                to: Area::Skyloft_CentralOutside,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Skyloft_ToSkyKeep, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EarthTemple_AfterBallRolling,
                to: Area::EarthTemple_BossDoorArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                        RequirementExpression::Item(Item::BombBag, 1u8),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::EarthTemple_AfterBallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EarthTemple_BallRolling,
                to: Area::EarthTemple_AfterBallRolling,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                RequirementExpression::Area(Area::EarthTemple_BallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EarthTemple_Entrance,
                to: Area::EarthTemple_BallRolling,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Or(vec![
                            RequirementExpression::And(vec![
                                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                                RequirementExpression::Option(|options| options.hero_mode),
                            ]),
                            RequirementExpression::Item(Item::ProgressiveSword, 6u8),
                        ]),
                        RequirementExpression::Fixed(true),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Or(vec![
                            RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                            RequirementExpression::Item(Item::BombBag, 1u8),
                        ]),
                        RequirementExpression::Or(vec![
                            RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                            RequirementExpression::Item(Item::Clawshots, 1u8),
                        ]),
                    ]),
                ]),
                RequirementExpression::Area(Area::EarthTemple_Entrance, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_FirstRoom,
                to: Area::EldinVolcano_PreMogmaTurf,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_FirstRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_FirstRoom,
                to: Area::EldinVolcano_VolcanoAscent,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_FirstRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_HotCaveArea,
                to: Area::EldinVolcano_SandSlide,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_HotCaveArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_NearThrillDigger,
                to: Area::EldinVolcano_OutsideEt,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_NearThrillDigger, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_NearThrillDigger,
                to: Area::EldinVolcano_VolcanoAscent,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_NearThrillDigger, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_OutsideEt,
                to: Area::EldinVolcano_HotCaveArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_PastMogmaTurf,
                to: Area::EldinVolcano_PreMogmaTurf,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PastMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_PastMogmaTurf,
                to: Area::EldinVolcano_VolcanoAscent,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PastMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_PastSlide,
                to: Area::EldinVolcano_HotCaveArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PastSlide, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_PastSlide,
                to: Area::EldinVolcano_VolcanoAscent,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PastSlide, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_PreMogmaTurf,
                to: Area::EldinVolcano_FirstRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_PreMogmaTurf,
                to: Area::EldinVolcano_PastMogmaTurf,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_SandSlide,
                to: Area::EldinVolcano_PastSlide,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_SandSlide, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_VolcanoAscent,
                to: Area::EldinVolcano_FirstRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_VolcanoAscent,
                to: Area::EldinVolcano_NearThrillDigger,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::EldinVolcano_VolcanoAscent,
                to: Area::EldinVolcano_PastSlide,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::DeepWoods_Entry,
                to: Area::DeepWoods_PastBeehive,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                ]),
                RequirementExpression::Area(Area::DeepWoods_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::DeepWoods_PastBeehive,
                to: Area::DeepWoods_Entry,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FaronWoods_Entry,
                to: Area::FaronWoods_Main,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                ]),
                RequirementExpression::Area(Area::FaronWoods_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FaronWoods_GreatTreeTop,
                to: Area::FaronWoods_ClawshotTargetBranch,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FaronWoods_GreatTreeTop,
                to: Area::FaronWoods_GreatTreePlatforms,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FaronWoods_Main,
                to: Area::FaronWoods_ClawshotTargetBranch,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FaronWoods_Main,
                to: Area::FaronWoods_Entry,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FaronWoods_Main,
                to: Area::FaronWoods_GreatTreePlatforms,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Entry,
                to: Area::GreatTree_Lower,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::GreatTree_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Lower,
                to: Area::GreatTree_Entry,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::GreatTree_Lower, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Lower,
                to: Area::GreatTree_Middle,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(Area::GreatTree_Lower, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Lower,
                to: Area::GreatTree_PastPlatforms,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(Area::GreatTree_Lower, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Middle,
                to: Area::GreatTree_Lower,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_Middle, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Middle,
                to: Area::GreatTree_PastPlatforms,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_Middle, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_PastPlatforms,
                to: Area::GreatTree_Lower,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_PastPlatforms, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::GreatTree_Upper,
                to: Area::GreatTree_Middle,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::GreatTree_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryA_Entry,
                to: Area::FireSanctuaryA_PastFirstWaterPlant,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::FireSanctuaryA_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryA_InFrontOfBossDoor,
                to: Area::FireSanctuaryA_UpperStaircaseRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_InFrontOfBossDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryA_PrePlatsArea,
                to: Area::FireSanctuaryA_InFrontOfBossDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::FireSanctuaryA_PrePlatsArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryA_UpperStaircaseRoom,
                to: Area::FireSanctuaryA_InFrontOfBossDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_UpperStaircaseRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryB_AfterDoubleMagmanosFight,
                to: Area::FireSanctuaryB_UnderDoubleMagmanosFight,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_AfterDoubleMagmanosFight,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryB_FirstOutsideSection,
                to: Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_FirstOutsideSection,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
                to: Area::FireSanctuaryB_WaterFruitRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireSanctuarySmallKey, 2u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                to: Area::FireSanctuaryB_LastTrappedMogmaArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_UnderDoubleMagmanosFight,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireSanctuaryB_WaterFruitRoom,
                to: Area::FireSanctuaryB_AfterDoubleMagmanosFight,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::FireSanctuaryB_WaterFruitRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::KnightAcademy_AboveZeldasRoom,
                to: Area::KnightAcademy_Main,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::KnightAcademy_AboveZeldasRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_OutsideGoddessStatue,
                to: Area::Skyloft_CentralOutside,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LakeFloria_Entry,
                to: Area::LakeFloria_StatueSpot,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::LakeFloria_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LakeFloria_StatueSpot,
                to: Area::LakeFloria_ToFaroresLair,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::LakeFloria_StatueSpot, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LakeFloria_ToFaroresLair,
                to: Area::LakeFloria_StatueSpot,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::LakeFloria_ToFaroresLair, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruCaves_Main,
                to: Area::LanayruCaves_ToSandSea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::LanayruCavesSmallKey, 1u8),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruCaves_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruCaves_ToSandSea,
                to: Area::LanayruCaves_Main,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::LanayruCavesSmallKey, 1u8),
                RequirementExpression::Area(Area::LanayruCaves_ToSandSea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::FireNode_Main,
                to: Area::FireNode_End,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                RequirementExpression::Area(Area::FireNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruDesert_HookBeetleArea,
                to: Area::LanayruDesert_PastToT,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Event(Event::RaiseLanayruMiningFacility),
                ]),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruDesert_HookBeetleArea,
                to: Area::LanayruDesert_SandOasis,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                ]),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruDesert_PastToT,
                to: Area::LanayruDesert_HookBeetleArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruDesert_SandOasis,
                to: Area::LanayruDesert_HookBeetleArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::TempleOfTime_AfterLmf,
                to: Area::TempleOfTime_NearGossipStone,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::TempleOfTime_AfterLmf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::TempleOfTime_End,
                to: Area::TempleOfTime_Start,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::TempleOfTime_End, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::TempleOfTime_NearCube,
                to: Area::TempleOfTime_End,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::TempleOfTime_NearCube, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::TempleOfTime_NearGossipStone,
                to: Area::TempleOfTime_NearCube,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Item(Item::BombBag, 1u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Item(Item::Whip, 1u8),
                    ]),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::Or(vec![
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                            RequirementExpression::Option(|options| options.hero_mode),
                        ]),
                        RequirementExpression::Item(Item::ProgressiveSword, 6u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::TempleOfTime_NearGossipStone, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::TempleOfTime_Start,
                to: Area::TempleOfTime_NearGossipStone,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(Area::TempleOfTime_Start, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMines_FirstHalf,
                to: Area::LanayruMines_ToCaves,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMines_FirstHalf,
                to: Area::LanayruMines_ToDesert,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMines_ToCaves,
                to: Area::LanayruMines_FirstHalf,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruMines_ToCaves, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityA_Entry,
                to: Area::LanayruMiningFacilityA_SecondRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::Whip, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(Area::LanayruMiningFacilityA_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                to: Area::LanayruMiningFacilityA_GustBellowsRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityA_FirstWestRoom,
                to: Area::LanayruMiningFacilityA_MapRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_FirstWestRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityA_SecondRoom,
                to: Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::LanayruMiningFacilitySmallKey, 1u8),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_SecondRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityA_SecondRoom,
                to: Area::LanayruMiningFacilityA_FirstWestRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_SecondRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                to: Area::LanayruMiningFacilityB_InsideLmfBkRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                to: Area::LanayruMiningFacilityB_NearBossDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_HubRoom,
                to: Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::LanayruMiningFacilityB_HubRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                to: Area::LanayruMiningFacilityB_AfterLmfBkRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_NearBossDoor,
                to: Area::LanayruMiningFacilityB_AfterLmfBkRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_NearBossDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_NearBossDoor,
                to: Area::LanayruMiningFacilityB_InsideLmfBkRoom,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_NearBossDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityB_WestHub,
                to: Area::LanayruMiningFacilityB_NearBossDoor,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::LanayruMiningFacilityB_WestHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::LanayruMiningFacilityToToT_BossDoor,
                to: Area::LanayruMiningFacilityToToT_ToTExit,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityToToT_BossDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::OutsidePiratesStronghold_Main,
                to: Area::OutsidePiratesStronghold_InsideSharkhead,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::OpenSharkhead),
                RequirementExpression::Area(Area::OutsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SandSeaDocks_ToCaves,
                to: Area::SandSeaDocks_Main,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::SandSeaDocks_ToCaves, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Shipyard_Main,
                to: Area::Shipyard_AfterMinecartRide,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Shipyard_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::ShipyardConstructionBay_Upper,
                to: Area::ShipyardConstructionBay_Lower,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ShipyardConstructionBay_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkippersRetreat_NextToShack,
                to: Area::SkippersRetreat_PastDekuBaba,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::SkippersRetreat_NextToShack, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkippersRetreat_PastDekuBaba,
                to: Area::SkippersRetreat_NextToShack,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::SkippersRetreat_PastDekuBaba, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkippersRetreat_PastMoblin,
                to: Area::SkippersRetreat_PastDekuBaba,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::SkippersRetreat_PastMoblin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkippersRetreat_Start,
                to: Area::SkippersRetreat_PastMoblin,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::Whip, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::SkippersRetreat_Start, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Sandship_Deck,
                to: Area::Sandship_PastSpume,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Fixed(true),
                    RequirementExpression::Event(Event::CanFreelyChangeSandshipTemporality),
                ]),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Sandship_PastSpume,
                to: Area::Sandship_SandshipBrig,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Area(Area::Sandship_PastSpume, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SealedGroundsSpiral_Lower,
                to: Area::SealedGroundsSpiral_Upper,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::BeatRequiredDungeons),
                RequirementExpression::Event(Event::RaiseGoT),
                RequirementExpression::Area(Area::SealedGroundsSpiral_Lower, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SealedGroundsSpiral_Upper,
                to: Area::SealedGroundsSpiral_Lower,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedGroundsSpiral_Upper, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Sky_BeedlesSkyHome,
                to: Area::Sky_BeedleIslandCage,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_BeedlesSkyHome, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Sky_Field,
                to: Area::Sky_BeedleIslandCage,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Sky_Field,
                to: Area::Sky_OutsideLumpyPumpkin,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Sky_OutsideLumpyPumpkin,
                to: Area::Sky_Field,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Day),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::Skyloft_CentralOutside,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::Skyloft_OutsideSkyloftVillage,
                to: Area::Skyloft_PastWaterfallCave,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkyviewTemple_Entry,
                to: Area::SkyviewTemple_FirstHub,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                        RequirementExpression::Or(vec![
                            RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                            RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                            RequirementExpression::Item(Item::Clawshots, 1u8),
                            RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                        ]),
                    ]),
                ]),
                RequirementExpression::Area(Area::SkyviewTemple_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkyviewTemple_FirstHub,
                to: Area::SkyviewTemple_MainHub,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Item(Item::SkyviewSmallKey, 1u8),
                RequirementExpression::Area(Area::SkyviewTemple_FirstHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::SkyviewTemple_MainHub,
                to: Area::SkyviewTemple_BossDoorArea,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SkyviewSmallKey, 2u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::WaterScale, 1u8),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                            RequirementExpression::Option(|options| options.hero_mode),
                        ]),
                        RequirementExpression::Item(Item::ProgressiveSword, 6u8),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::SkyviewTemple_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::OutsideFireSanctuary_Middle,
                to: Area::OutsideFireSanctuary_ToFireSanctuary,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                    RequirementExpression::Item(Item::EmptyBottle, 1u8),
                ]),
                RequirementExpression::Area(Area::OutsideFireSanctuary_Middle, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::LogicExit {
                from: Area::OutsideFireSanctuary_ToInsideSummit,
                to: Area::OutsideFireSanctuary_Middle,
            },
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                RequirementExpression::Item(Item::EmptyBottle, 1u8),
                RequirementExpression::Area(
                    Area::OutsideFireSanctuary_ToInsideSummit,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternChestAfterWhipHooks),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_AfterWhipHooks, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternBokoblin),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Area(
                    Area::AncientCistern_BeforeBokoKeyDoor,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternChestBehindTheWaterfall),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_BehindWaterfall, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternBossKeyChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_BossKeyChestArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternChestInEastPart),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::AncientCistern_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternChestNearVines),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_MainRoomVines, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternWhip),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::AncientCistern_WhipChestRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternKoloktosHeartContainer),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::AncientCisternBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::AncientCisternFaroresFlame),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::AncientCisternCandleRoom_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux10Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 1u8),
                    ]),
                    RequirementExpression::Item(Item::GratitudeCrystalPack, 2u8),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux30Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 3u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 4u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 5u8),
                    ]),
                    RequirementExpression::Item(Item::GratitudeCrystalPack, 6u8),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux30CrystalsChest),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 3u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 4u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 5u8),
                    ]),
                    RequirementExpression::Item(Item::GratitudeCrystalPack, 6u8),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux40Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 5u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 6u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 7u8),
                    ]),
                    RequirementExpression::Item(Item::GratitudeCrystalPack, 8u8),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux5Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                    RequirementExpression::Item(Item::GratitudeCrystalPack, 1u8),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux50Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 7u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 8u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 9u8),
                    ]),
                    RequirementExpression::Item(Item::GratitudeCrystalPack, 10u8),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux70Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 11u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 12u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 13u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux70CrystalsSecondReward),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 11u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 10u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 12u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::GratitudeCrystal, 5u8),
                        RequirementExpression::Item(Item::GratitudeCrystalPack, 13u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Batreaux80Crystals),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GratitudeCrystal, 15u8),
                RequirementExpression::Item(Item::GratitudeCrystalPack, 13u8),
                RequirementExpression::Area(Area::BatreauxHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle1000RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Event(Event::CanRetrievePartyWheel),
                    RequirementExpression::Event(Event::CanPlayThrillDigger),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ExtraWallet, 3u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveWallet, 1u8),
                        RequirementExpression::Item(Item::ExtraWallet, 2u8),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveWallet, 2u8),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle1200RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::And(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Event(Event::CanRetrievePartyWheel),
                        RequirementExpression::Event(Event::CanPlayThrillDigger),
                    ]),
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ExtraWallet, 3u8),
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveWallet, 1u8),
                            RequirementExpression::Item(Item::ExtraWallet, 3u8),
                        ]),
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveWallet, 2u8),
                            RequirementExpression::Item(Item::ExtraWallet, 1u8),
                        ]),
                        RequirementExpression::Item(Item::ProgressiveWallet, 3u8),
                    ]),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                    RequirementExpression::Option(|options| options.shop_mode != ShopMode::Vanilla),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle1600RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Event(Event::CanRetrievePartyWheel),
                    RequirementExpression::Event(Event::CanPlayThrillDigger),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveWallet, 2u8),
                        RequirementExpression::Item(Item::ExtraWallet, 2u8),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveWallet, 3u8),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle300RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Event(Event::CanPlayCleanCut),
                    RequirementExpression::Or(vec![
                        RequirementExpression::Event(Event::CanRetrievePartyWheel),
                        RequirementExpression::Event(Event::CanPlayThrillDigger),
                    ]),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                    RequirementExpression::Option(|options| options.shop_mode != ShopMode::Vanilla),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle50RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle600RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::And(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Event(Event::CanRetrievePartyWheel),
                        RequirementExpression::Event(Event::CanPlayThrillDigger),
                    ]),
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ExtraWallet, 1u8),
                        RequirementExpression::Item(Item::ProgressiveWallet, 2u8),
                    ]),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                    RequirementExpression::Option(|options| options.shop_mode != ShopMode::Vanilla),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::Beedle800RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Event(Event::CanRetrievePartyWheel),
                    RequirementExpression::Event(Event::CanPlayThrillDigger),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ExtraWallet, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveWallet, 1u8),
                        RequirementExpression::Item(Item::ExtraWallet, 1u8),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveWallet, 2u8),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::BeedleFirst100RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::BeedleSecond100RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::BeedleThird100RupeeItem),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Event(Event::CanPlayCleanCut),
                    RequirementExpression::Or(vec![
                        RequirementExpression::Event(Event::CanRetrievePartyWheel),
                        RequirementExpression::Event(Event::CanPlayThrillDigger),
                    ]),
                ]),
                RequirementExpression::Area(Area::BeedlesShop_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftBazaarGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInAncientHarbour),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftPotionLadysGift),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalInOrielleAndParrowsHouse),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ParrowAndOriellesHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftPeaterPeatricesCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::TalkToPeatriceInBazaar),
                RequirementExpression::Area(Area::PeatricesHouse_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::PeatricesHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalBetweenWoodenPlanks),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalOnLightTower),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalOnWaterfallIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Night),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalOnWestCliff),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftFloatingIslandGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInLakeFloria),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftFloatingIslandGossipStone),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftItemInBirdNest),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::GustBellows, 1u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Item(Item::GustBellows, 1u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftParrowsCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::SaveOrielle),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftParrowsGift),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::TalkToOrielle),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftShedChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftShedGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Event(Event::GoddessCubeInEldinSlide),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftWaterfallGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInPirateStronghold),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftWestCliffGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeOnWestGreatTreeNearExit),
                RequirementExpression::Area(Area::Skyloft_CentralOutside, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalAfterWaterfallCave),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_WaterfallCaveCrystals, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_WaterfallCaveCrystals, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftCrystalInLoftwingPrison),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_WaterfallCaveCrystals, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_WaterfallCaveCrystals, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftWaterfallCaveFirstChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::WaterfallCave_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftWaterfallCaveSecondChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::WaterfallCave_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::CentralSkyloftWrynasCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::WrynasHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleChestGuardedByLizalfos),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EarthTemple_AfterBallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleBombBag),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::EarthTemple_BallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleChestLeftOfMainRoomBridge),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EarthTemple_BallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleChestBehindBombableRock),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EarthTemple_BallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleChestInWestRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::EarthTemple_BallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleLeddsGift),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(Area::EarthTemple_BallRolling, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleBossKeyChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EarthTemple_BossDoorArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleVentChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EarthTemple_Entrance, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleScalderaHeartContainer),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Or(vec![
                            RequirementExpression::And(vec![
                                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                                RequirementExpression::Option(|options| options.hero_mode),
                            ]),
                            RequirementExpression::And(vec![
                                RequirementExpression::Item(Item::ProgressiveSword, 3u8),
                                RequirementExpression::Option(|options| options.hero_mode),
                            ]),
                            RequirementExpression::Item(Item::ProgressiveSword, 5u8),
                        ]),
                    ]),
                ]),
                RequirementExpression::Area(Area::EarthTempleBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EarthTempleAmberTablet),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::EarthTempleSpring_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinSilentRealmFireshieldEarrings),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoChestBehindBombableWallInFirstRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_FirstRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoDiggingSpotBehindBoulderOnSandySlope),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoDiggingSpotBelowTower),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoDiggingSpotInFrontOfEarthTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoGossipStoneNextToEarthTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoDiggingSpotAfterDrainingLava),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_PastSlide, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoChestAfterCrawlspace),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoChestBehindBombableWallNearCliff),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoItemOnCliff),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoDiggingSpotAfterVents),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_SandSlide, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(
                Location::EldinVolcanoChestBehindBombableWallNearVolcanoAscent,
            ),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::EldinVolcanoGossipStoneInThrillDiggerCave),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::ThrillDiggerCave_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronSilentRealmWaterScale),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronWoodsDeepWoodsChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronWoodsChestBehindBombableRocksNearErla),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronWoodsItemBehindBombableRock),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronWoodsItemOnTree),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronWoodsSlingshot),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                ]),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FaronWoodsChestInsideGreatTree),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::GreatTree_Middle, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestInFirstRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_PastFirstWaterPlant,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryPlatsChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Area(Area::FireSanctuaryA_PrePlatsArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryBossKeyChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_UpperStaircaseRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestInStaircaseRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::FireSanctuaryA_UpperStaircaseRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryMogmaMitts),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_AfterDoubleMagmanosFight,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestInSecondRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_FirstOutsideSection,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestOnBalcony),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_FirstOutsideSection,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestAfterBombableWall),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_LastTrappedMogmaArea,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestAfterSecondTrappedMogma),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_LastTrappedMogmaArea,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryChestNearFirstTrappedMogma),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::FireSanctuaryB_PastSecondRoomWithWaterFruit,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryFirstChestInWaterFruitRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FireSanctuaryB_WaterFruitRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuarySecondChestInWaterFruitRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FireSanctuaryB_WaterFruitRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryGhirahimHeartContainer),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::FireSanctuaryBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::FireSanctuaryDinsFlame),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::FireSanctuaryFlameRoom_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyChestInGoddessStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsideGoddessStatue_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyCawlinsLetter),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyCrystalInKnightAcademyPlant),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyCrystalInLinksRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyCrystalInZeldasRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::UnlockedZeldasRoom),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyFledgesCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::EndurancePotion),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyFledgesGift),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyGhostPipitsCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::CawlinsLetter, 1u8),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Day),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyInZeldasCloset),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::UnlockedZeldasRoom),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyOwlansCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::RetrieveOolo),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Day),
                RequirementExpression::Area(Area::KnightAcademy_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyChestNearGoddessStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyOwlansGift),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyPumpkinArchery600Points),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Day),
                RequirementExpression::Area(Area::Skyloft_OutsideGoddessStatue, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademyCrystalInSparringHall),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                RequirementExpression::Area(Area::SparringHall_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::SparringHall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::KnightAcademySparringHallChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SparringHall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LakeFloriaDragonLairEastChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaroresLair_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LakeFloriaDragonLairSouthChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::FaroresLair_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LakeFloriaLakeFloriaChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LakeFloria_StatueSpot, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruCavesChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruCaves_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruCavesGolosGift),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruCaves_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruCavesGossipStoneInCenter),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruCaves_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertFireNodeLeftEndingChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FireNode_End, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertFireNodeRightEndingChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FireNode_End, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertFireNodeFirstSmallChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::FireNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertFireNodeSecondSmallChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::FireNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertFireNodeShortcutChest),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::FireNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertChestNearHookBeetleFight),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertChestNearPartyWheel),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertHookBeetleFight),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertChestOnPlatformNearFireNode),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertChestOnPlatformNearLightningNode),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertChestOnTopOfLanayruMiningFacility),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::RaiseLanayruMiningFacility),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertSecretPassagewayChest),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertChestNearSandOasis),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertLightningNodeFirstChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::LightningNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertLightningNodeRaisedChestNearGenerator),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(Area::LightningNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertLightningNodeSecondChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::LightningNode_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruDesertGossipStoneInTempleOfTimeArea),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::TempleOfTime_NearGossipStone, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMinesChestAtTheEndOfMines),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMinesChestBehindFirstLanding),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMinesChestBehindStatue),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                ]),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMinesChestNearFirstTimeshiftStone),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestBehindBars),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruMiningFacilityA_Entry, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestInKeyLockedRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_FirstKeyLockedRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestInFirstWestRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_FirstWestRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestInsideGustBellowsRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_GustBellowsRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityGustBellows),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityA_GustBellowsRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestAfterArmosFight),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                ]),
                RequirementExpression::Area(Area::LanayruMiningFacilityA_MapRoom, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityShortcutChestInMainHub),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_AfterLmfBkRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityBossKeyChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_InsideLmfBkRoom,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityFirstChestInHubRoom),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityB_NearFirstHubRoomChest,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestBehindFirstCrawlspace),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(Area::LanayruMiningFacilityB_WestHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityChestInSpikeMaze),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(Area::LanayruMiningFacilityB_WestHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityMolderachHeartContainer),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::LanayruMiningFacilityBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruMiningFacilityGoddessHarp),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityToToT_ToTExit,
                    TimeOfDay::Both,
                ),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaPirateStrongholdFirstChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaPirateStrongholdSecondChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaPirateStrongholdThirdChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsidePiratesStronghold_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaGossipStoneInShipyard),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Shipyard_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaRicketyCoasterHeartStoppingTrackIn105),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::DefeatedShipyardMolderach),
                RequirementExpression::Area(Area::Shipyard_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaSkippersRetreatSkydiveChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkippersRetreat_NextToShack, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(
                Location::LanayruSandSeaSkippersRetreatChestOnTopOfCactiPillar,
            ),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::SkippersRetreat_PastDekuBaba, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaSkippersRetreatChestAfterMoblin),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkippersRetreat_PastMoblin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSandSeaSkippersRetreatChestInShack),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(Area::SkippersShack_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::LanayruSilentRealmClawshots),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::MogmaTurfChestBehindBombableWallAtEntrance),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::MogmaTurfChestBehindBombableWallInFireMaze),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::MogmaTurfDiggingMittsFight),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::MogmaTurfFreeFallChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::MogmaTurfSandSlideChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipBossKeyChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SandshipSmallKey, 2u8),
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipBow),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SandshipSmallKey, 2u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipChestAtTheStern),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Event(Event::CanFreelyChangeSandshipTemporality),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipChestBefore4DoorCorridor),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::CanFreelyChangeSandshipTemporality),
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipChestBehindCombinationLock),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Area(Area::Sandship_PastSpume, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipRobotInBrigsReward),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_SandshipBrig, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipTreasureRoomFifthChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_SandshipBrig, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipTreasureRoomFirstChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_SandshipBrig, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipTreasureRoomFourthChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_SandshipBrig, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipTreasureRoomSecondChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_SandshipBrig, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipTreasureRoomThirdChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sandship_SandshipBrig, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipNayrusFlame),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Area(Area::SandshipBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SandshipTentalusHeartContainer),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Area(Area::SandshipBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SealedGroundsGorkosGoddessWallReward),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Event(Event::ActivateSkyviewGoddessWall),
                RequirementExpression::Area(Area::BehindTheTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SealedGroundsZeldasBlessing),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::HyliasTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SealedGroundsChestInsideSealedTemple),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SealedGroundsSongFromImpa),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGossipStoneInsideBambooIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::InsideBambooIsland_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyCrystalInsideLumpyPumpkin),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyLumpyPumpkinChandelier),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyLumpyPumpkinHarpMinigame),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::PumpkinCarrying),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyBeedlesIslandCageGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeOnTopOfSkyview),
                RequirementExpression::Area(Area::Sky_BeedleIslandCage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyBeedlesCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::HornedColossusBeetle, 1u8),
                RequirementExpression::Area(Area::Sky_BeedlesSkyHome, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyCrystalOnBeedlesShip),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Sky_BeedlesSkyHome, TimeOfDay::Night),
                RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                RequirementExpression::Area(Area::Sky_BeedlesSkyHome, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyBambooIslandGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeWestOfEarthTempleEntrance),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyBeedlesIslandGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeAtRideNearTempleOfTime),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyChestInBreakableBoulderNearFunFunIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SpiralCharge, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyChestInBreakableBoulderNearLumpyPumpkin),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SpiralCharge, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyDodohsCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::CanRetrievePartyWheel),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyFunFunIslandMinigame500Rupees),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::CanRetrievePartyWheel),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGoddessChestInCaveOnIslandNextToBambooIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInSecretPassagewayInDesert),
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGoddessChestInsideVolcanicIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeOnEastGreatTreeWithClawshotsTarget),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGoddessChestOnIslandClosestToFaronPillar),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInDeepWoods),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGoddessChestOnIslandNextToBambooIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeNearMogmaTurfEntrance),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGoddessChestOutsideVolcanicIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInSandOasis),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGoddessChestUnderFunFunIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInFloriaWaterfall),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyGossipStoneInVolcanicIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyLumpyPumpkinGoddessChestOnTheRoof),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInSkyviewSpring),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyNortheastIslandCageGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeEastOfEarthTempleEntrance),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyNortheastIslandGoddessChestBehindBombableRocks),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeAtLanayruMinesEntrance),
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyOriellesCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                RequirementExpression::Item(Item::EmptyBottle, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkySouthwestTripleIslandCageGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInSkippersRetreat),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkySouthwestTripleIslandLowerGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeNearHookBeetleFight),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkySouthwestTripleIslandUpperGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeAtEldinEntrance),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyCrystalOutsideLumpyPumpkin),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Night),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyKinasCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::PumpkinCarrying),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Event(Event::PickUpGuld),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Day),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyLumpyPumpkinOutsideGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::InitialGoddessCube),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyKeepChestAfterDreadfuse),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyKeepEntry_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyKeepFirstChest),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyKeepEntry_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyloftSilentRealmStoneOfTrials),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyloftSilentRealm_Trial, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyloftVillageBertiesCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BabyRattle, 1u8),
                RequirementExpression::Area(Area::BertiesHouse_Main, TimeOfDay::Night),
                RequirementExpression::Area(Area::BertiesHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyloftVillageMallarasCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Area(Area::MallarasHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyloftVillageCrystalNearPumpkinPatch),
            RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyloftVillageSparrotsCrystals),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::RetrieveCrystalBall),
                RequirementExpression::Area(Area::SparrotsHouse_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewGhirahimHeartContainer),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyviewBoss_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewRubyTablet),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SkyviewSpring_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewBossKeyChest),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                    ]),
                    RequirementExpression::Or(vec![
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                            RequirementExpression::Option(|options| options.hero_mode),
                        ]),
                        RequirementExpression::Item(Item::ProgressiveSword, 6u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::SkyviewTemple_BossDoorArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewChestNearBossDoor),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SkyviewTemple_BossDoorArea, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewChestBehindTwoEyes),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyviewTemple_FirstHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewChestOnTreeBranch),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Or(vec![
                            RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                            RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                            RequirementExpression::Item(Item::Clawshots, 1u8),
                            RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                        ]),
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                        RequirementExpression::Item(Item::Whip, 1u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Fixed(true),
                        RequirementExpression::Or(vec![
                            RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                            RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                            RequirementExpression::Item(Item::Clawshots, 1u8),
                            RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                            RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                            RequirementExpression::Item(Item::BombBag, 1u8),
                        ]),
                    ]),
                ]),
                RequirementExpression::Area(Area::SkyviewTemple_FirstHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewDiggingSpotInCrawlspace),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::SkyviewTemple_FirstHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewBeetle),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::WaterScale, 1u8),
                ]),
                RequirementExpression::Area(Area::SkyviewTemple_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewChestBehindThreeEyes),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyviewTemple_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::SkyviewItemBehindBars),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                        RequirementExpression::Fixed(true),
                    ]),
                ]),
                RequirementExpression::Area(Area::SkyviewTemple_MainHub, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadBugHeaven10BugsIn3Minutes),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBugNet, 1u8),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadBugHeavenGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInSummitWaterfall),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadEastIslandChest),
            RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                    RequirementExpression::Fixed(true),
                ]),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadEastIslandGoddessChest),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeOnEastGreatTreeWithRope),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadFirstGoddessChestOnMogmaMittsIsland),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInsideVolcanoSummit),
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadGoddessChestOnTopOfIsleOfSongs),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeNearFsEntrance),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadGoddessChestOutsideIsleOfSongs),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::GoddessCubeInMogmaTurf),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadSongFromLevias),
            RequirementExpression::And(vec![
                RequirementExpression::Event(Event::PickUpLeviasSoup),
                RequirementExpression::Item(Item::SpiralCharge, 1u8),
                RequirementExpression::Area(Area::InsideThunderhead_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadIsleOfSongsDinsPower),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 4u8),
                RequirementExpression::Area(Area::IsleOfSongs_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadIsleOfSongsFaroresCourage),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::IsleOfSongs_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::ThunderheadIsleOfSongsNayrusWisdom),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 3u8),
                RequirementExpression::Area(Area::IsleOfSongs_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::VolcanoSummitBokoBasePouchChest),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Area(Area::InsideVolcanoSummit_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::VolcanoSummitSmallChestInVolcanoSummit),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Area(Area::InsideVolcanoSummit_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::VolcanoSummitGossipStoneOutsideFireSanctuary),
            RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::OutsideFireSanctuary_Middle, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::VolcanoSummitItemBehindDigging),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 2u8),
                RequirementExpression::Area(Area::OutsideFireSanctuary_Middle, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::VolcanoSummitChestBehindBombableWallInWaterfallArea),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::VolcanoSummitWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Location(Location::VolcanoSummitGossipStoneInWaterfallArea),
            RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::VolcanoSummitWaterfall_Main, TimeOfDay::Both),
            ]),
        ),
        (
            RequirementKey::Event(Event::ActivateFireNode),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::FireNode_End, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::ActivateLightningNode),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::LightningNode_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::ActivateSkyviewGoddessWall),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::BombBag, 1u8),
                ]),
                RequirementExpression::Item(Item::WaterScale, 1u8),
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::SkyviewTemple_Entry, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::ActivateWaterNode),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::BeatDemise),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::TriforcesCollected),
                RequirementExpression::Area(Area::HyliasTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::BeatRequiredDungeons),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::BehindTheTempleStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::BehindTheTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatAncientCistern),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::AncientCisternCandleRoom_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatEarthTemple),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::EarthTempleSpring_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatFireSanctuary),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::FireSanctuaryFlameRoom_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatLanayruMiningFacility),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::LanayruMiningFacilityToToT_ToTExit,
                    TimeOfDay::Both,
                ),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatSandship),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Area(Area::SandshipBoss_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatSkyKeep),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::SkyKeepSmallKey, 1u8),
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Item(Item::Whip, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::SkyKeepEntry_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanBeatSkyview),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SkyviewSpring_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanFreelyChangeSandshipTemporality),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::SandshipSmallKey, 2u8),
                ]),
                RequirementExpression::Area(Area::Sandship_Deck, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanLowerAcStatue),
            RequirementExpression::Or(vec![
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Area(
                        Area::AncientCistern_MainRoomVines,
                        TimeOfDay::Both,
                    ),
                ]),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::Whip, 1u8),
                    RequirementExpression::Area(Area::AncientCistern_SpiderThread, TimeOfDay::Both),
                ]),
            ]),
        ),
        (
            RequirementKey::Event(Event::CanPlayCleanCut),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::InsideBambooIsland_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanPlayThrillDigger),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::ThrillDiggerCave_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanRetrievePartyWheel),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::CanSellTreasures),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::RupinsHouse_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::DeepWoodsStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::DefeatImprisoned2),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::StartImprisoned2),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SealedGroundsSpiral_Lower, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::DefeatedShipyardMolderach),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GustBellows, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Area(Area::ShipyardConstructionBay_Lower, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::DeliveredHotSoup),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::LumpyPumpkinQuestStart),
                RequirementExpression::Area(Area::SparringHall_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::DesertEntranceStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::EldinEntranceStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_FirstRoom, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::EndurancePotion),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::LanayruDesertDungeonBeaten),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                    RequirementExpression::Item(Item::EmptyBottle, 1u8),
                ]),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::FaronWoodsEntryStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Entry, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::FloriaWaterfallStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FloriaWaterfall_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::ForestTempleStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeEastOfEarthTempleEntrance),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeWestOfEarthTempleEntrance),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveMitts, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeAtEldinEntrance),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::EldinVolcano_FirstRoom, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeAtLanayruMinesEntrance),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeAtRideNearTempleOfTime),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::TempleOfTime_NearCube, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInAncientHarbour),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SandSeaDocks_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInDeepWoods),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInEldinSlide),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::EldinVolcano_SandSlide, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInFloriaWaterfall),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::FloriaWaterfall_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInLakeFloria),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::LakeFloria_StatueSpot, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInMogmaTurf),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInPirateStronghold),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(
                    Area::OutsidePiratesStronghold_InsideSharkhead,
                    TimeOfDay::Both,
                ),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInSandOasis),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInSecretPassagewayInDesert),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::Item(Item::BombBag, 1u8),
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveBeetle, 2u8),
                            RequirementExpression::Fixed(true),
                        ]),
                    ]),
                    RequirementExpression::Item(Item::Clawshots, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                ]),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInSkippersRetreat),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SkippersRetreat_PastMoblin, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInSkyviewSpring),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::SkyviewSpring_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInSummitWaterfall),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::VolcanoSummitWaterfall_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeInsideVolcanoSummit),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::FireshieldEarrings, 1u8),
                RequirementExpression::Or(vec![
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                        RequirementExpression::Option(|options| options.hero_mode),
                    ]),
                    RequirementExpression::Item(Item::ProgressiveSword, 6u8),
                ]),
                RequirementExpression::Area(Area::InsideVolcanoSummit_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeNearFsEntrance),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(
                    Area::OutsideFireSanctuary_ToFireSanctuary,
                    TimeOfDay::Both,
                ),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeNearHookBeetleFight),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Or(vec![
                        RequirementExpression::And(vec![
                            RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                            RequirementExpression::Option(|options| options.hero_mode),
                        ]),
                        RequirementExpression::Item(Item::ProgressiveSword, 6u8),
                    ]),
                    RequirementExpression::And(vec![
                        RequirementExpression::Item(Item::Clawshots, 1u8),
                        RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    ]),
                ]),
                RequirementExpression::Area(Area::LanayruDesert_HookBeetleArea, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeNearMogmaTurfEntrance),
            RequirementExpression::Or(vec![
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    RequirementExpression::Area(Area::EldinVolcano_PastMogmaTurf, TimeOfDay::Both),
                ]),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                    RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
                ]),
            ]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeOnEastGreatTreeWithClawshotsTarget),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::FaronWoods_ClawshotTargetBranch, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeOnEastGreatTreeWithRope),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeOnWestGreatTreeNearExit),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::FaronWoods_GreatTreePlatforms, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GoddessCubeOnTopOfSkyview),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::GreatTreeStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::HighRupeeFarm),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::CanRetrievePartyWheel),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::InTheWoodsStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::InitialGoddessCube),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressiveSword, 2u8),
                RequirementExpression::Area(Area::DeepWoods_PastBeehive, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::InsideTheVolcanoStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(
                    Area::OutsideFireSanctuary_ToFireSanctuary,
                    TimeOfDay::Both,
                ),
            ])]),
        ),
        (
            RequirementKey::Event(Event::LakeFloriaStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LakeFloria_StatueSpot, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::LanayruDesertDungeonBeaten),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::TempleOfTime_AfterLmf, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::LanayruMineEntryStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruMines_FirstHalf, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::LumpyPumpkinQuestStart),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                RequirementExpression::Item(Item::EmptyBottle, 1u8),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::NorthDesertStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::OpenSharkhead),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBow, 1u8),
                ]),
                RequirementExpression::And(vec![
                    RequirementExpression::Item(Item::GustBellows, 1u8),
                    RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                ]),
                RequirementExpression::Area(Area::InsidePiratesStronghold_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::OpenedShed),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Night),
                RequirementExpression::Area(Area::Skyloft_OutsideSkyloftVillage, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::PickUpGuld),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::MogmaTurf_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::PickUpLeviasSoup),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::SpiralCharge, 1u8),
                RequirementExpression::Area(Area::LumpyPumpkin_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::PumpkinCarrying),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::DeliveredHotSoup),
                RequirementExpression::Area(Area::Sky_OutsideLumpyPumpkin, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::RaiseGoT),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::GoddessHarp, 1u8),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::RaiseLanayruMiningFacility),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::ActivateWaterNode),
                RequirementExpression::Event(Event::ActivateFireNode),
                RequirementExpression::Event(Event::ActivateLightningNode),
                RequirementExpression::Item(Item::ProgressiveSword, 1u8),
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::RetrieveCrystalBall),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::Clawshots, 1u8),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::RetrieveOolo),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::BombBag, 1u8),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::SaveOrielle),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Item(Item::ProgressivePouch, 1u8),
                RequirementExpression::Item(Item::EmptyBottle, 1u8),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::SealedGroundsStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedGroundsSpiral_Upper, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::StartImprisoned2),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Event(Event::RaiseGoT),
                RequirementExpression::Event(Event::BeatRequiredDungeons),
                RequirementExpression::Event(Event::SwordRequirementMet),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::StoneCacheStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_PastToT, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::SwordRequirementMet),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::SealedTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::TalkToOrielle),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Sky_Field, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::TalkToPeatriceInBazaar),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::Bazaar_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::TalkToYerbal),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Or(vec![
                    RequirementExpression::Item(Item::ProgressiveSlingshot, 1u8),
                    RequirementExpression::Item(Item::ProgressiveBeetle, 1u8),
                ]),
                RequirementExpression::Area(Area::FaronWoods_GreatTreeTop, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::TempleEntranceStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_OutsideEt, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::TriforcesCollected),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::HyliasTemple_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::UnlockedZeldasRoom),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::KnightAcademy_AboveZeldasRoom, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::ViewingPlatformStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::FaronWoods_Main, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::VolcanoAscentStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_VolcanoAscent, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::VolcanoEastStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::EldinVolcano_PreMogmaTurf, TimeOfDay::Both),
            ])]),
        ),
        (
            RequirementKey::Event(Event::WestDesertStatue),
            RequirementExpression::Or(vec![RequirementExpression::And(vec![
                RequirementExpression::Fixed(true),
                RequirementExpression::Area(Area::LanayruDesert_SandOasis, TimeOfDay::Both),
            ])]),
        ),
    ]))
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum OpenThunderhead {
    Ballad,
    Open,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum StartingSword {
    Swordless,
    PracticeSword,
    GoddessSword,
    GoddessLongsword,
    GoddessWhiteSword,
    MasterSword,
    TrueMasterSword,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum RandomizeEntrances {
    None,
    RequiredDungeonsSeparately,
    AllDungeons,
    AllDungeonsSkyKeep,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum MaxBatreauxReward {
    X0,
    X5,
    X10,
    X30,
    X40,
    X50,
    X70,
    X80,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ShopMode {
    Vanilla,
    AlwaysJunk,
    Randomized,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum RupoorMode {
    Off,
    Added,
    RupoorMayhem,
    RupoorInsanity,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum GotStart {
    Lowered,
    Raised,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum GotSwordRequirement {
    GoddessSword,
    GoddessLongsword,
    GoddessWhitesword,
    MasterSword,
    TrueMasterSword,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum GotDungeonRequirement {
    Required,
    Unrequired,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum OpenLmf {
    Nodes,
    Open,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum MapMode {
    Removed,
    Vanilla,
    OwnDungeonRestricted,
    OwnDungeonUnrestricted,
    Anywhere,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SmallKeyMode {
    Vanilla,
    OwnDungeonRestricted,
    LanayruCavesKeyOnly,
    Anywhere,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum BossKeyMode {
    Vanilla,
    OwnDungeon,
    Anywhere,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum LogicMode {
    BiTless,
    Glitched,
    NoLogic,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum HintDistribution {
    Junk,
    Normal,
    Bingo,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SongHints {
    None,
    Basic,
    Advanced,
    Direct,
}
#[derive(Debug, Clone)]
pub struct Options {
    pub starting_tablet_count: usize,
    pub open_thunderhead: OpenThunderhead,
    pub starting_sword: StartingSword,
    pub required_dungeon_count: usize,
    pub imp2_skip: bool,
    pub empty_unrequired_dungeons: bool,
    pub skip_skykeep: bool,
    pub hero_mode: bool,
    pub randomize_entrances: RandomizeEntrances,
    pub randomize_trials: bool,
    pub start_with_pouch: bool,
    pub no_spoiler_log: bool,
    pub max_batreaux_reward: MaxBatreauxReward,
    pub shop_mode: ShopMode,
    pub rupoor_mode: RupoorMode,
    pub got_start: GotStart,
    pub got_sword_requirement: GotSwordRequirement,
    pub got_dungeon_requirement: GotDungeonRequirement,
    pub open_lmf: OpenLmf,
    pub skip_horde: bool,
    pub skip_g3: bool,
    pub skip_demise: bool,
    pub map_mode: MapMode,
    pub small_key_mode: SmallKeyMode,
    pub boss_key_mode: BossKeyMode,
    pub logic_mode: LogicMode,
    pub hint_distribution: HintDistribution,
    pub sots_hints: usize,
    pub sometimes_hints: usize,
    pub barren_hints: usize,
    pub location_hints: usize,
    pub item_hints: usize,
    pub song_hints: SongHints,
    pub fix_bit_crashes: bool,
    pub impa_sot_hint: bool,
    pub sword_dungeon_reward: bool,
    pub open_et: bool,
}
impl Default for Options {
    fn default() -> Self {
        Options {
            starting_tablet_count: 3isize as usize,
            open_thunderhead: OpenThunderhead::Ballad,
            starting_sword: StartingSword::GoddessSword,
            required_dungeon_count: 2isize as usize,
            imp2_skip: true,
            empty_unrequired_dungeons: false,
            skip_skykeep: false,
            hero_mode: true,
            randomize_entrances: RandomizeEntrances::None,
            randomize_trials: false,
            start_with_pouch: false,
            no_spoiler_log: false,
            max_batreaux_reward: MaxBatreauxReward::X80,
            shop_mode: ShopMode::Randomized,
            rupoor_mode: RupoorMode::Off,
            got_start: GotStart::Lowered,
            got_sword_requirement: GotSwordRequirement::MasterSword,
            got_dungeon_requirement: GotDungeonRequirement::Required,
            open_lmf: OpenLmf::Nodes,
            skip_horde: false,
            skip_g3: false,
            skip_demise: false,
            map_mode: MapMode::OwnDungeonUnrestricted,
            small_key_mode: SmallKeyMode::OwnDungeonRestricted,
            boss_key_mode: BossKeyMode::OwnDungeon,
            logic_mode: LogicMode::BiTless,
            hint_distribution: HintDistribution::Normal,
            sots_hints: 0isize as usize,
            sometimes_hints: 0isize as usize,
            barren_hints: 0isize as usize,
            location_hints: 0isize as usize,
            item_hints: 0isize as usize,
            song_hints: SongHints::None,
            fix_bit_crashes: false,
            impa_sot_hint: true,
            sword_dungeon_reward: false,
            open_et: false,
        }
    }
}
