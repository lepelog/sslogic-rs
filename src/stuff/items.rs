use std::convert::TryFrom;

#[derive(Debug, Eq, PartialEq, Hash, Copy, Clone)]
pub enum Item {
    Slingshot,
    BombBag,
    GustBellows,
    Whip,
    Bow,
    BugNet,
    WaterScale,
    FireshieldEarrings,
    Clawshots,
    StoneOfTrials,
    SeaChart,
    EmeraldTablet,
    RubyTablet,
    AmberTablet,
    BabyRattle,
    CawlinsLetter,
    HornedColossusBeetle,
    GoddessHarp,
    BalladOfTheGoddess,
    FaroresCourage,
    NayrusWisdom,
    DinsPower,
    FaronSongOfTheHeroPart,
    EldinSongOfTheHeroPart,
    LanayruSongOfTheHeroPart,
    SpiralCharge,
    GratitudeCrystalPack,
    GratitudeCrystal,
    ProgressiveSword,
    ProgressiveMitts,
    ProgressiveBeetle,
    ProgressivePouch,
    KeyPiece,
    EmptyBottle,
    ProgressiveWallet,
    ExtraWallet,
    SVSmallKey,
    SVBossKey,
    ETBossKey,
    LMFSmallKey,
    LMFBossKey,
    ACSmallKey,
    ACBossKey,
    SSHSmallKey,
    SSHBossKey,
    FSSmallKey,
    FSBossKey,
    SKSmallKey,
    CavesSmallKey,
    BugMedal,
    CursedMedal,
    HeartContainer,
    HeartMedal,
    HeartPiece,
    HylianShield,
    LifeMedal,
    PotionMedal,
    RupeeMedal,
    SmallBombBag,
    SmallQuiver,
    SmallSeedSatchel,
    TreasureMedal,
    WoodenShield,
}

pub const ALL_PROGRESS_ITEMS: &'static [Item] = &[
    Item::Slingshot,
    Item::BombBag,
    Item::GustBellows,
    Item::Whip,
    Item::Bow,
    Item::BugNet,
    Item::WaterScale,
    Item::FireshieldEarrings,
    Item::Clawshots,
    Item::StoneOfTrials,
    Item::SeaChart,
    Item::EmeraldTablet,
    Item::RubyTablet,
    Item::AmberTablet,
    Item::BabyRattle,
    Item::CawlinsLetter,
    Item::HornedColossusBeetle,
    Item::GoddessHarp,
    Item::BalladOfTheGoddess,
    Item::FaroresCourage,
    Item::NayrusWisdom,
    Item::DinsPower,
    Item::FaronSongOfTheHeroPart,
    Item::EldinSongOfTheHeroPart,
    Item::LanayruSongOfTheHeroPart,
    Item::SpiralCharge,
    Item::GratitudeCrystalPack,
    Item::GratitudeCrystal,
    Item::ProgressiveSword,
    Item::ProgressiveMitts,
    Item::ProgressiveBeetle,
    Item::ProgressivePouch,
    Item::KeyPiece,
    Item::EmptyBottle,
    Item::ProgressiveWallet,
    Item::ExtraWallet,
    Item::SVSmallKey,
    Item::SVBossKey,
    Item::ETBossKey,
    Item::LMFSmallKey,
    Item::LMFBossKey,
    Item::ACSmallKey,
    Item::ACBossKey,
    Item::SSHSmallKey,
    Item::SSHBossKey,
    Item::FSSmallKey,
    Item::FSBossKey,
    Item::SKSmallKey,
    Item::CavesSmallKey,
];

pub const ALL_NON_PROGRESS_ITEMS: &'static [Item] = &[
    Item::BugMedal,
    Item::CursedMedal,
    Item::HeartContainer,
    Item::HeartMedal,
    Item::HeartPiece,
    Item::HylianShield,
    Item::LifeMedal,
    Item::PotionMedal,
    Item::RupeeMedal,
    Item::SmallBombBag,
    Item::SmallQuiver,
    Item::SmallSeedSatchel,
    Item::TreasureMedal,
    Item::WoodenShield,
];

impl TryFrom<&str> for Item {
    type Error = &'static str;

    fn try_from(s: &str) -> Result<Self, Self::Error> {
        match s {
            "Slingshot" => Ok(Item::Slingshot),
            "Bomb Bag" => Ok(Item::BombBag),
            "Gust Bellows" => Ok(Item::GustBellows),
            "Whip" => Ok(Item::Whip),
            "Bow" => Ok(Item::Bow),
            "Bug Net" => Ok(Item::BugNet),
            "Water Scale" => Ok(Item::WaterScale),
            "Fireshield Earrings" => Ok(Item::FireshieldEarrings),
            "Clawshots" => Ok(Item::Clawshots),
            "Stone of Trials" => Ok(Item::StoneOfTrials),
            "Sea Chart" => Ok(Item::SeaChart),
            "Emerald Tablet" => Ok(Item::EmeraldTablet),
            "Ruby Tablet" => Ok(Item::RubyTablet),
            "Amber Tablet" => Ok(Item::AmberTablet),
            "Baby Rattle" => Ok(Item::BabyRattle),
            "Cawlin's Letter" => Ok(Item::CawlinsLetter),
            "Horned Colossus Beetle" => Ok(Item::HornedColossusBeetle),
            "Goddess Harp" => Ok(Item::GoddessHarp),
            "Ballad of the Goddess" => Ok(Item::BalladOfTheGoddess),
            "Farore's Courage" => Ok(Item::FaroresCourage),
            "Nayru's Wisdom" => Ok(Item::NayrusWisdom),
            "Din's Power" => Ok(Item::DinsPower),
            "Faron Song of the Hero Part" => Ok(Item::FaronSongOfTheHeroPart),
            "Eldin Song of the Hero Part" => Ok(Item::EldinSongOfTheHeroPart),
            "Lanayru Song of the Hero Part" => Ok(Item::LanayruSongOfTheHeroPart),
            "Spiral Charge" => Ok(Item::SpiralCharge),
            "5 Gratitude Crystals" => Ok(Item::GratitudeCrystalPack),
            "Gratitude Crystal" => Ok(Item::GratitudeCrystal),
            "Progressive Sword" => Ok(Item::ProgressiveSword),
            "Progressive Mitts" => Ok(Item::ProgressiveMitts),
            "Progressive Beetle" => Ok(Item::ProgressiveBeetle),
            "Progressive Pouch" => Ok(Item::ProgressivePouch),
            "Key Piece" => Ok(Item::KeyPiece),
            "Empty Bottle" => Ok(Item::EmptyBottle),
            "Progressive Wallet" => Ok(Item::ProgressiveWallet),
            "Extra Wallet" => Ok(Item::ExtraWallet),
            "SV Small Key" => Ok(Item::SVSmallKey),
            "SV Boss Key" => Ok(Item::SVBossKey),
            "ET Boss Key" => Ok(Item::ETBossKey),
            "LMF Small Key" => Ok(Item::LMFSmallKey),
            "LMF Boss Key" => Ok(Item::LMFBossKey),
            "AC Small Key" => Ok(Item::ACSmallKey),
            "AC Boss Key" => Ok(Item::ACBossKey),
            "SS Small Key" => Ok(Item::SSHSmallKey),
            "SS Boss Key" => Ok(Item::SSHBossKey),
            "FS Small Key" => Ok(Item::FSSmallKey),
            "FS Boss Key" => Ok(Item::FSBossKey),
            "SK Small Key" => Ok(Item::SKSmallKey),
            "LanayruCaves Small Key" => Ok(Item::CavesSmallKey),
            "Bug Medal" => Ok(Item::BugMedal),
            "Cursed Medal" => Ok(Item::CursedMedal),
            "Heart Medal" => Ok(Item::HeartMedal),
            "Life Medal" => Ok(Item::LifeMedal),
            "Potion Medal" => Ok(Item::PotionMedal),
            "Rupee Medal" => Ok(Item::RupeeMedal),
            "Treasure Medal" => Ok(Item::TreasureMedal),
            "Heart Container" => Ok(Item::HeartContainer),
            "Heart Piece" => Ok(Item::HeartPiece),
            "Wooden Shield" => Ok(Item::WoodenShield),
            "Hylian Shield" => Ok(Item::HylianShield),
            "Small Seed Satchel" => Ok(Item::SmallSeedSatchel),
            "Small Bomb Bag" => Ok(Item::SmallBombBag),
            "Small Quiver" => Ok(Item::SmallQuiver),
            _ => Err("not a valid item!"),
        }
    }
}

impl Item {
    pub fn get_orig_game_count(&self) -> usize {
        match self {
            Item::GratitudeCrystalPack => 13,
            Item::GratitudeCrystal => 15,
            Item::ProgressiveSword => 6,
            Item::ProgressiveMitts => 2,
            Item::ProgressiveBeetle => 2,
            Item::ProgressivePouch => 5,
            Item::KeyPiece => 5,
            Item::EmptyBottle => 5,
            Item::ProgressiveWallet => 4,
            Item::ExtraWallet => 3,
            Item::SVSmallKey => 2,
            Item::ACSmallKey => 2,
            Item::SSHSmallKey => 2,
            Item::FSSmallKey => 3,
            Item::HeartContainer => 6,
            Item::HeartMedal => 2,
            Item::HeartPiece => 24,
            Item::LifeMedal => 2,
            Item::RupeeMedal => 2,
            _ => 1,
        }
    }
}

pub const ALL_DUNGEON_ENTRANCES: &'static [&'static str] = &[
    "Dungeon Entrance In Deep Woods",
    "Dungeon Entrance In Eldin Volcano",
    "Dungeon Entrance In Lanayru Desert",
    "Dungeon Entrance In Lake Floria",
    "Dungeon Entrance In Sand Sea",
    "Dungeon Entrance In Volcano Summit",
    "Dungeon Entrance On Skyloft",
];

pub const ALL_DUNGEONS: &'static [&'static str] = &[
    "Skyview",
    "Earth Temple",
    "Lanayru Mining Facility",
    "Ancient Cistern",
    "Sandship",
    "Fire Sanctuary",
    "Skykeep",
];
