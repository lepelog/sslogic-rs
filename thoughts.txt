- progress locations are purely determined by settings and progress dungeons
- items can either be progress or nonprogress
 - all progress items are always in progress locations
 - an item can also be marked as "relevant", which means it's nonprogress but only appears in progress locations
- we need to determine ER (leave out for now, keep vanilla)
- we need to separate the progress items from the nonprogress items
 - every item that doesn't have the ability to unlock a location


logic data structure

each type has a key (u16):
- region
- stage
- area
- check (location with item)
- location (arbitrary other thing we care about, such as "beat game", sheikah stones)
- events (stuff from one location that's required at another)
- entrance
- exit
- item

does this need requirement keys? We could just use a requirement enum

enum RequirementKey {
    Check(CheckKey),
    Exit(ExitKey),
    Location(LocationKey),
}

loc.req() // turns the location into a requirement

impl LocationKey {
    pub fn req(&self) -> RequirementKey {
        RequirementKey(*self)
    }
}

creating this is basically free, it uses hash maps anyways

      .
    . &   D
  B | C   

parents:
1: 0
2: 1
3: 1
4: 0

children:
0: 1,4
1: 2,3

blocks:
2,3,4*

B (true;ref D) C (false;done) D (end)

0: CHECK ITEM 000
1: Scale
2: jump True +6
3: CHECK EVENT
4: 123
5: done when false
6: CHECK SETTING
7: 543
8: end

0: check item
1: check item count
2: check area tod
3: check event
4: check 
